{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Documents\\\\prepswisefinalprojects\\\\breeze(15)-frontend\\\\breeze\\\\src\\\\components\\\\dashboard_component\\\\feature_component\\\\fetchuser\\\\CompanyUsersComponent.js\\\\CompanyUsersComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport AdminService from '../../../../../Services/admin_service/AdminService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CompanyUsersComponent = () => {\n  _s();\n  const [enrolledCandidates, setEnrolledCandidates] = useState([]);\n  const [selectedCompany, setSelectedCompany] = useState(0);\n  const [showEnrolledCandidates, setShowEnrolledCandidates] = useState(false);\n  const [loadingBar, setLoadingBar] = useState(false);\n  const [errorMessageDiv, setErrorMessageDiv] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const fetchCompaniesData = async () => {\n    try {\n      const response = await AdminService.getCompanies(); // Replace with actual API call\n      console.log(response);\n    } catch (error) {\n      console.error(\"Error fetching companies:\", error.message);\n    }\n  };\n  const handleCloseCompanyModal = () => {\n    fetchCompaniesData();\n    setShowEnrolledCandidates(false);\n    setSelectedCompany(0);\n    setEnrolledCandidates([]);\n  };\n  const fetchUsersWithCompanyName = async companyId => {\n    setLoadingBar(true);\n    const requestPayload = {\n      companyId\n    };\n    try {\n      const responseData = await AdminService.fetchCandidatesByCompany(requestPayload);\n      console.log(responseData);\n      if (responseData.length === 0) {\n        displayErrorMessage('Candidates are not found');\n      } else {\n        setEnrolledCandidates(responseData);\n        setSelectedCompany(companyId);\n        setShowEnrolledCandidates(true);\n      }\n    } catch (error) {\n      console.error(error.message);\n      handleFetchCandidatesErrors(error.message, companyId);\n    } finally {\n      setLoadingBar(false);\n    }\n  };\n  const handleFetchCandidatesErrors = (errorStatus, companyId) => {\n    if (Constants.INVALID_REQUEST_FIELD === errorStatus) displayErrorMessage(\"Selected company is invalid\");else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus) displayErrorMessage(\"Sorry, Our service is down\");else displayErrorMessage(\"Could not process your request\");\n  };\n  const displayErrorMessage = message => {\n    setErrorMessage(message);\n    setErrorMessageDiv(true);\n    setTimeout(() => {\n      setErrorMessage(\"\");\n      setErrorMessageDiv(false);\n    }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Company Users\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), errorMessageDiv && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 33\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => fetchUsersWithCompanyName(1),\n      children: \"Fetch Users for Company 1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), showEnrolledCandidates && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Enrolled Candidates\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(enrolledCandidates, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n};\n_s(CompanyUsersComponent, \"B8GL6KMMHHp3KEMdOk9mEpP6mQA=\");\n_c = CompanyUsersComponent;\nexport default CompanyUsersComponent;\nvar _c;\n$RefreshReg$(_c, \"CompanyUsersComponent\");","map":{"version":3,"names":["React","useState","useEffect","AdminService","jsxDEV","_jsxDEV","CompanyUsersComponent","_s","enrolledCandidates","setEnrolledCandidates","selectedCompany","setSelectedCompany","showEnrolledCandidates","setShowEnrolledCandidates","loadingBar","setLoadingBar","errorMessageDiv","setErrorMessageDiv","errorMessage","setErrorMessage","fetchCompaniesData","response","getCompanies","console","log","error","message","handleCloseCompanyModal","fetchUsersWithCompanyName","companyId","requestPayload","responseData","fetchCandidatesByCompany","length","displayErrorMessage","handleFetchCandidatesErrors","errorStatus","Constants","INVALID_REQUEST_FIELD","BREEZE_DATABASE_EXCEPTION","setTimeout","SET_TIME_OUT_FOR_ERROR_MSG","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","JSON","stringify","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Documents/prepswisefinalprojects/breeze(15)-frontend/breeze/src/components/dashboard_component/feature_component/fetchuser/CompanyUsersComponent.js/CompanyUsersComponent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport AdminService from '../../../../../Services/admin_service/AdminService';\r\n\r\n\r\nconst CompanyUsersComponent = () => {\r\n    const [enrolledCandidates, setEnrolledCandidates] = useState([]);\r\n    const [selectedCompany, setSelectedCompany] = useState(0);\r\n    const [showEnrolledCandidates, setShowEnrolledCandidates] = useState(false);\r\n    const [loadingBar, setLoadingBar] = useState(false);\r\n    const [errorMessageDiv, setErrorMessageDiv] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n    const fetchCompaniesData = async () => {\r\n        try {\r\n            const response = await AdminService.getCompanies(); // Replace with actual API call\r\n            console.log(response);\r\n        } catch (error) {\r\n            console.error(\"Error fetching companies:\", error.message);\r\n        }\r\n    };\r\n\r\n    const handleCloseCompanyModal = () => {\r\n        fetchCompaniesData();\r\n        setShowEnrolledCandidates(false);\r\n        setSelectedCompany(0);\r\n        setEnrolledCandidates([]);\r\n    };\r\n\r\n    const fetchUsersWithCompanyName = async (companyId) => {\r\n        setLoadingBar(true);\r\n        const requestPayload = { companyId };\r\n        try {\r\n            const responseData = await AdminService.fetchCandidatesByCompany(requestPayload);\r\n            console.log(responseData);\r\n            if (responseData.length === 0) {\r\n                displayErrorMessage('Candidates are not found');\r\n            } else {\r\n                setEnrolledCandidates(responseData);\r\n                setSelectedCompany(companyId);\r\n                setShowEnrolledCandidates(true);\r\n            }\r\n        } catch (error) {\r\n            console.error(error.message);\r\n            handleFetchCandidatesErrors(error.message, companyId);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    };\r\n\r\n    const handleFetchCandidatesErrors = (errorStatus, companyId) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            displayErrorMessage(\"Selected company is invalid\");\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            displayErrorMessage(\"Sorry, Our service is down\");\r\n        else displayErrorMessage(\"Could not process your request\");\r\n    };\r\n\r\n    const displayErrorMessage = (message) => {\r\n        setErrorMessage(message);\r\n        setErrorMessageDiv(true);\r\n        setTimeout(() => {\r\n            setErrorMessage(\"\");\r\n            setErrorMessageDiv(false);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Company Users</h1>\r\n            {errorMessageDiv && <div className=\"error-message\">{errorMessage}</div>}\r\n            <button onClick={() => fetchUsersWithCompanyName(1)}>Fetch Users for Company 1</button>\r\n            {showEnrolledCandidates && (\r\n                <div>\r\n                    <h2>Enrolled Candidates</h2>\r\n                    <pre>{JSON.stringify(enrolledCandidates, null, 2)}</pre>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CompanyUsersComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}