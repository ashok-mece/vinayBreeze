{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Documents\\\\prepswisefinalprojects\\\\breeze(15)-frontend\\\\breeze\\\\src\\\\components\\\\dashboard_component\\\\feature_component\\\\exponent_feature_component\\\\trainer_feature_component\\\\trainer_rejected_trainings_component\\\\TrainerRejectedTrainings.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport './TrainerRejectedTrainings.css';\nimport TrainerService from '../../../../../../Services/exponent_service/TrainerService';\nimport { Button, Card, Container, Modal } from 'react-bootstrap';\nimport GlobalService from '../../../../../../Services/global_service/GlobalService';\nimport Constants from '../../../../../Constants';\nimport Select from 'react-select';\nimport Multiselect from 'multiselect-react-dropdown';\nimport Datetime from 'react-datetime';\nimport \"react-datetime/css/react-datetime.css\";\nimport LoadingBar from '../../../../../loading_bar_component/LoadingBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TrainerRejectedTrainings() {\n  _s();\n  const [loadingBar, setLoadingBar] = useState(false);\n  const [rejectedTrainings, setRejectedTrainings] = useState([]);\n  const userId = localStorage.getItem(\"breezeUserId\");\n  const getRejectedTrainingByExponentId = async () => {\n    setLoadingBar(true);\n    const request = {\n      exponentId: userId\n    };\n    try {\n      const responseData = await TrainerService.getRejectedTrainingByExponentId(request);\n      console.log(responseData);\n      if (responseData.length === 0) {\n        rejectedTrainingsDisplayErrMsg('Rejected Trainings are not Available');\n      } else {\n        setRejectedTrainings(responseData);\n      }\n    } catch (error) {\n      console.log(error.message);\n      handleTrainerRejectedTrainingsErrors(error.message);\n    } finally {\n      setLoadingBar(false);\n    }\n  };\n  useEffect(() => {\n    getRejectedTrainingByExponentId();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const handleTrainerRejectedTrainingsErrors = errorStatus => {\n    if (Constants.INVALID_REQUEST_FIELD === errorStatus) rejectedTrainingsDisplayErrMsg(\"Trainer Id is invalid\");else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus) rejectedTrainingsDisplayErrMsg(\"Sorry, Our service is down\");else rejectedTrainingsDisplayErrMsg(\"Could not process your request\");\n  };\n\n  //Fields for to display err msg div and label\n  const [messageColor, setMessageColor] = useState(Constants.MESSAGE_COLOR);\n  const [errMsgDiv, setErrMsgDiv] = useState(false);\n  const [errMsg, setErrMsg] = useState(\"\");\n  //JS for to display err msg\n  const rejectedTrainingsDisplayErrMsg = errorMessage => {\n    setErrMsg(errorMessage);\n    setErrMsgDiv(true);\n    // setTimeout(() => {\n    //     setErrMsg(\"\");\n    //     setErrMsgDiv(false);\n    // }, 3000);\n  };\n  const customCssForMsg = {\n    fontSize: 'medium',\n    fontWeight: '700',\n    color: messageColor\n  };\n  const [courseContentUrl, setCourseContentUrl] = useState('');\n  useEffect(() => {\n    if (courseContentUrl) {\n      window.open(courseContentUrl, '_blank');\n    }\n  }, [courseContentUrl]);\n  const handleOpenCourseContent = async (path, trainingId) => {\n    setLoadingBar(true);\n    console.log(path);\n    try {\n      const courseContentRequest = {\n        courseContent: path\n      };\n      const courseContentResponse = await GlobalService.getCourseContentByPath(courseContentRequest);\n      console.log(courseContentResponse);\n      const courseContentFile = new Blob([courseContentResponse.data], {\n        type: courseContentResponse.headers['content-type']\n      });\n      const courseContentFileUrl = URL.createObjectURL(courseContentFile);\n      setCourseContentUrl(courseContentFileUrl);\n    } catch (error) {\n      console.error('Error fetching data for path:', path, error);\n      handleCourseContentErrors(error.message, trainingId);\n    } finally {\n      setLoadingBar(false);\n    }\n  };\n  const handleCourseContentErrors = (errorStatus, trainingId) => {\n    if (Constants.INVALID_REQUEST_FIELD === errorStatus) handleOpenFilesErrMsg(\"Course Content Path is invalid\", trainingId);else if (Constants.FILES_NOT_FOUND === errorStatus) handleOpenFilesErrMsg(\"File Not Found\", trainingId);else handleOpenFilesErrMsg(\"Could not process your request\", trainingId);\n  };\n  const [showIntroVideoModal, setShowIntroVideoModal] = useState(false);\n  const handleIntroVideoModalClose = () => {\n    setShowIntroVideoModal(false);\n    setIntroVideoUrl('');\n  };\n  const [introVideoUrl, setIntroVideoUrl] = useState('');\n  useEffect(() => {\n    if (introVideoUrl) {\n      setShowIntroVideoModal(true);\n    }\n  }, [introVideoUrl]);\n  const handleOpenIntroVideo = async (path, trainingId) => {\n    setLoadingBar(true);\n    console.log(path);\n    try {\n      const introVideoRequest = {\n        introVideo: path\n      };\n      const introVideoResponse = await GlobalService.getIntroVideoByPath(introVideoRequest);\n      console.log(introVideoResponse);\n      const introVideoFileUrl = URL.createObjectURL(introVideoResponse.data);\n      setIntroVideoUrl(introVideoFileUrl);\n    } catch (error) {\n      console.error('Error fetching data for path:', path, error);\n      handleIntroVideoErrors(error.message, trainingId);\n    } finally {\n      setLoadingBar(false);\n    }\n  };\n  const handleIntroVideoErrors = (errorStatus, trainingId) => {\n    if (Constants.INVALID_REQUEST_FIELD === errorStatus) handleOpenFilesErrMsg(\"Intro Video Path is invalid\", trainingId);else if (Constants.FILES_NOT_FOUND === errorStatus) handleOpenFilesErrMsg(\"File Not Found\", trainingId);else handleOpenFilesErrMsg(\"Could not process your request\", trainingId);\n  };\n  const [fileClicked, setFileClicked] = useState(0);\n  const [openFilesErr, setOpenFilesErr] = useState('');\n  const handleOpenFilesErrMsg = (errorMessage, trainingId) => {\n    setOpenFilesErr(errorMessage);\n    setFileClicked(trainingId);\n    setTimeout(() => {\n      setOpenFilesErr('');\n      setFileClicked(0);\n    }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\n  };\n\n  //update button clicked code\n  const childColor = getComputedStyle(document.documentElement).getPropertyValue('--child-color');\n  const [showUpdateTrainingModal, setShowUpdateTrainingModal] = useState(false);\n  const handleUpdateTrainingModalClose = () => {\n    setShowUpdateTrainingModal(false);\n    setTrainingId(0);\n    setTechnologies([]);\n    setCourseContent(null);\n    setIntroVideo(null);\n    setTechnologiesList([]);\n    setDefaultCourse([]);\n    setDefaultTechnologyList([]);\n    setCourseDuration(0);\n    setCourseStartDateAndTime(null);\n  };\n  // course code\n  const [defaultCourse, setDefaultCourse] = useState([]);\n  // technology code\n  const [trainingId, setTrainingId] = useState(0);\n  const [technologies, setTechnologies] = useState([]);\n  const [technologiesList, setTechnologiesList] = useState([]);\n  const [defaultTechnologyList, setDefaultTechnologyList] = useState([]);\n  const onSelectTechnology = (selectedList, selectedItem) => {\n    console.log(selectedList);\n    setTechnologies([...selectedList]);\n    console.log(technologies);\n  };\n  const onRemoveTechnology = (selectedList, removedItem) => {\n    setTechnologies([...selectedList]);\n    console.log(technologies);\n  };\n  // corse duration\n  const [courseDuration, setCourseDuration] = useState(0);\n  const handleCourseDurationChange = event => {\n    setCourseDuration(event.target.value);\n  };\n\n  // date and time\n  const [courseStartDateAndTime, setCourseStartDateAndTime] = useState(null);\n  const minDate = new Date();\n  minDate.setDate(minDate.getDate() + 3);\n  const maxDate = new Date();\n  maxDate.setDate(maxDate.getDate() + 17);\n  const isValidDate = current => {\n    return current.isAfter(minDate) && current.isBefore(maxDate);\n  };\n  const handleCourseStartDateChange = date => {\n    setCourseStartDateAndTime(date);\n  };\n  // updated course content and intro video file\n  const [courseContent, setCourseContent] = useState(null);\n  const handleCourseContentFile = event => {\n    const file = event.target.files[0];\n    if (file && (file.type === 'application/pdf' || file.type === 'application/msword' || file.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document')) {\n      setCourseContent(file);\n    } else {\n      alert('Please select a PDF or Word document');\n      event.target.value = ''; // Clear the file input\n      setCourseContent(null);\n    }\n  };\n  const [introVideo, setIntroVideo] = useState(null);\n  const handleIntroVideoFile = event => {\n    const file = event.target.files[0];\n    if (file && file.type.startsWith('video/')) {\n      setIntroVideo(file);\n    } else {\n      alert('Please select a video file');\n      event.target.value = ''; // Clear the file input\n      setIntroVideo(null);\n    }\n  };\n  // update button onclick\n  const handleUpdateTrainingBtnClick = async training => {\n    setLoadingBar(true);\n    setTrainingId(training.trainingId);\n    setDefaultCourse({\n      courseName: training.courseName\n    });\n    // setDefaultTechnologyList(training.technologyList);\n    // setTechnologies(training.technologyList);\n\n    const techStackRequest = {\n      userId: training.exponentId\n    };\n    try {\n      const responseData = await GlobalService.getTechStackByExponentId(techStackRequest);\n      console.log(responseData);\n      const jsonResponseData = responseData.map((item, index) => {\n        return {\n          technologyName: item\n        };\n      });\n      console.log(jsonResponseData);\n      setTechnologiesList(jsonResponseData);\n      if (technologiesList) {\n        // setCourseDuration(training.courseDuration);\n        setShowUpdateTrainingModal(true);\n      }\n    } catch (error) {\n      console.log(error.message);\n      handleTechnicalStackErrors(error.message, training.trainingId);\n    } finally {\n      setLoadingBar(false);\n    }\n    console.log(training.technologyList);\n  };\n  const handleTechnicalStackErrors = (errorStatus, trainingId) => {\n    if (Constants.INVALID_REQUEST_FIELD === errorStatus) handleOpenFilesErrMsg(\"Trainer Id is invalid\", trainingId);else if (Constants.ENTITY_NOT_FOUND === errorStatus) handleOpenFilesErrMsg(\"Entity Not Found\", trainingId);else handleOpenFilesErrMsg(\"Could not process your request\", trainingId);\n  };\n  const handleUpdateTraining = async () => {\n    console.log(trainingId);\n    console.log(technologies);\n    console.log(technologies.map(tech => tech.technologyName));\n    console.log(courseDuration);\n    console.log(courseStartDateAndTime);\n    console.log(!courseContent);\n    console.log(!introVideo);\n    if (courseDuration !== 0 && (courseDuration > 120 || courseDuration < 30)) {\n      updateTrainingDisplayErrMsg('Please give course duration between 30 to 120 (in days)');\n    } else if (courseContent && courseContent.size > 5 * 1024 * 1024) {\n      updateTrainingDisplayErrMsg('Course content file size exceeds the maximum limit of 5MB');\n    } else if (introVideo && introVideo.size > 5 * 1024 * 1024) {\n      updateTrainingDisplayErrMsg('Intro video file size exceeds the maximum limit of 5MB');\n    } else if ((technologies === null || technologies.length === 0) && courseDuration === 0 && courseStartDateAndTime === null && !courseContent && !introVideo) {\n      updateTrainingDisplayErrMsg('Please select any field to update');\n    } else {\n      setLoadingBar(true);\n      // Update FormData object \n      const formData = new FormData();\n      formData.append('trainingId', trainingId);\n      formData.append('technologyList', technologies.map(tech => tech.technologyName));\n      formData.append('courseContentFile', courseContent);\n      formData.append('introVideoFile', introVideo);\n      formData.append('courseDuration', courseDuration);\n      formData.append('courseStartDateAndTime', courseStartDateAndTime);\n      formData.append('sessionDuration', Constants.SESSION_DURATION);\n      console.log(formData);\n      try {\n        const responseData = await TrainerService.updateTrainingByTrainingId(formData);\n        console.log(responseData);\n        updateTrainingDisplaySucMsg('Training Updated Successfully');\n      } catch (error) {\n        handleUpdateTrianingErrors(error.message);\n      } finally {\n        setLoadingBar(false);\n      }\n    }\n  };\n  const handleUpdateTrianingErrors = errorStatus => {\n    if (Constants.INVALID_REQUEST_FIELD === errorStatus) updateTrainingDisplayErrMsg(\"Trainer Id is invalid\", trainingId);else if (Constants.ENTITY_NOT_FOUND === errorStatus) updateTrainingDisplayErrMsg(\"Entity Not Found\", trainingId);else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus) updateTrainingDisplayErrMsg(\"Sorry, Our service is down\");else if (Constants.FILES_NOT_UPLOADED === errorStatus) updateTrainingDisplayErrMsg(\"Files not uploaded, please try again\");else updateTrainingDisplayErrMsg(\"Could not process your request\", trainingId);\n  };\n  const [updateTraingErrMsgDiv, setUpdateTraingErrMsgDiv] = useState(false);\n  const [updateTraingErrMsg, setUpdateTraingErrMsg] = useState(\"\");\n  //JS for to display err msg\n  const updateTrainingDisplayErrMsg = errorMessage => {\n    setUpdateTraingErrMsg(errorMessage);\n    setUpdateTraingErrMsgDiv(true);\n    setTimeout(() => {\n      setUpdateTraingErrMsg(\"\");\n      setUpdateTraingErrMsgDiv(false);\n    }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\n  };\n  const updateTrainingDisplaySucMsg = errorMessage => {\n    setMessageColor('green');\n    setUpdateTraingErrMsg(errorMessage);\n    setUpdateTraingErrMsgDiv(true);\n    setTimeout(() => {\n      setUpdateTraingErrMsg(\"\");\n      setUpdateTraingErrMsgDiv(false);\n      setMessageColor(Constants.MESSAGE_COLOR);\n      handleUpdateTrainingModalClose();\n      window.location.reload();\n    }, Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"trainer-rejected-trainings\",\n    style: {\n      fontSize: '13px'\n    },\n    children: [loadingBar && /*#__PURE__*/_jsxDEV(LoadingBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 29\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4\",\n      style: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        maxHeight: '80vh',\n        overflow: 'auto'\n      },\n      children: [rejectedTrainings.map((item, index) => /*#__PURE__*/_jsxDEV(Card, {\n        style: {\n          width: '22rem',\n          margin: '0.5rem'\n        },\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(Card.Body, {\n          children: /*#__PURE__*/_jsxDEV(Card.Text, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"rejected-training\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  style: {\n                    textDecoration: 'underline',\n                    fontSize: '15px'\n                  },\n                  children: item.courseName + ' Training'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 359,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  style: {\n                    float: 'right'\n                  },\n                  className: \"update-button\",\n                  onClick: () => handleUpdateTrainingBtnClick(item),\n                  children: \"Update\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 360,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 358,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Course : \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 368,\n                columnNumber: 37\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                children: item.courseName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 368,\n                columnNumber: 62\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 368,\n                columnNumber: 93\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Technical-Stack : \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 369,\n                columnNumber: 37\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                children: item.technologyList.map(tech => tech.technologyName).join(', ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 369,\n                columnNumber: 71\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 369,\n                columnNumber: 150\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  display: 'flex',\n                  justifyContent: 'space-between'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Course Duration : \"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 372,\n                    columnNumber: 45\n                  }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: item.courseDuration + \" days\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 372,\n                    columnNumber: 79\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 371,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Start Date : \"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 375,\n                    columnNumber: 45\n                  }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: Constants.convertUserTimezoneDateTime(item.courseStartDateAndTime).date\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 375,\n                    columnNumber: 74\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 374,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 370,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  display: 'flex',\n                  justifyContent: 'space-between'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Session Duration : \"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 380,\n                    columnNumber: 45\n                  }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: item.sessionDuration\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 380,\n                    columnNumber: 80\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 379,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Start Time : \"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 383,\n                    columnNumber: 45\n                  }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: Constants.formatTime(Constants.convertUserTimezoneDateTime(item.courseStartDateAndTime).time)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 383,\n                    columnNumber: 74\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 382,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 378,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Course Content : \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 386,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleOpenCourseContent(item.courseContent, item.trainingId),\n                  style: {\n                    border: 'none',\n                    background: 'none',\n                    padding: '0',\n                    color: '#1b4962',\n                    textDecoration: 'underline',\n                    cursor: 'pointer'\n                  },\n                  children: \"Open Course Content\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 388,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 387,\n                columnNumber: 37\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 401,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Intro Video : \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 402,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleOpenIntroVideo(item.introVideo, item.trainingId),\n                  style: {\n                    border: 'none',\n                    background: 'none',\n                    padding: '0',\n                    color: '#1b4962',\n                    textDecoration: 'underline',\n                    cursor: 'pointer'\n                  },\n                  children: \"Play Intro Video\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 404,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 403,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: fileClicked === item.trainingId && /*#__PURE__*/_jsxDEV(\"div\", {\n                style: customCssForMsg,\n                children: /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: openFilesErr\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 422,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 421,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 419,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Card.Footer, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Status : \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 33\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: item.adminStatus\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 430,\n                columnNumber: 64\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 58\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 107\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Reason : \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 431,\n              columnNumber: 33\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: item.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 431,\n                columnNumber: 64\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 431,\n              columnNumber: 58\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: errMsgDiv && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: customCssForMsg,\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: errMsg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 13\n    }, this), showIntroVideoModal && /*#__PURE__*/_jsxDEV(Modal, {\n      className: \"intro-video-modal\",\n      size: \"md\",\n      show: showIntroVideoModal,\n      onHide: handleIntroVideoModalClose,\n      centered: true,\n      backdrop: \"static\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        className: \"px-5\",\n        children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n          closeButton: true,\n          children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n            style: {\n              fontSize: '18px'\n            },\n            children: \"Intro Video\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col\",\n              children: introVideoUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"intro-video-container\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    maxWidth: '100%',\n                    height: 'auto',\n                    position: 'relative',\n                    overflow: 'hidden',\n                    paddingTop: '56.25%'\n                  },\n                  children: /*#__PURE__*/_jsxDEV(\"video\", {\n                    src: introVideoUrl,\n                    style: {\n                      position: 'absolute',\n                      top: 0,\n                      left: 0,\n                      width: '100%',\n                      height: '100%'\n                    },\n                    controls: true,\n                    autoPlay: true,\n                    muted: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 457,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 456,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 455,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 453,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 17\n    }, this), showUpdateTrainingModal && /*#__PURE__*/_jsxDEV(Modal, {\n      className: \"update-training-modal\",\n      size: \"lg\",\n      show: showUpdateTrainingModal,\n      onHide: handleUpdateTrainingModalClose,\n      centered: true,\n      backdrop: \"static\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n          closeButton: true,\n          children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n            children: \"Update Training\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"update-training\",\n            style: {\n              fontSize: '14px'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"training-form\",\n              children: /*#__PURE__*/_jsxDEV(\"form\", {\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"course\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Selected Course\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 478,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Select, {\n                    getOptionLabel: options => {\n                      return options[\"courseName\"];\n                    },\n                    getOptionValue: options => {\n                      return options[\"courseName\"];\n                    },\n                    value: defaultCourse,\n                    isDisabled: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 479,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 477,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"technology-multiselect mt-3\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Update Technical Stack\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 491,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Multiselect, {\n                    id: \"technology\",\n                    options: technologiesList\n                    // selectedValues={defaultTechnologyList}\n                    ,\n                    onSelect: onSelectTechnology,\n                    onRemove: onRemoveTechnology,\n                    displayValue: \"technologyName\" //technologyName\n                    ,\n                    placeholder: \"Your Technical Stack\",\n                    avoidHighlightFirstOption: true,\n                    style: {\n                      chips: {\n                        background: childColor\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 492,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 490,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"course-duration mt-3\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: [\"Course Duration \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"(Number of days)\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 509,\n                      columnNumber: 68\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 509,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    min: 30,\n                    max: 120,\n                    className: \"form-control\",\n                    placeholder: \"Duration\",\n                    value: courseDuration,\n                    onChange: handleCourseDurationChange\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 510,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 508,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"date-time mt-3\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: [\"Select Training Start Date and Time \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"(You can select after 3 days to current date)\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 521,\n                      columnNumber: 88\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 521,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Datetime, {\n                    value: courseStartDateAndTime,\n                    onChange: handleCourseStartDateChange,\n                    isValidDate: isValidDate,\n                    inputProps: {\n                      placeholder: 'Select Date and Time',\n                      readOnly: true\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 522,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 520,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"course-content-file mt-3\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: [\"Upload Course Content \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"(max size is 5MB)\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 533,\n                      columnNumber: 74\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 533,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"file\",\n                    className: \"form-control\",\n                    id: \"courseContentFile\",\n                    accept: \".pdf,.doc,.docx\",\n                    onChange: handleCourseContentFile\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 534,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 532,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"intro-video-file mt-3\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: [\"Upload Your Intro Video \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"(1 minute) (max size is 5MB)\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 543,\n                      columnNumber: 76\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 543,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"file\",\n                    className: \"form-control\",\n                    id: \"introVideoFile\",\n                    accept: \"video/*\",\n                    onChange: handleIntroVideoFile\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 544,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 542,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mt-2\",\n                  children: updateTraingErrMsgDiv && /*#__PURE__*/_jsxDEV(\"div\", {\n                    style: customCssForMsg,\n                    children: /*#__PURE__*/_jsxDEV(\"label\", {\n                      children: updateTraingErrMsg\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 555,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 554,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 552,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 476,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 475,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"update-training-button\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              className: \"dashboard-button\",\n              onClick: handleUpdateTraining,\n              children: \"Update\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 564,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 563,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 562,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 350,\n    columnNumber: 9\n  }, this);\n}\n_s(TrainerRejectedTrainings, \"PkjR6p6IHttvQV979BANtZdgBqo=\");\n_c = TrainerRejectedTrainings;\nexport default TrainerRejectedTrainings;\n\n/**==================================================================================================== */\n\n/**\r\n * import { useEffect, useState } from 'react';\r\nimport './TrainerRejectedTrainings.css';\r\nimport TrainerService from '../../../../../../Services/exponent_service/TrainerService';\r\nimport { Button, Card, Container, Modal } from 'react-bootstrap';\r\nimport GlobalService from '../../../../../../Services/global_service/GlobalService';\r\nimport Constants from '../../../../../Constants';\r\nimport Select from 'react-select';\r\nimport Multiselect from 'multiselect-react-dropdown';\r\nimport Datetime from 'react-datetime';\r\nimport \"react-datetime/css/react-datetime.css\";\r\nimport LoadingBar from '../../../../../loading_bar_component/LoadingBar';\r\n\r\nfunction TrainerRejectedTrainings() {\r\n\r\n    const [loadingBar, setLoadingBar] = useState(false);\r\n\r\n    const [rejectedTrainings, setRejectedTrainings] = useState([]);\r\n    const userId = localStorage.getItem(\"breezeUserId\");\r\n    const getRejectedTrainingByExponentId = async () => {\r\n        setLoadingBar(true);\r\n        const request = {\r\n            exponentId: userId,\r\n        }\r\n        try {\r\n            const responseData = await TrainerService.getRejectedTrainingByExponentId(request);\r\n            console.log(responseData);\r\n            if (responseData.length === 0) {\r\n                rejectedTrainingsDisplayErrMsg('Rejected Trainings are not Available');\r\n            } else {\r\n                setRejectedTrainings(responseData);\r\n            }\r\n        } catch (error) {\r\n            console.log(error.message);\r\n            handleTrainerRejectedTrainingsErrors(error.message);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        getRejectedTrainingByExponentId();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const handleTrainerRejectedTrainingsErrors = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            rejectedTrainingsDisplayErrMsg(\"Trainer Id is invalid\");\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            rejectedTrainingsDisplayErrMsg(\"Sorry, Our service is down\");\r\n        else\r\n            rejectedTrainingsDisplayErrMsg(\"Could not process your request\");\r\n    }\r\n\r\n    //Fields for to display err msg div and label\r\n    const [messageColor, setMessageColor] = useState(Constants.MESSAGE_COLOR);\r\n    const [errMsgDiv, setErrMsgDiv] = useState(false);\r\n    const [errMsg, setErrMsg] = useState(\"\");\r\n    //JS for to display err msg\r\n    const rejectedTrainingsDisplayErrMsg = (errorMessage) => {\r\n        setErrMsg(errorMessage);\r\n        setErrMsgDiv(true);\r\n        // setTimeout(() => {\r\n        //     setErrMsg(\"\");\r\n        //     setErrMsgDiv(false);\r\n        // }, 3000);\r\n    }\r\n\r\n    const customCssForMsg = {\r\n        fontSize: 'medium',\r\n        fontWeight: '700',\r\n        color: messageColor,\r\n    }\r\n\r\n    const [courseContentUrl, setCourseContentUrl] = useState('');\r\n    useEffect(() => {\r\n        if (courseContentUrl) {\r\n            window.open(courseContentUrl, '_blank');\r\n        }\r\n    }, [courseContentUrl]);\r\n    const handleOpenCourseContent = async (path, trainingId) => {\r\n        setLoadingBar(true);\r\n        console.log(path);\r\n        try {\r\n            const courseContentRequest = {\r\n                courseContent: path,\r\n            }\r\n            const courseContentResponse = await GlobalService.getCourseContentByPath(courseContentRequest);\r\n            console.log(courseContentResponse);\r\n            const courseContentFile = new Blob([courseContentResponse.data], { type: courseContentResponse.headers['content-type'] });\r\n            const courseContentFileUrl = URL.createObjectURL(courseContentFile);\r\n            setCourseContentUrl(courseContentFileUrl);\r\n        } catch (error) {\r\n            console.error('Error fetching data for path:', path, error);\r\n            handleCourseContentErrors(error.message, trainingId);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    };\r\n    const handleCourseContentErrors = (errorStatus, trainingId) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            handleOpenFilesErrMsg(\"Course Content Path is invalid\", trainingId);\r\n        else if (Constants.FILES_NOT_FOUND === errorStatus)\r\n            handleOpenFilesErrMsg(\"File Not Found\", trainingId);\r\n        else\r\n            handleOpenFilesErrMsg(\"Could not process your request\", trainingId);\r\n    }\r\n\r\n    const [showIntroVideoModal, setShowIntroVideoModal] = useState(false);\r\n    const handleIntroVideoModalClose = () => {\r\n        setShowIntroVideoModal(false);\r\n        setIntroVideoUrl('');\r\n    };\r\n    const [introVideoUrl, setIntroVideoUrl] = useState('');\r\n    useEffect(() => {\r\n        if (introVideoUrl) {\r\n            setShowIntroVideoModal(true);\r\n        }\r\n    }, [introVideoUrl]);\r\n    const handleOpenIntroVideo = async (path, trainingId) => {\r\n        setLoadingBar(true);\r\n        console.log(path);\r\n        try {\r\n            const introVideoRequest = {\r\n                introVideo: path,\r\n            }\r\n            const introVideoResponse = await GlobalService.getIntroVideoByPath(introVideoRequest);\r\n            console.log(introVideoResponse);\r\n            const introVideoFileUrl = URL.createObjectURL(introVideoResponse.data);\r\n            setIntroVideoUrl(introVideoFileUrl);\r\n        } catch (error) {\r\n            console.error('Error fetching data for path:', path, error);\r\n            handleIntroVideoErrors(error.message, trainingId);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    };\r\n    const handleIntroVideoErrors = (errorStatus, trainingId) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            handleOpenFilesErrMsg(\"Intro Video Path is invalid\", trainingId);\r\n        else if (Constants.FILES_NOT_FOUND === errorStatus)\r\n            handleOpenFilesErrMsg(\"File Not Found\", trainingId);\r\n        else\r\n            handleOpenFilesErrMsg(\"Could not process your request\", trainingId);\r\n    }\r\n\r\n    const [fileClicked, setFileClicked] = useState(0);\r\n    const [openFilesErr, setOpenFilesErr] = useState('');\r\n    const handleOpenFilesErrMsg = (errorMessage, trainingId) => {\r\n        setOpenFilesErr(errorMessage);\r\n        setFileClicked(trainingId);\r\n        setTimeout(() => {\r\n            setOpenFilesErr('');\r\n            setFileClicked(0);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n\r\n    //update button clicked code\r\n    const childColor = getComputedStyle(document.documentElement).getPropertyValue('--child-color');\r\n\r\n    const [showUpdateTrainingModal, setShowUpdateTrainingModal] = useState(false);\r\n    const handleUpdateTrainingModalClose = () => {\r\n        setShowUpdateTrainingModal(false);\r\n        setTrainingId(0);\r\n        setTechnologies([]);\r\n        setCourseContent(null);\r\n        setIntroVideo(null);\r\n        setTechnologiesList([]);\r\n        setDefaultCourse([]);\r\n        setDefaultTechnologyList([]);\r\n        setCourseDuration(0);\r\n        setCourseStartDateAndTime(null);\r\n    }\r\n    // course code\r\n    const [defaultCourse, setDefaultCourse] = useState([]);\r\n    // technology code\r\n    const [trainingId, setTrainingId] = useState(0);\r\n    const [technologies, setTechnologies] = useState([]);\r\n    const [technologiesList, setTechnologiesList] = useState([]);\r\n    const [defaultTechnologyList, setDefaultTechnologyList] = useState([]);\r\n    const onSelectTechnology = (selectedList, selectedItem) => {\r\n        console.log(selectedList);\r\n        setTechnologies([...selectedList]);\r\n        console.log(technologies);\r\n    }\r\n    const onRemoveTechnology = (selectedList, removedItem) => {\r\n        setTechnologies([...selectedList]);\r\n        console.log(technologies);\r\n    }\r\n    // corse duration\r\n    const [courseDuration, setCourseDuration] = useState(0);\r\n    const handleCourseDurationChange = (event) => {\r\n        setCourseDuration(event.target.value);\r\n    }\r\n\r\n    // date and time\r\n    const [courseStartDateAndTime, setCourseStartDateAndTime] = useState(null);\r\n    const minDate = new Date();\r\n    minDate.setDate(minDate.getDate() + 3);\r\n    const maxDate = new Date();\r\n    maxDate.setDate(maxDate.getDate() + 17);\r\n    const isValidDate = (current) => {\r\n        return current.isAfter(minDate) && current.isBefore(maxDate);\r\n    };\r\n    const handleCourseStartDateChange = (date) => {\r\n        setCourseStartDateAndTime(date);\r\n    };\r\n    // updated course content and intro video file\r\n    const [courseContent, setCourseContent] = useState(null);\r\n    const handleCourseContentFile = (event) => {\r\n        const file = event.target.files[0];\r\n        if (file && (file.type === 'application/pdf' || file.type === 'application/msword' || file.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document')) {\r\n            setCourseContent(file);\r\n        } else {\r\n            alert('Please select a PDF or Word document');\r\n            event.target.value = ''; // Clear the file input\r\n            setCourseContent(null);\r\n        }\r\n    };\r\n    const [introVideo, setIntroVideo] = useState(null);\r\n    const handleIntroVideoFile = (event) => {\r\n        const file = event.target.files[0];\r\n        if (file && file.type.startsWith('video/')) {\r\n            setIntroVideo(file);\r\n        } else {\r\n            alert('Please select a video file');\r\n            event.target.value = ''; // Clear the file input\r\n            setIntroVideo(null);\r\n        }\r\n    };\r\n    // update button onclick\r\n    const handleUpdateTrainingBtnClick = async (training) => {\r\n        setLoadingBar(true);\r\n        setTrainingId(training.trainingId);\r\n        setDefaultCourse({ courseName: training.courseName });\r\n        setDefaultTechnologyList(training.technologyList);\r\n        setTechnologies(training.technologyList);\r\n\r\n        const techStackRequest = {\r\n            userId: training.exponentId,\r\n        }\r\n\r\n        try {\r\n            const responseData = await GlobalService.getTechStackByExponentId(techStackRequest);\r\n            console.log(responseData);\r\n            const jsonResponseData = responseData.map((item, index) => {\r\n                return { technologyName: item }\r\n            });\r\n            console.log(jsonResponseData);\r\n            setTechnologiesList(jsonResponseData);\r\n            if (technologiesList) {\r\n                setCourseDuration(training.courseDuration);\r\n                setShowUpdateTrainingModal(true);\r\n            }\r\n        } catch (error) {\r\n            console.log(error.message);\r\n            handleTechnicalStackErrors(error.message, training.trainingId);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n        console.log(training.technologyList);\r\n    }\r\n    const handleTechnicalStackErrors = (errorStatus, trainingId) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            handleOpenFilesErrMsg(\"Trainer Id is invalid\", trainingId);\r\n        else if (Constants.ENTITY_NOT_FOUND === errorStatus)\r\n            handleOpenFilesErrMsg(\"Entity Not Found\", trainingId);\r\n        else\r\n            handleOpenFilesErrMsg(\"Could not process your request\", trainingId);\r\n    }\r\n\r\n    const handleUpdateTraining = async () => {\r\n        console.log(trainingId);\r\n        console.log(technologies);\r\n        console.log(technologies.map(tech => tech.technologyName));\r\n        console.log(courseDuration);\r\n        console.log(courseStartDateAndTime);\r\n\r\n        if (technologies === null || technologies.length === 0) { // need to set default technologyList to technologies\r\n            updateTrainingDisplayErrMsg('Please select technologies to train from your technical stack');\r\n        } else if (courseDuration > 120 || courseDuration < 30) {\r\n            updateTrainingDisplayErrMsg('Please give course duration between 30 to 120 (in days)');\r\n        } else if (courseStartDateAndTime === null) {\r\n            updateTrainingDisplayErrMsg('Please select start date and time');\r\n        } else if (!courseContent) {\r\n            updateTrainingDisplayErrMsg('Please upload course content');\r\n        } else if (!introVideo) {\r\n            updateTrainingDisplayErrMsg('Please upload your 1 minute intro video');\r\n        } else if (courseContent.size > 5 * 1024 * 1024) { \r\n            updateTrainingDisplayErrMsg('Course content file size exceeds the maximum limit of 5MB');\r\n        } else if (introVideo.size > 5 * 1024 * 1024) { \r\n            updateTrainingDisplayErrMsg('Intro video file size exceeds the maximum limit of 5MB');\r\n        } else {\r\n            setLoadingBar(true);\r\n            // Update FormData object \r\n            const formData = new FormData();\r\n            formData.append('trainingId', trainingId);\r\n            formData.append('technologyList', (technologies.map(tech => tech.technologyName)));\r\n            formData.append('courseContentFile', courseContent);\r\n            formData.append('introVideoFile', introVideo);\r\n            formData.append('courseDuration', courseDuration);\r\n            formData.append('courseStartDateAndTime', courseStartDateAndTime);\r\n            formData.append('sessionDuration', Constants.SESSION_DURATION);\r\n            console.log(formData);\r\n            try {\r\n                const responseData = await TrainerService.updateTrainingByTrainingId(formData);\r\n                console.log(responseData);\r\n                updateTrainingDisplaySucMsg('Training Updated Successfully');\r\n            } catch (error) {\r\n                handleUpdateTrianingErrors(error.message);\r\n            } finally {\r\n                setLoadingBar(false);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const handleUpdateTrianingErrors = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            updateTrainingDisplayErrMsg(\"Trainer Id is invalid\", trainingId);\r\n        else if (Constants.ENTITY_NOT_FOUND === errorStatus)\r\n            updateTrainingDisplayErrMsg(\"Entity Not Found\", trainingId);\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            updateTrainingDisplayErrMsg(\"Sorry, Our service is down\");\r\n        else if (Constants.FILES_NOT_UPLOADED === errorStatus)\r\n            updateTrainingDisplayErrMsg(\"Files not uploaded, please try again\");\r\n        else\r\n            updateTrainingDisplayErrMsg(\"Could not process your request\", trainingId);\r\n    }\r\n\r\n    const [updateTraingErrMsgDiv, setUpdateTraingErrMsgDiv] = useState(false);\r\n    const [updateTraingErrMsg, setUpdateTraingErrMsg] = useState(\"\");\r\n    //JS for to display err msg\r\n    const updateTrainingDisplayErrMsg = (errorMessage) => {\r\n        setUpdateTraingErrMsg(errorMessage);\r\n        setUpdateTraingErrMsgDiv(true);\r\n        setTimeout(() => {\r\n            setUpdateTraingErrMsg(\"\");\r\n            setUpdateTraingErrMsgDiv(false);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n    const updateTrainingDisplaySucMsg = (errorMessage) => {\r\n        setMessageColor('green');\r\n        setUpdateTraingErrMsg(errorMessage);\r\n        setUpdateTraingErrMsgDiv(true);\r\n        setTimeout(() => {\r\n            setUpdateTraingErrMsg(\"\");\r\n            setUpdateTraingErrMsgDiv(false);\r\n            setMessageColor(Constants.MESSAGE_COLOR);\r\n            handleUpdateTrainingModalClose();\r\n            window.location.reload();\r\n        }, Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);\r\n    }\r\n\r\n    return (\r\n        <div className=\"trainer-rejected-trainings\" style={{ fontSize: '13px' }}>\r\n            { loadingBar && <LoadingBar /> }\r\n            <div className='mt-4' style={{ display: 'flex', flexWrap: 'wrap', maxHeight: '80vh', overflow: 'auto' }}>\r\n                {rejectedTrainings.map((item, index) => (\r\n                    <Card key={index} style={{ width: '22rem', margin: '0.5rem' }} className=\"card\">\r\n                        <Card.Body>\r\n                            <Card.Text>\r\n                                <div className='rejected-training'>\r\n                                    <div className='flex'>\r\n                                        <label style={{ textDecoration: 'underline', fontSize: '15px' }}>{item.courseName + ' Training'}</label>\r\n                                        <button\r\n                                            style={{ float: 'right' }}\r\n                                            className='update-button'\r\n                                            onClick={() => handleUpdateTrainingBtnClick(item)}\r\n                                        >\r\n                                            Update\r\n                                        </button>\r\n                                    </div>\r\n                                    <label>Course : </label> <span>{item.courseName}</span> <br />\r\n                                    <label>Technical-Stack : </label> <span>{item.technologyList.map(tech => tech.technologyName).join(', ')}</span> <br />\r\n                                    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                                        <div>\r\n                                            <label>Course Duration : </label> <span>{item.courseDuration + \" days\"}</span>\r\n                                        </div>\r\n                                        <div>\r\n                                            <label>Start Date : </label> <span>{(Constants.convertUserTimezoneDateTime(item.courseStartDateAndTime)).date}</span>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                                        <div>\r\n                                            <label>Session Duration : </label> <span>{item.sessionDuration}</span>\r\n                                        </div>\r\n                                        <div>\r\n                                            <label>Start Time : </label> <span>{Constants.formatTime((Constants.convertUserTimezoneDateTime(item.courseStartDateAndTime)).time)}</span>\r\n                                        </div>\r\n                                    </div>\r\n                                    <label>Course Content : </label>\r\n                                    <span>\r\n                                        <button\r\n                                            onClick={() => handleOpenCourseContent(item.courseContent, item.trainingId)}\r\n                                            style={{\r\n                                                border: 'none',\r\n                                                background: 'none',\r\n                                                padding: '0',\r\n                                                color: '#1b4962',\r\n                                                textDecoration: 'underline',\r\n                                                cursor: 'pointer',\r\n                                            }}\r\n                                        >\r\n                                            Open Course Content\r\n                                        </button>\r\n                                    </span> <br />\r\n                                    <label>Intro Video : </label>\r\n                                    <span>\r\n                                        <button\r\n                                            onClick={() => handleOpenIntroVideo(item.introVideo, item.trainingId)}\r\n                                            style={{\r\n                                                border: 'none',\r\n                                                background: 'none',\r\n                                                padding: '0',\r\n                                                color: '#1b4962',\r\n                                                textDecoration: 'underline',\r\n                                                cursor: 'pointer',\r\n                                            }}\r\n                                        >\r\n                                            Play Intro Video\r\n                                        </button>\r\n                                    </span>\r\n                                </div>\r\n                                <div>\r\n                                    {fileClicked === item.trainingId && (\r\n                                        <div style={customCssForMsg}>\r\n                                            <label>{openFilesErr}</label>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </Card.Text>\r\n                        </Card.Body>\r\n                        <Card.Footer>\r\n                            <div>\r\n                                <label>Status : </label> <span><strong>{item.adminStatus}</strong></span> <br />\r\n                                <label>Reason : </label> <span><strong>{item.description}</strong></span>\r\n                            </div>\r\n                        </Card.Footer>\r\n                    </Card>\r\n                ))}\r\n                <div>\r\n                    {errMsgDiv &&\r\n                        <div style={customCssForMsg}>\r\n                            <label>{errMsg}</label>\r\n                        </div>}\r\n                </div>\r\n            </div>\r\n            {showIntroVideoModal && (\r\n                <Modal className='intro-video-modal' size='md' show={showIntroVideoModal} onHide={handleIntroVideoModalClose} centered backdrop=\"static\">\r\n                    <Container className='px-5'>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title style={{ fontSize: '18px' }}>\r\n                                Intro Video\r\n                            </Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <div className=\"row\">\r\n                                <div className=\"col\">\r\n                                    {introVideoUrl && (\r\n                                        <div className=\"intro-video-container\">\r\n                                            <div style={{ maxWidth: '100%', height: 'auto', position: 'relative', overflow: 'hidden', paddingTop: '56.25%' }}>\r\n                                                <video src={introVideoUrl} style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }} controls autoPlay muted />\r\n                                            </div>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </Modal.Body>\r\n                    </Container>\r\n                </Modal>\r\n            )}\r\n            {showUpdateTrainingModal && (\r\n                <Modal className='update-training-modal' size='lg' show={showUpdateTrainingModal} onHide={handleUpdateTrainingModalClose} centered backdrop=\"static\">\r\n                    <Container>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title>Update Training</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <div className=\"update-training\" style={{ fontSize: '14px' }}>\r\n                                <div className=\"training-form\">\r\n                                    <form>\r\n                                        <div className='course'>\r\n                                            <label>Selected Course</label>\r\n                                            <Select\r\n                                                getOptionLabel={(options) => {\r\n                                                    return options[\"courseName\"];\r\n                                                }}\r\n                                                getOptionValue={(options) => {\r\n                                                    return options[\"courseName\"];\r\n                                                }}\r\n                                                value={defaultCourse}\r\n                                                isDisabled={true}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='technology-multiselect mt-3'>\r\n                                            <label>Update Technical Stack</label>\r\n                                            <Multiselect\r\n                                                id='technology'\r\n                                                options={technologiesList}\r\n                                                selectedValues={defaultTechnologyList}\r\n                                                onSelect={onSelectTechnology}\r\n                                                onRemove={onRemoveTechnology}\r\n                                                displayValue=\"technologyName\" //technologyName\r\n                                                placeholder=\"Your Technical Stack\"\r\n                                                avoidHighlightFirstOption={true}\r\n                                                style={{\r\n                                                    chips: {\r\n                                                        background: childColor,\r\n                                                    },\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='course-duration mt-3'>\r\n                                            <label>Course Duration <strong>(Number of days)</strong></label>\r\n                                            <input\r\n                                                type='number'\r\n                                                min={30}\r\n                                                max={120}\r\n                                                className='form-control'\r\n                                                placeholder='Duration'\r\n                                                value={courseDuration}\r\n                                                onChange={handleCourseDurationChange}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='date-time mt-3'>\r\n                                            <label>Select Training Start Date and Time <strong>(You can select after 3 days to current date)</strong></label>\r\n                                            <Datetime\r\n                                                value={courseStartDateAndTime}\r\n                                                onChange={handleCourseStartDateChange}\r\n                                                isValidDate={isValidDate}\r\n                                                inputProps={{ \r\n                                                    placeholder: 'Select Date and Time',\r\n                                                    readOnly: true,\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"course-content-file mt-3\">\r\n                                            <label>Upload Course Content <strong>(max size is 5MB)</strong></label>\r\n                                            <input\r\n                                                type=\"file\"\r\n                                                className=\"form-control\"\r\n                                                id=\"courseContentFile\"\r\n                                                accept=\".pdf,.doc,.docx\"\r\n                                                onChange={handleCourseContentFile}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='intro-video-file mt-3'>\r\n                                            <label>Upload Your Intro Video <strong>(1 minute) (max size is 5MB)</strong></label>\r\n                                            <input\r\n                                                type=\"file\"\r\n                                                className=\"form-control\"\r\n                                                id=\"introVideoFile\"\r\n                                                accept=\"video/*\"\r\n                                                onChange={handleIntroVideoFile}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='mt-2'>\r\n                                            {updateTraingErrMsgDiv &&\r\n                                                <div style={customCssForMsg}>\r\n                                                    <label>{updateTraingErrMsg}</label>\r\n                                                </div>}\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            <div className='update-training-button'>\r\n                                <Button\r\n                                    className='dashboard-button'\r\n                                    onClick={handleUpdateTraining}\r\n                                >\r\n                                    Update\r\n                                </Button>\r\n                            </div>\r\n                        </Modal.Footer>\r\n                    </Container>\r\n                </Modal>\r\n            )}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default TrainerRejectedTrainings;\r\n */\nvar _c;\n$RefreshReg$(_c, \"TrainerRejectedTrainings\");","map":{"version":3,"names":["useEffect","useState","TrainerService","Button","Card","Container","Modal","GlobalService","Constants","Select","Multiselect","Datetime","LoadingBar","jsxDEV","_jsxDEV","TrainerRejectedTrainings","_s","loadingBar","setLoadingBar","rejectedTrainings","setRejectedTrainings","userId","localStorage","getItem","getRejectedTrainingByExponentId","request","exponentId","responseData","console","log","length","rejectedTrainingsDisplayErrMsg","error","message","handleTrainerRejectedTrainingsErrors","errorStatus","INVALID_REQUEST_FIELD","BREEZE_DATABASE_EXCEPTION","messageColor","setMessageColor","MESSAGE_COLOR","errMsgDiv","setErrMsgDiv","errMsg","setErrMsg","errorMessage","customCssForMsg","fontSize","fontWeight","color","courseContentUrl","setCourseContentUrl","window","open","handleOpenCourseContent","path","trainingId","courseContentRequest","courseContent","courseContentResponse","getCourseContentByPath","courseContentFile","Blob","data","type","headers","courseContentFileUrl","URL","createObjectURL","handleCourseContentErrors","handleOpenFilesErrMsg","FILES_NOT_FOUND","showIntroVideoModal","setShowIntroVideoModal","handleIntroVideoModalClose","setIntroVideoUrl","introVideoUrl","handleOpenIntroVideo","introVideoRequest","introVideo","introVideoResponse","getIntroVideoByPath","introVideoFileUrl","handleIntroVideoErrors","fileClicked","setFileClicked","openFilesErr","setOpenFilesErr","setTimeout","SET_TIME_OUT_FOR_ERROR_MSG","childColor","getComputedStyle","document","documentElement","getPropertyValue","showUpdateTrainingModal","setShowUpdateTrainingModal","handleUpdateTrainingModalClose","setTrainingId","setTechnologies","setCourseContent","setIntroVideo","setTechnologiesList","setDefaultCourse","setDefaultTechnologyList","setCourseDuration","setCourseStartDateAndTime","defaultCourse","technologies","technologiesList","defaultTechnologyList","onSelectTechnology","selectedList","selectedItem","onRemoveTechnology","removedItem","courseDuration","handleCourseDurationChange","event","target","value","courseStartDateAndTime","minDate","Date","setDate","getDate","maxDate","isValidDate","current","isAfter","isBefore","handleCourseStartDateChange","date","handleCourseContentFile","file","files","alert","handleIntroVideoFile","startsWith","handleUpdateTrainingBtnClick","training","courseName","techStackRequest","getTechStackByExponentId","jsonResponseData","map","item","index","technologyName","handleTechnicalStackErrors","technologyList","ENTITY_NOT_FOUND","handleUpdateTraining","tech","updateTrainingDisplayErrMsg","size","formData","FormData","append","SESSION_DURATION","updateTrainingByTrainingId","updateTrainingDisplaySucMsg","handleUpdateTrianingErrors","FILES_NOT_UPLOADED","updateTraingErrMsgDiv","setUpdateTraingErrMsgDiv","updateTraingErrMsg","setUpdateTraingErrMsg","location","reload","SET_TIME_OUT_FOR_SUCCESS_MSG","className","style","children","fileName","_jsxFileName","lineNumber","columnNumber","display","flexWrap","maxHeight","overflow","width","margin","Body","Text","textDecoration","float","onClick","join","justifyContent","convertUserTimezoneDateTime","sessionDuration","formatTime","time","border","background","padding","cursor","Footer","adminStatus","description","show","onHide","centered","backdrop","Header","closeButton","Title","maxWidth","height","position","paddingTop","src","top","left","controls","autoPlay","muted","getOptionLabel","options","getOptionValue","isDisabled","id","onSelect","onRemove","displayValue","placeholder","avoidHighlightFirstOption","chips","min","max","onChange","inputProps","readOnly","accept","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Documents/prepswisefinalprojects/breeze(15)-frontend/breeze/src/components/dashboard_component/feature_component/exponent_feature_component/trainer_feature_component/trainer_rejected_trainings_component/TrainerRejectedTrainings.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport './TrainerRejectedTrainings.css';\r\nimport TrainerService from '../../../../../../Services/exponent_service/TrainerService';\r\nimport { Button, Card, Container, Modal } from 'react-bootstrap';\r\nimport GlobalService from '../../../../../../Services/global_service/GlobalService';\r\nimport Constants from '../../../../../Constants';\r\nimport Select from 'react-select';\r\nimport Multiselect from 'multiselect-react-dropdown';\r\nimport Datetime from 'react-datetime';\r\nimport \"react-datetime/css/react-datetime.css\";\r\nimport LoadingBar from '../../../../../loading_bar_component/LoadingBar';\r\n\r\nfunction TrainerRejectedTrainings() {\r\n\r\n    const [loadingBar, setLoadingBar] = useState(false);\r\n\r\n    const [rejectedTrainings, setRejectedTrainings] = useState([]);\r\n    const userId = localStorage.getItem(\"breezeUserId\");\r\n    const getRejectedTrainingByExponentId = async () => {\r\n        setLoadingBar(true);\r\n        const request = {\r\n            exponentId: userId,\r\n        }\r\n        try {\r\n            const responseData = await TrainerService.getRejectedTrainingByExponentId(request);\r\n            console.log(responseData);\r\n            if (responseData.length === 0) {\r\n                rejectedTrainingsDisplayErrMsg('Rejected Trainings are not Available');\r\n            } else {\r\n                setRejectedTrainings(responseData);\r\n            }\r\n        } catch (error) {\r\n            console.log(error.message);\r\n            handleTrainerRejectedTrainingsErrors(error.message);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        getRejectedTrainingByExponentId();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const handleTrainerRejectedTrainingsErrors = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            rejectedTrainingsDisplayErrMsg(\"Trainer Id is invalid\");\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            rejectedTrainingsDisplayErrMsg(\"Sorry, Our service is down\");\r\n        else\r\n            rejectedTrainingsDisplayErrMsg(\"Could not process your request\");\r\n    }\r\n\r\n    //Fields for to display err msg div and label\r\n    const [messageColor, setMessageColor] = useState(Constants.MESSAGE_COLOR);\r\n    const [errMsgDiv, setErrMsgDiv] = useState(false);\r\n    const [errMsg, setErrMsg] = useState(\"\");\r\n    //JS for to display err msg\r\n    const rejectedTrainingsDisplayErrMsg = (errorMessage) => {\r\n        setErrMsg(errorMessage);\r\n        setErrMsgDiv(true);\r\n        // setTimeout(() => {\r\n        //     setErrMsg(\"\");\r\n        //     setErrMsgDiv(false);\r\n        // }, 3000);\r\n    }\r\n\r\n    const customCssForMsg = {\r\n        fontSize: 'medium',\r\n        fontWeight: '700',\r\n        color: messageColor,\r\n    }\r\n\r\n    const [courseContentUrl, setCourseContentUrl] = useState('');\r\n    useEffect(() => {\r\n        if (courseContentUrl) {\r\n            window.open(courseContentUrl, '_blank');\r\n        }\r\n    }, [courseContentUrl]);\r\n    const handleOpenCourseContent = async (path, trainingId) => {\r\n        setLoadingBar(true);\r\n        console.log(path);\r\n        try {\r\n            const courseContentRequest = {\r\n                courseContent: path,\r\n            }\r\n            const courseContentResponse = await GlobalService.getCourseContentByPath(courseContentRequest);\r\n            console.log(courseContentResponse);\r\n            const courseContentFile = new Blob([courseContentResponse.data], { type: courseContentResponse.headers['content-type'] });\r\n            const courseContentFileUrl = URL.createObjectURL(courseContentFile);\r\n            setCourseContentUrl(courseContentFileUrl);\r\n        } catch (error) {\r\n            console.error('Error fetching data for path:', path, error);\r\n            handleCourseContentErrors(error.message, trainingId);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    };\r\n    const handleCourseContentErrors = (errorStatus, trainingId) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            handleOpenFilesErrMsg(\"Course Content Path is invalid\", trainingId);\r\n        else if (Constants.FILES_NOT_FOUND === errorStatus)\r\n            handleOpenFilesErrMsg(\"File Not Found\", trainingId);\r\n        else\r\n            handleOpenFilesErrMsg(\"Could not process your request\", trainingId);\r\n    }\r\n\r\n    const [showIntroVideoModal, setShowIntroVideoModal] = useState(false);\r\n    const handleIntroVideoModalClose = () => {\r\n        setShowIntroVideoModal(false);\r\n        setIntroVideoUrl('');\r\n    };\r\n    const [introVideoUrl, setIntroVideoUrl] = useState('');\r\n    useEffect(() => {\r\n        if (introVideoUrl) {\r\n            setShowIntroVideoModal(true);\r\n        }\r\n    }, [introVideoUrl]);\r\n    const handleOpenIntroVideo = async (path, trainingId) => {\r\n        setLoadingBar(true);\r\n        console.log(path);\r\n        try {\r\n            const introVideoRequest = {\r\n                introVideo: path,\r\n            }\r\n            const introVideoResponse = await GlobalService.getIntroVideoByPath(introVideoRequest);\r\n            console.log(introVideoResponse);\r\n            const introVideoFileUrl = URL.createObjectURL(introVideoResponse.data);\r\n            setIntroVideoUrl(introVideoFileUrl);\r\n        } catch (error) {\r\n            console.error('Error fetching data for path:', path, error);\r\n            handleIntroVideoErrors(error.message, trainingId);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    };\r\n    const handleIntroVideoErrors = (errorStatus, trainingId) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            handleOpenFilesErrMsg(\"Intro Video Path is invalid\", trainingId);\r\n        else if (Constants.FILES_NOT_FOUND === errorStatus)\r\n            handleOpenFilesErrMsg(\"File Not Found\", trainingId);\r\n        else\r\n            handleOpenFilesErrMsg(\"Could not process your request\", trainingId);\r\n    }\r\n\r\n    const [fileClicked, setFileClicked] = useState(0);\r\n    const [openFilesErr, setOpenFilesErr] = useState('');\r\n    const handleOpenFilesErrMsg = (errorMessage, trainingId) => {\r\n        setOpenFilesErr(errorMessage);\r\n        setFileClicked(trainingId);\r\n        setTimeout(() => {\r\n            setOpenFilesErr('');\r\n            setFileClicked(0);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n\r\n    //update button clicked code\r\n    const childColor = getComputedStyle(document.documentElement).getPropertyValue('--child-color');\r\n\r\n    const [showUpdateTrainingModal, setShowUpdateTrainingModal] = useState(false);\r\n    const handleUpdateTrainingModalClose = () => {\r\n        setShowUpdateTrainingModal(false);\r\n        setTrainingId(0);\r\n        setTechnologies([]);\r\n        setCourseContent(null);\r\n        setIntroVideo(null);\r\n        setTechnologiesList([]);\r\n        setDefaultCourse([]);\r\n        setDefaultTechnologyList([]);\r\n        setCourseDuration(0);\r\n        setCourseStartDateAndTime(null);\r\n    }\r\n    // course code\r\n    const [defaultCourse, setDefaultCourse] = useState([]);\r\n    // technology code\r\n    const [trainingId, setTrainingId] = useState(0);\r\n    const [technologies, setTechnologies] = useState([]);\r\n    const [technologiesList, setTechnologiesList] = useState([]);\r\n    const [defaultTechnologyList, setDefaultTechnologyList] = useState([]);\r\n    const onSelectTechnology = (selectedList, selectedItem) => {\r\n        console.log(selectedList);\r\n        setTechnologies([...selectedList]);\r\n        console.log(technologies);\r\n    }\r\n    const onRemoveTechnology = (selectedList, removedItem) => {\r\n        setTechnologies([...selectedList]);\r\n        console.log(technologies);\r\n    }\r\n    // corse duration\r\n    const [courseDuration, setCourseDuration] = useState(0);\r\n    const handleCourseDurationChange = (event) => {\r\n        setCourseDuration(event.target.value);\r\n    }\r\n\r\n    // date and time\r\n    const [courseStartDateAndTime, setCourseStartDateAndTime] = useState(null);\r\n    const minDate = new Date();\r\n    minDate.setDate(minDate.getDate() + 3);\r\n    const maxDate = new Date();\r\n    maxDate.setDate(maxDate.getDate() + 17);\r\n    const isValidDate = (current) => {\r\n        return current.isAfter(minDate) && current.isBefore(maxDate);\r\n    };\r\n    const handleCourseStartDateChange = (date) => {\r\n        setCourseStartDateAndTime(date);\r\n    };\r\n    // updated course content and intro video file\r\n    const [courseContent, setCourseContent] = useState(null);\r\n    const handleCourseContentFile = (event) => {\r\n        const file = event.target.files[0];\r\n        if (file && (file.type === 'application/pdf' || file.type === 'application/msword' || file.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document')) {\r\n            setCourseContent(file);\r\n        } else {\r\n            alert('Please select a PDF or Word document');\r\n            event.target.value = ''; // Clear the file input\r\n            setCourseContent(null);\r\n        }\r\n    };\r\n    const [introVideo, setIntroVideo] = useState(null);\r\n    const handleIntroVideoFile = (event) => {\r\n        const file = event.target.files[0];\r\n        if (file && file.type.startsWith('video/')) {\r\n            setIntroVideo(file);\r\n        } else {\r\n            alert('Please select a video file');\r\n            event.target.value = ''; // Clear the file input\r\n            setIntroVideo(null);\r\n        }\r\n    };\r\n    // update button onclick\r\n    const handleUpdateTrainingBtnClick = async (training) => {\r\n        setLoadingBar(true);\r\n        setTrainingId(training.trainingId);\r\n        setDefaultCourse({ courseName: training.courseName });\r\n        // setDefaultTechnologyList(training.technologyList);\r\n        // setTechnologies(training.technologyList);\r\n\r\n        const techStackRequest = {\r\n            userId: training.exponentId,\r\n        }\r\n\r\n        try {\r\n            const responseData = await GlobalService.getTechStackByExponentId(techStackRequest);\r\n            console.log(responseData);\r\n            const jsonResponseData = responseData.map((item, index) => {\r\n                return { technologyName: item }\r\n            });\r\n            console.log(jsonResponseData);\r\n            setTechnologiesList(jsonResponseData);\r\n            if (technologiesList) {\r\n                // setCourseDuration(training.courseDuration);\r\n                setShowUpdateTrainingModal(true);\r\n            }\r\n        } catch (error) {\r\n            console.log(error.message);\r\n            handleTechnicalStackErrors(error.message, training.trainingId);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n        console.log(training.technologyList);\r\n    }\r\n    const handleTechnicalStackErrors = (errorStatus, trainingId) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            handleOpenFilesErrMsg(\"Trainer Id is invalid\", trainingId);\r\n        else if (Constants.ENTITY_NOT_FOUND === errorStatus)\r\n            handleOpenFilesErrMsg(\"Entity Not Found\", trainingId);\r\n        else\r\n            handleOpenFilesErrMsg(\"Could not process your request\", trainingId);\r\n    }\r\n\r\n    const handleUpdateTraining = async () => {\r\n        console.log(trainingId);\r\n        console.log(technologies);\r\n        console.log(technologies.map(tech => tech.technologyName));\r\n        console.log(courseDuration);\r\n        console.log(courseStartDateAndTime);\r\n        console.log(!courseContent);\r\n        console.log(!introVideo);\r\n\r\n        if (courseDuration !== 0 && (courseDuration > 120 || courseDuration < 30)) {\r\n            updateTrainingDisplayErrMsg('Please give course duration between 30 to 120 (in days)');\r\n        } else if (courseContent && courseContent.size > 5 * 1024 * 1024) { \r\n            updateTrainingDisplayErrMsg('Course content file size exceeds the maximum limit of 5MB');\r\n        } else if (introVideo && introVideo.size > 5 * 1024 * 1024) { \r\n            updateTrainingDisplayErrMsg('Intro video file size exceeds the maximum limit of 5MB');\r\n        } else if ((technologies === null || technologies.length === 0) && courseDuration === 0 && courseStartDateAndTime === null && !courseContent && !introVideo) { \r\n            updateTrainingDisplayErrMsg('Please select any field to update');\r\n        } else {\r\n            setLoadingBar(true);\r\n            // Update FormData object \r\n            const formData = new FormData();\r\n            formData.append('trainingId', trainingId);\r\n            formData.append('technologyList', (technologies.map(tech => tech.technologyName)));\r\n            formData.append('courseContentFile', courseContent);\r\n            formData.append('introVideoFile', introVideo);\r\n            formData.append('courseDuration', courseDuration);\r\n            formData.append('courseStartDateAndTime', courseStartDateAndTime);\r\n            formData.append('sessionDuration', Constants.SESSION_DURATION);\r\n            console.log(formData);\r\n            try {\r\n                const responseData = await TrainerService.updateTrainingByTrainingId(formData);\r\n                console.log(responseData);\r\n                updateTrainingDisplaySucMsg('Training Updated Successfully');\r\n            } catch (error) {\r\n                handleUpdateTrianingErrors(error.message);\r\n            } finally {\r\n                setLoadingBar(false);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const handleUpdateTrianingErrors = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            updateTrainingDisplayErrMsg(\"Trainer Id is invalid\", trainingId);\r\n        else if (Constants.ENTITY_NOT_FOUND === errorStatus)\r\n            updateTrainingDisplayErrMsg(\"Entity Not Found\", trainingId);\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            updateTrainingDisplayErrMsg(\"Sorry, Our service is down\");\r\n        else if (Constants.FILES_NOT_UPLOADED === errorStatus)\r\n            updateTrainingDisplayErrMsg(\"Files not uploaded, please try again\");\r\n        else\r\n            updateTrainingDisplayErrMsg(\"Could not process your request\", trainingId);\r\n    }\r\n\r\n    const [updateTraingErrMsgDiv, setUpdateTraingErrMsgDiv] = useState(false);\r\n    const [updateTraingErrMsg, setUpdateTraingErrMsg] = useState(\"\");\r\n    //JS for to display err msg\r\n    const updateTrainingDisplayErrMsg = (errorMessage) => {\r\n        setUpdateTraingErrMsg(errorMessage);\r\n        setUpdateTraingErrMsgDiv(true);\r\n        setTimeout(() => {\r\n            setUpdateTraingErrMsg(\"\");\r\n            setUpdateTraingErrMsgDiv(false);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n    const updateTrainingDisplaySucMsg = (errorMessage) => {\r\n        setMessageColor('green');\r\n        setUpdateTraingErrMsg(errorMessage);\r\n        setUpdateTraingErrMsgDiv(true);\r\n        setTimeout(() => {\r\n            setUpdateTraingErrMsg(\"\");\r\n            setUpdateTraingErrMsgDiv(false);\r\n            setMessageColor(Constants.MESSAGE_COLOR);\r\n            handleUpdateTrainingModalClose();\r\n            window.location.reload();\r\n        }, Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);\r\n    }\r\n\r\n    return (\r\n        <div className=\"trainer-rejected-trainings\" style={{ fontSize: '13px' }}>\r\n            { loadingBar && <LoadingBar /> }\r\n            <div className='mt-4' style={{ display: 'flex', flexWrap: 'wrap', maxHeight: '80vh', overflow: 'auto' }}>\r\n                {rejectedTrainings.map((item, index) => (\r\n                    <Card key={index} style={{ width: '22rem', margin: '0.5rem' }} className=\"card\">\r\n                        <Card.Body>\r\n                            <Card.Text>\r\n                                <div className='rejected-training'>\r\n                                    <div className='flex'>\r\n                                        <label style={{ textDecoration: 'underline', fontSize: '15px' }}>{item.courseName + ' Training'}</label>\r\n                                        <button\r\n                                            style={{ float: 'right' }}\r\n                                            className='update-button'\r\n                                            onClick={() => handleUpdateTrainingBtnClick(item)}\r\n                                        >\r\n                                            Update\r\n                                        </button>\r\n                                    </div>\r\n                                    <label>Course : </label> <span>{item.courseName}</span> <br />\r\n                                    <label>Technical-Stack : </label> <span>{item.technologyList.map(tech => tech.technologyName).join(', ')}</span> <br />\r\n                                    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                                        <div>\r\n                                            <label>Course Duration : </label> <span>{item.courseDuration + \" days\"}</span>\r\n                                        </div>\r\n                                        <div>\r\n                                            <label>Start Date : </label> <span>{(Constants.convertUserTimezoneDateTime(item.courseStartDateAndTime)).date}</span>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                                        <div>\r\n                                            <label>Session Duration : </label> <span>{item.sessionDuration}</span>\r\n                                        </div>\r\n                                        <div>\r\n                                            <label>Start Time : </label> <span>{Constants.formatTime((Constants.convertUserTimezoneDateTime(item.courseStartDateAndTime)).time)}</span>\r\n                                        </div>\r\n                                    </div>\r\n                                    <label>Course Content : </label>\r\n                                    <span>\r\n                                        <button\r\n                                            onClick={() => handleOpenCourseContent(item.courseContent, item.trainingId)}\r\n                                            style={{\r\n                                                border: 'none',\r\n                                                background: 'none',\r\n                                                padding: '0',\r\n                                                color: '#1b4962',\r\n                                                textDecoration: 'underline',\r\n                                                cursor: 'pointer',\r\n                                            }}\r\n                                        >\r\n                                            Open Course Content\r\n                                        </button>\r\n                                    </span> <br />\r\n                                    <label>Intro Video : </label>\r\n                                    <span>\r\n                                        <button\r\n                                            onClick={() => handleOpenIntroVideo(item.introVideo, item.trainingId)}\r\n                                            style={{\r\n                                                border: 'none',\r\n                                                background: 'none',\r\n                                                padding: '0',\r\n                                                color: '#1b4962',\r\n                                                textDecoration: 'underline',\r\n                                                cursor: 'pointer',\r\n                                            }}\r\n                                        >\r\n                                            Play Intro Video\r\n                                        </button>\r\n                                    </span>\r\n                                </div>\r\n                                <div>\r\n                                    {fileClicked === item.trainingId && (\r\n                                        <div style={customCssForMsg}>\r\n                                            <label>{openFilesErr}</label>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </Card.Text>\r\n                        </Card.Body>\r\n                        <Card.Footer>\r\n                            <div>\r\n                                <label>Status : </label> <span><strong>{item.adminStatus}</strong></span> <br />\r\n                                <label>Reason : </label> <span><strong>{item.description}</strong></span>\r\n                            </div>\r\n                        </Card.Footer>\r\n                    </Card>\r\n                ))}\r\n                <div>\r\n                    {errMsgDiv &&\r\n                        <div style={customCssForMsg}>\r\n                            <label>{errMsg}</label>\r\n                        </div>}\r\n                </div>\r\n            </div>\r\n            {showIntroVideoModal && (\r\n                <Modal className='intro-video-modal' size='md' show={showIntroVideoModal} onHide={handleIntroVideoModalClose} centered backdrop=\"static\">\r\n                    <Container className='px-5'>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title style={{ fontSize: '18px' }}>\r\n                                Intro Video\r\n                            </Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <div className=\"row\">\r\n                                <div className=\"col\">\r\n                                    {introVideoUrl && (\r\n                                        <div className=\"intro-video-container\">\r\n                                            <div style={{ maxWidth: '100%', height: 'auto', position: 'relative', overflow: 'hidden', paddingTop: '56.25%' }}>\r\n                                                <video src={introVideoUrl} style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }} controls autoPlay muted />\r\n                                            </div>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </Modal.Body>\r\n                    </Container>\r\n                </Modal>\r\n            )}\r\n            {showUpdateTrainingModal && (\r\n                <Modal className='update-training-modal' size='lg' show={showUpdateTrainingModal} onHide={handleUpdateTrainingModalClose} centered backdrop=\"static\">\r\n                    <Container>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title>Update Training</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <div className=\"update-training\" style={{ fontSize: '14px' }}>\r\n                                <div className=\"training-form\">\r\n                                    <form>\r\n                                        <div className='course'>\r\n                                            <label>Selected Course</label>\r\n                                            <Select\r\n                                                getOptionLabel={(options) => {\r\n                                                    return options[\"courseName\"];\r\n                                                }}\r\n                                                getOptionValue={(options) => {\r\n                                                    return options[\"courseName\"];\r\n                                                }}\r\n                                                value={defaultCourse}\r\n                                                isDisabled={true}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='technology-multiselect mt-3'>\r\n                                            <label>Update Technical Stack</label>\r\n                                            <Multiselect\r\n                                                id='technology'\r\n                                                options={technologiesList}\r\n                                                // selectedValues={defaultTechnologyList}\r\n                                                onSelect={onSelectTechnology}\r\n                                                onRemove={onRemoveTechnology}\r\n                                                displayValue=\"technologyName\" //technologyName\r\n                                                placeholder=\"Your Technical Stack\"\r\n                                                avoidHighlightFirstOption={true}\r\n                                                style={{\r\n                                                    chips: {\r\n                                                        background: childColor,\r\n                                                    },\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='course-duration mt-3'>\r\n                                            <label>Course Duration <strong>(Number of days)</strong></label>\r\n                                            <input\r\n                                                type='number'\r\n                                                min={30}\r\n                                                max={120}\r\n                                                className='form-control'\r\n                                                placeholder='Duration'\r\n                                                value={courseDuration}\r\n                                                onChange={handleCourseDurationChange}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='date-time mt-3'>\r\n                                            <label>Select Training Start Date and Time <strong>(You can select after 3 days to current date)</strong></label>\r\n                                            <Datetime\r\n                                                value={courseStartDateAndTime}\r\n                                                onChange={handleCourseStartDateChange}\r\n                                                isValidDate={isValidDate}\r\n                                                inputProps={{ \r\n                                                    placeholder: 'Select Date and Time',\r\n                                                    readOnly: true,\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"course-content-file mt-3\">\r\n                                            <label>Upload Course Content <strong>(max size is 5MB)</strong></label>\r\n                                            <input\r\n                                                type=\"file\"\r\n                                                className=\"form-control\"\r\n                                                id=\"courseContentFile\"\r\n                                                accept=\".pdf,.doc,.docx\"\r\n                                                onChange={handleCourseContentFile}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='intro-video-file mt-3'>\r\n                                            <label>Upload Your Intro Video <strong>(1 minute) (max size is 5MB)</strong></label>\r\n                                            <input\r\n                                                type=\"file\"\r\n                                                className=\"form-control\"\r\n                                                id=\"introVideoFile\"\r\n                                                accept=\"video/*\"\r\n                                                onChange={handleIntroVideoFile}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='mt-2'>\r\n                                            {updateTraingErrMsgDiv &&\r\n                                                <div style={customCssForMsg}>\r\n                                                    <label>{updateTraingErrMsg}</label>\r\n                                                </div>}\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            <div className='update-training-button'>\r\n                                <Button\r\n                                    className='dashboard-button'\r\n                                    onClick={handleUpdateTraining}\r\n                                >\r\n                                    Update\r\n                                </Button>\r\n                            </div>\r\n                        </Modal.Footer>\r\n                    </Container>\r\n                </Modal>\r\n            )}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default TrainerRejectedTrainings;\r\n\r\n\r\n/**==================================================================================================== */\r\n\r\n/**\r\n * import { useEffect, useState } from 'react';\r\nimport './TrainerRejectedTrainings.css';\r\nimport TrainerService from '../../../../../../Services/exponent_service/TrainerService';\r\nimport { Button, Card, Container, Modal } from 'react-bootstrap';\r\nimport GlobalService from '../../../../../../Services/global_service/GlobalService';\r\nimport Constants from '../../../../../Constants';\r\nimport Select from 'react-select';\r\nimport Multiselect from 'multiselect-react-dropdown';\r\nimport Datetime from 'react-datetime';\r\nimport \"react-datetime/css/react-datetime.css\";\r\nimport LoadingBar from '../../../../../loading_bar_component/LoadingBar';\r\n\r\nfunction TrainerRejectedTrainings() {\r\n\r\n    const [loadingBar, setLoadingBar] = useState(false);\r\n\r\n    const [rejectedTrainings, setRejectedTrainings] = useState([]);\r\n    const userId = localStorage.getItem(\"breezeUserId\");\r\n    const getRejectedTrainingByExponentId = async () => {\r\n        setLoadingBar(true);\r\n        const request = {\r\n            exponentId: userId,\r\n        }\r\n        try {\r\n            const responseData = await TrainerService.getRejectedTrainingByExponentId(request);\r\n            console.log(responseData);\r\n            if (responseData.length === 0) {\r\n                rejectedTrainingsDisplayErrMsg('Rejected Trainings are not Available');\r\n            } else {\r\n                setRejectedTrainings(responseData);\r\n            }\r\n        } catch (error) {\r\n            console.log(error.message);\r\n            handleTrainerRejectedTrainingsErrors(error.message);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        getRejectedTrainingByExponentId();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const handleTrainerRejectedTrainingsErrors = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            rejectedTrainingsDisplayErrMsg(\"Trainer Id is invalid\");\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            rejectedTrainingsDisplayErrMsg(\"Sorry, Our service is down\");\r\n        else\r\n            rejectedTrainingsDisplayErrMsg(\"Could not process your request\");\r\n    }\r\n\r\n    //Fields for to display err msg div and label\r\n    const [messageColor, setMessageColor] = useState(Constants.MESSAGE_COLOR);\r\n    const [errMsgDiv, setErrMsgDiv] = useState(false);\r\n    const [errMsg, setErrMsg] = useState(\"\");\r\n    //JS for to display err msg\r\n    const rejectedTrainingsDisplayErrMsg = (errorMessage) => {\r\n        setErrMsg(errorMessage);\r\n        setErrMsgDiv(true);\r\n        // setTimeout(() => {\r\n        //     setErrMsg(\"\");\r\n        //     setErrMsgDiv(false);\r\n        // }, 3000);\r\n    }\r\n\r\n    const customCssForMsg = {\r\n        fontSize: 'medium',\r\n        fontWeight: '700',\r\n        color: messageColor,\r\n    }\r\n\r\n    const [courseContentUrl, setCourseContentUrl] = useState('');\r\n    useEffect(() => {\r\n        if (courseContentUrl) {\r\n            window.open(courseContentUrl, '_blank');\r\n        }\r\n    }, [courseContentUrl]);\r\n    const handleOpenCourseContent = async (path, trainingId) => {\r\n        setLoadingBar(true);\r\n        console.log(path);\r\n        try {\r\n            const courseContentRequest = {\r\n                courseContent: path,\r\n            }\r\n            const courseContentResponse = await GlobalService.getCourseContentByPath(courseContentRequest);\r\n            console.log(courseContentResponse);\r\n            const courseContentFile = new Blob([courseContentResponse.data], { type: courseContentResponse.headers['content-type'] });\r\n            const courseContentFileUrl = URL.createObjectURL(courseContentFile);\r\n            setCourseContentUrl(courseContentFileUrl);\r\n        } catch (error) {\r\n            console.error('Error fetching data for path:', path, error);\r\n            handleCourseContentErrors(error.message, trainingId);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    };\r\n    const handleCourseContentErrors = (errorStatus, trainingId) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            handleOpenFilesErrMsg(\"Course Content Path is invalid\", trainingId);\r\n        else if (Constants.FILES_NOT_FOUND === errorStatus)\r\n            handleOpenFilesErrMsg(\"File Not Found\", trainingId);\r\n        else\r\n            handleOpenFilesErrMsg(\"Could not process your request\", trainingId);\r\n    }\r\n\r\n    const [showIntroVideoModal, setShowIntroVideoModal] = useState(false);\r\n    const handleIntroVideoModalClose = () => {\r\n        setShowIntroVideoModal(false);\r\n        setIntroVideoUrl('');\r\n    };\r\n    const [introVideoUrl, setIntroVideoUrl] = useState('');\r\n    useEffect(() => {\r\n        if (introVideoUrl) {\r\n            setShowIntroVideoModal(true);\r\n        }\r\n    }, [introVideoUrl]);\r\n    const handleOpenIntroVideo = async (path, trainingId) => {\r\n        setLoadingBar(true);\r\n        console.log(path);\r\n        try {\r\n            const introVideoRequest = {\r\n                introVideo: path,\r\n            }\r\n            const introVideoResponse = await GlobalService.getIntroVideoByPath(introVideoRequest);\r\n            console.log(introVideoResponse);\r\n            const introVideoFileUrl = URL.createObjectURL(introVideoResponse.data);\r\n            setIntroVideoUrl(introVideoFileUrl);\r\n        } catch (error) {\r\n            console.error('Error fetching data for path:', path, error);\r\n            handleIntroVideoErrors(error.message, trainingId);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    };\r\n    const handleIntroVideoErrors = (errorStatus, trainingId) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            handleOpenFilesErrMsg(\"Intro Video Path is invalid\", trainingId);\r\n        else if (Constants.FILES_NOT_FOUND === errorStatus)\r\n            handleOpenFilesErrMsg(\"File Not Found\", trainingId);\r\n        else\r\n            handleOpenFilesErrMsg(\"Could not process your request\", trainingId);\r\n    }\r\n\r\n    const [fileClicked, setFileClicked] = useState(0);\r\n    const [openFilesErr, setOpenFilesErr] = useState('');\r\n    const handleOpenFilesErrMsg = (errorMessage, trainingId) => {\r\n        setOpenFilesErr(errorMessage);\r\n        setFileClicked(trainingId);\r\n        setTimeout(() => {\r\n            setOpenFilesErr('');\r\n            setFileClicked(0);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n\r\n    //update button clicked code\r\n    const childColor = getComputedStyle(document.documentElement).getPropertyValue('--child-color');\r\n\r\n    const [showUpdateTrainingModal, setShowUpdateTrainingModal] = useState(false);\r\n    const handleUpdateTrainingModalClose = () => {\r\n        setShowUpdateTrainingModal(false);\r\n        setTrainingId(0);\r\n        setTechnologies([]);\r\n        setCourseContent(null);\r\n        setIntroVideo(null);\r\n        setTechnologiesList([]);\r\n        setDefaultCourse([]);\r\n        setDefaultTechnologyList([]);\r\n        setCourseDuration(0);\r\n        setCourseStartDateAndTime(null);\r\n    }\r\n    // course code\r\n    const [defaultCourse, setDefaultCourse] = useState([]);\r\n    // technology code\r\n    const [trainingId, setTrainingId] = useState(0);\r\n    const [technologies, setTechnologies] = useState([]);\r\n    const [technologiesList, setTechnologiesList] = useState([]);\r\n    const [defaultTechnologyList, setDefaultTechnologyList] = useState([]);\r\n    const onSelectTechnology = (selectedList, selectedItem) => {\r\n        console.log(selectedList);\r\n        setTechnologies([...selectedList]);\r\n        console.log(technologies);\r\n    }\r\n    const onRemoveTechnology = (selectedList, removedItem) => {\r\n        setTechnologies([...selectedList]);\r\n        console.log(technologies);\r\n    }\r\n    // corse duration\r\n    const [courseDuration, setCourseDuration] = useState(0);\r\n    const handleCourseDurationChange = (event) => {\r\n        setCourseDuration(event.target.value);\r\n    }\r\n\r\n    // date and time\r\n    const [courseStartDateAndTime, setCourseStartDateAndTime] = useState(null);\r\n    const minDate = new Date();\r\n    minDate.setDate(minDate.getDate() + 3);\r\n    const maxDate = new Date();\r\n    maxDate.setDate(maxDate.getDate() + 17);\r\n    const isValidDate = (current) => {\r\n        return current.isAfter(minDate) && current.isBefore(maxDate);\r\n    };\r\n    const handleCourseStartDateChange = (date) => {\r\n        setCourseStartDateAndTime(date);\r\n    };\r\n    // updated course content and intro video file\r\n    const [courseContent, setCourseContent] = useState(null);\r\n    const handleCourseContentFile = (event) => {\r\n        const file = event.target.files[0];\r\n        if (file && (file.type === 'application/pdf' || file.type === 'application/msword' || file.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document')) {\r\n            setCourseContent(file);\r\n        } else {\r\n            alert('Please select a PDF or Word document');\r\n            event.target.value = ''; // Clear the file input\r\n            setCourseContent(null);\r\n        }\r\n    };\r\n    const [introVideo, setIntroVideo] = useState(null);\r\n    const handleIntroVideoFile = (event) => {\r\n        const file = event.target.files[0];\r\n        if (file && file.type.startsWith('video/')) {\r\n            setIntroVideo(file);\r\n        } else {\r\n            alert('Please select a video file');\r\n            event.target.value = ''; // Clear the file input\r\n            setIntroVideo(null);\r\n        }\r\n    };\r\n    // update button onclick\r\n    const handleUpdateTrainingBtnClick = async (training) => {\r\n        setLoadingBar(true);\r\n        setTrainingId(training.trainingId);\r\n        setDefaultCourse({ courseName: training.courseName });\r\n        setDefaultTechnologyList(training.technologyList);\r\n        setTechnologies(training.technologyList);\r\n\r\n        const techStackRequest = {\r\n            userId: training.exponentId,\r\n        }\r\n\r\n        try {\r\n            const responseData = await GlobalService.getTechStackByExponentId(techStackRequest);\r\n            console.log(responseData);\r\n            const jsonResponseData = responseData.map((item, index) => {\r\n                return { technologyName: item }\r\n            });\r\n            console.log(jsonResponseData);\r\n            setTechnologiesList(jsonResponseData);\r\n            if (technologiesList) {\r\n                setCourseDuration(training.courseDuration);\r\n                setShowUpdateTrainingModal(true);\r\n            }\r\n        } catch (error) {\r\n            console.log(error.message);\r\n            handleTechnicalStackErrors(error.message, training.trainingId);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n        console.log(training.technologyList);\r\n    }\r\n    const handleTechnicalStackErrors = (errorStatus, trainingId) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            handleOpenFilesErrMsg(\"Trainer Id is invalid\", trainingId);\r\n        else if (Constants.ENTITY_NOT_FOUND === errorStatus)\r\n            handleOpenFilesErrMsg(\"Entity Not Found\", trainingId);\r\n        else\r\n            handleOpenFilesErrMsg(\"Could not process your request\", trainingId);\r\n    }\r\n\r\n    const handleUpdateTraining = async () => {\r\n        console.log(trainingId);\r\n        console.log(technologies);\r\n        console.log(technologies.map(tech => tech.technologyName));\r\n        console.log(courseDuration);\r\n        console.log(courseStartDateAndTime);\r\n\r\n        if (technologies === null || technologies.length === 0) { // need to set default technologyList to technologies\r\n            updateTrainingDisplayErrMsg('Please select technologies to train from your technical stack');\r\n        } else if (courseDuration > 120 || courseDuration < 30) {\r\n            updateTrainingDisplayErrMsg('Please give course duration between 30 to 120 (in days)');\r\n        } else if (courseStartDateAndTime === null) {\r\n            updateTrainingDisplayErrMsg('Please select start date and time');\r\n        } else if (!courseContent) {\r\n            updateTrainingDisplayErrMsg('Please upload course content');\r\n        } else if (!introVideo) {\r\n            updateTrainingDisplayErrMsg('Please upload your 1 minute intro video');\r\n        } else if (courseContent.size > 5 * 1024 * 1024) { \r\n            updateTrainingDisplayErrMsg('Course content file size exceeds the maximum limit of 5MB');\r\n        } else if (introVideo.size > 5 * 1024 * 1024) { \r\n            updateTrainingDisplayErrMsg('Intro video file size exceeds the maximum limit of 5MB');\r\n        } else {\r\n            setLoadingBar(true);\r\n            // Update FormData object \r\n            const formData = new FormData();\r\n            formData.append('trainingId', trainingId);\r\n            formData.append('technologyList', (technologies.map(tech => tech.technologyName)));\r\n            formData.append('courseContentFile', courseContent);\r\n            formData.append('introVideoFile', introVideo);\r\n            formData.append('courseDuration', courseDuration);\r\n            formData.append('courseStartDateAndTime', courseStartDateAndTime);\r\n            formData.append('sessionDuration', Constants.SESSION_DURATION);\r\n            console.log(formData);\r\n            try {\r\n                const responseData = await TrainerService.updateTrainingByTrainingId(formData);\r\n                console.log(responseData);\r\n                updateTrainingDisplaySucMsg('Training Updated Successfully');\r\n            } catch (error) {\r\n                handleUpdateTrianingErrors(error.message);\r\n            } finally {\r\n                setLoadingBar(false);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const handleUpdateTrianingErrors = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            updateTrainingDisplayErrMsg(\"Trainer Id is invalid\", trainingId);\r\n        else if (Constants.ENTITY_NOT_FOUND === errorStatus)\r\n            updateTrainingDisplayErrMsg(\"Entity Not Found\", trainingId);\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            updateTrainingDisplayErrMsg(\"Sorry, Our service is down\");\r\n        else if (Constants.FILES_NOT_UPLOADED === errorStatus)\r\n            updateTrainingDisplayErrMsg(\"Files not uploaded, please try again\");\r\n        else\r\n            updateTrainingDisplayErrMsg(\"Could not process your request\", trainingId);\r\n    }\r\n\r\n    const [updateTraingErrMsgDiv, setUpdateTraingErrMsgDiv] = useState(false);\r\n    const [updateTraingErrMsg, setUpdateTraingErrMsg] = useState(\"\");\r\n    //JS for to display err msg\r\n    const updateTrainingDisplayErrMsg = (errorMessage) => {\r\n        setUpdateTraingErrMsg(errorMessage);\r\n        setUpdateTraingErrMsgDiv(true);\r\n        setTimeout(() => {\r\n            setUpdateTraingErrMsg(\"\");\r\n            setUpdateTraingErrMsgDiv(false);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n    const updateTrainingDisplaySucMsg = (errorMessage) => {\r\n        setMessageColor('green');\r\n        setUpdateTraingErrMsg(errorMessage);\r\n        setUpdateTraingErrMsgDiv(true);\r\n        setTimeout(() => {\r\n            setUpdateTraingErrMsg(\"\");\r\n            setUpdateTraingErrMsgDiv(false);\r\n            setMessageColor(Constants.MESSAGE_COLOR);\r\n            handleUpdateTrainingModalClose();\r\n            window.location.reload();\r\n        }, Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);\r\n    }\r\n\r\n    return (\r\n        <div className=\"trainer-rejected-trainings\" style={{ fontSize: '13px' }}>\r\n            { loadingBar && <LoadingBar /> }\r\n            <div className='mt-4' style={{ display: 'flex', flexWrap: 'wrap', maxHeight: '80vh', overflow: 'auto' }}>\r\n                {rejectedTrainings.map((item, index) => (\r\n                    <Card key={index} style={{ width: '22rem', margin: '0.5rem' }} className=\"card\">\r\n                        <Card.Body>\r\n                            <Card.Text>\r\n                                <div className='rejected-training'>\r\n                                    <div className='flex'>\r\n                                        <label style={{ textDecoration: 'underline', fontSize: '15px' }}>{item.courseName + ' Training'}</label>\r\n                                        <button\r\n                                            style={{ float: 'right' }}\r\n                                            className='update-button'\r\n                                            onClick={() => handleUpdateTrainingBtnClick(item)}\r\n                                        >\r\n                                            Update\r\n                                        </button>\r\n                                    </div>\r\n                                    <label>Course : </label> <span>{item.courseName}</span> <br />\r\n                                    <label>Technical-Stack : </label> <span>{item.technologyList.map(tech => tech.technologyName).join(', ')}</span> <br />\r\n                                    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                                        <div>\r\n                                            <label>Course Duration : </label> <span>{item.courseDuration + \" days\"}</span>\r\n                                        </div>\r\n                                        <div>\r\n                                            <label>Start Date : </label> <span>{(Constants.convertUserTimezoneDateTime(item.courseStartDateAndTime)).date}</span>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                                        <div>\r\n                                            <label>Session Duration : </label> <span>{item.sessionDuration}</span>\r\n                                        </div>\r\n                                        <div>\r\n                                            <label>Start Time : </label> <span>{Constants.formatTime((Constants.convertUserTimezoneDateTime(item.courseStartDateAndTime)).time)}</span>\r\n                                        </div>\r\n                                    </div>\r\n                                    <label>Course Content : </label>\r\n                                    <span>\r\n                                        <button\r\n                                            onClick={() => handleOpenCourseContent(item.courseContent, item.trainingId)}\r\n                                            style={{\r\n                                                border: 'none',\r\n                                                background: 'none',\r\n                                                padding: '0',\r\n                                                color: '#1b4962',\r\n                                                textDecoration: 'underline',\r\n                                                cursor: 'pointer',\r\n                                            }}\r\n                                        >\r\n                                            Open Course Content\r\n                                        </button>\r\n                                    </span> <br />\r\n                                    <label>Intro Video : </label>\r\n                                    <span>\r\n                                        <button\r\n                                            onClick={() => handleOpenIntroVideo(item.introVideo, item.trainingId)}\r\n                                            style={{\r\n                                                border: 'none',\r\n                                                background: 'none',\r\n                                                padding: '0',\r\n                                                color: '#1b4962',\r\n                                                textDecoration: 'underline',\r\n                                                cursor: 'pointer',\r\n                                            }}\r\n                                        >\r\n                                            Play Intro Video\r\n                                        </button>\r\n                                    </span>\r\n                                </div>\r\n                                <div>\r\n                                    {fileClicked === item.trainingId && (\r\n                                        <div style={customCssForMsg}>\r\n                                            <label>{openFilesErr}</label>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </Card.Text>\r\n                        </Card.Body>\r\n                        <Card.Footer>\r\n                            <div>\r\n                                <label>Status : </label> <span><strong>{item.adminStatus}</strong></span> <br />\r\n                                <label>Reason : </label> <span><strong>{item.description}</strong></span>\r\n                            </div>\r\n                        </Card.Footer>\r\n                    </Card>\r\n                ))}\r\n                <div>\r\n                    {errMsgDiv &&\r\n                        <div style={customCssForMsg}>\r\n                            <label>{errMsg}</label>\r\n                        </div>}\r\n                </div>\r\n            </div>\r\n            {showIntroVideoModal && (\r\n                <Modal className='intro-video-modal' size='md' show={showIntroVideoModal} onHide={handleIntroVideoModalClose} centered backdrop=\"static\">\r\n                    <Container className='px-5'>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title style={{ fontSize: '18px' }}>\r\n                                Intro Video\r\n                            </Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <div className=\"row\">\r\n                                <div className=\"col\">\r\n                                    {introVideoUrl && (\r\n                                        <div className=\"intro-video-container\">\r\n                                            <div style={{ maxWidth: '100%', height: 'auto', position: 'relative', overflow: 'hidden', paddingTop: '56.25%' }}>\r\n                                                <video src={introVideoUrl} style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }} controls autoPlay muted />\r\n                                            </div>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </Modal.Body>\r\n                    </Container>\r\n                </Modal>\r\n            )}\r\n            {showUpdateTrainingModal && (\r\n                <Modal className='update-training-modal' size='lg' show={showUpdateTrainingModal} onHide={handleUpdateTrainingModalClose} centered backdrop=\"static\">\r\n                    <Container>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title>Update Training</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <div className=\"update-training\" style={{ fontSize: '14px' }}>\r\n                                <div className=\"training-form\">\r\n                                    <form>\r\n                                        <div className='course'>\r\n                                            <label>Selected Course</label>\r\n                                            <Select\r\n                                                getOptionLabel={(options) => {\r\n                                                    return options[\"courseName\"];\r\n                                                }}\r\n                                                getOptionValue={(options) => {\r\n                                                    return options[\"courseName\"];\r\n                                                }}\r\n                                                value={defaultCourse}\r\n                                                isDisabled={true}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='technology-multiselect mt-3'>\r\n                                            <label>Update Technical Stack</label>\r\n                                            <Multiselect\r\n                                                id='technology'\r\n                                                options={technologiesList}\r\n                                                selectedValues={defaultTechnologyList}\r\n                                                onSelect={onSelectTechnology}\r\n                                                onRemove={onRemoveTechnology}\r\n                                                displayValue=\"technologyName\" //technologyName\r\n                                                placeholder=\"Your Technical Stack\"\r\n                                                avoidHighlightFirstOption={true}\r\n                                                style={{\r\n                                                    chips: {\r\n                                                        background: childColor,\r\n                                                    },\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='course-duration mt-3'>\r\n                                            <label>Course Duration <strong>(Number of days)</strong></label>\r\n                                            <input\r\n                                                type='number'\r\n                                                min={30}\r\n                                                max={120}\r\n                                                className='form-control'\r\n                                                placeholder='Duration'\r\n                                                value={courseDuration}\r\n                                                onChange={handleCourseDurationChange}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='date-time mt-3'>\r\n                                            <label>Select Training Start Date and Time <strong>(You can select after 3 days to current date)</strong></label>\r\n                                            <Datetime\r\n                                                value={courseStartDateAndTime}\r\n                                                onChange={handleCourseStartDateChange}\r\n                                                isValidDate={isValidDate}\r\n                                                inputProps={{ \r\n                                                    placeholder: 'Select Date and Time',\r\n                                                    readOnly: true,\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"course-content-file mt-3\">\r\n                                            <label>Upload Course Content <strong>(max size is 5MB)</strong></label>\r\n                                            <input\r\n                                                type=\"file\"\r\n                                                className=\"form-control\"\r\n                                                id=\"courseContentFile\"\r\n                                                accept=\".pdf,.doc,.docx\"\r\n                                                onChange={handleCourseContentFile}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='intro-video-file mt-3'>\r\n                                            <label>Upload Your Intro Video <strong>(1 minute) (max size is 5MB)</strong></label>\r\n                                            <input\r\n                                                type=\"file\"\r\n                                                className=\"form-control\"\r\n                                                id=\"introVideoFile\"\r\n                                                accept=\"video/*\"\r\n                                                onChange={handleIntroVideoFile}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='mt-2'>\r\n                                            {updateTraingErrMsgDiv &&\r\n                                                <div style={customCssForMsg}>\r\n                                                    <label>{updateTraingErrMsg}</label>\r\n                                                </div>}\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            <div className='update-training-button'>\r\n                                <Button\r\n                                    className='dashboard-button'\r\n                                    onClick={handleUpdateTraining}\r\n                                >\r\n                                    Update\r\n                                </Button>\r\n                            </div>\r\n                        </Modal.Footer>\r\n                    </Container>\r\n                </Modal>\r\n            )}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default TrainerRejectedTrainings;\r\n */"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}