{"ast":null,"code":"import{useState}from'react';import'./CreateAdmin.css';import Constants from'../../../../Constants';import UserService from'../../../../../Services/user_service/UserService';import LoadingBar from'../../../../loading_bar_component/LoadingBar';import{Container,Modal}from'react-bootstrap';import{PhoneInput}from'react-international-phone';import'react-international-phone/style.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function CreateAdmin(){const[loadingBar,setLoadingBar]=useState(false);const[adminForm,setAdminForm]=useState({userFirstname:'',userLastname:'',username:'',password:'',confirmPassword:'',userType:Constants.ADMIN,phoneNumber:'',countryCode:'',phoneNumberWithCountryCode:null,regionCode:''});const handleCreateAdminFormFields=e=>{const{name,value}=e.target;setAdminForm({...adminForm,[name]:value});};const onlyLettersRegex=/^[A-Za-z]+$/;const passwordPatternRegex=/^(?=.*[A-Z])(?=.*[!@#$%^&*])(?=.*\\d).{8,15}$/;// phone code\nconst[phone,setPhone]=useState('');const[countryCode,setCountryCode]=useState('');const[phoneWithCountryCode,setPhoneWithCountryCode]=useState(null);const[iso2,setIso2]=useState('');const handleContactInfo=(phone,country)=>{const countryCodeWithPlus='+'+country.country.dialCode;const phoneWithOutCountryCode=phone.replace(countryCodeWithPlus,'');setPhone(phoneWithOutCountryCode);// console.log(country);\n// console.log(phone.replace(countryCodeWithPlus, ''));\n// console.log(country.inputValue);\n// console.log(country.country.dialCode);\n// console.log(country.country.iso2); // region code\nsetPhoneWithCountryCode(country.inputValue);setCountryCode(country.country.dialCode);setIso2(country.country.iso2);};const handleCreateAdmin=async e=>{e.preventDefault();const matchConfirmPassword=adminForm.password===adminForm.confirmPassword;if(!onlyLettersRegex.test(adminForm.userFirstname)){createAdminDisplayErrMsg(\"First Name is not matching the pattern\");}else if(!onlyLettersRegex.test(adminForm.userLastname)){createAdminDisplayErrMsg(\"Last Name is not matching the pattern\");}else if(!adminForm.username.slice(-4).includes('.co')){createAdminDisplayErrMsg(\"Please provide valid mail address\");}else if(phone===null||phone===''||phone===undefined){createAdminDisplayErrMsg(\"please enter admin contact information\");}else if(!passwordPatternRegex.test(adminForm.password)){createAdminDisplayErrMsg(\"Password is not matching the pattern\");}else if(!matchConfirmPassword){createAdminDisplayErrMsg(\"Confirm Password not matching Password\");}else{setLoadingBar(true);adminForm.phoneNumber=phone;adminForm.countryCode=countryCode;adminForm.phoneNumberWithCountryCode=phoneWithCountryCode;adminForm.regionCode=iso2;console.log(adminForm);try{const responseData=await UserService.createAdmin(adminForm);console.log(responseData);verifyEmailForm.userId=responseData.userId;createAdminDisplaySucMsg('Admin Registered Successfully');}catch(error){handleCreateAdminError(error.message);}finally{setLoadingBar(false);}}};const handleCreateAdminError=errorStatus=>{if(Constants.INVALID_REQUEST_FIELD===errorStatus)createAdminDisplayErrMsg(\"Please enter valid inputs fields\");else if(Constants.EXISTING_USERNAME===errorStatus)createAdminDisplayErrMsg(\"Email-Id is already existed\");else if(Constants.ADDRESS_EXCEPTION===errorStatus)createAdminDisplayErrMsg(\"Please check, Email syntax\");else if(Constants.MESSAGING_EXCEPTION===errorStatus)createAdminDisplayErrMsg(\"Could not sent email, Please try again\");else if(Constants.INVALID_PHONE_NUMBER===errorStatus)createAdminDisplayErrMsg(\"Entered Phone Number is Invalid\");else if(Constants.OTP_NOT_SENT===errorStatus)createAdminDisplayErrMsg(\"Failed to send otp\");else if(Constants.BREEZE_DATABASE_EXCEPTION===errorStatus)createAdminDisplayErrMsg(\"Sorry, Our service is down\");else createAdminDisplayErrMsg(\"Could not process your request\");};const[showModal,setShowModal]=useState(false);const handleCloseModal=()=>{setShowModal(false);window.location.reload();};const[verifyEmailForm,setVerifyEmailForm]=useState({userId:'',emailOtp:''});const[otpForm,setOtpForm]=useState({contactOtp:'',emailOtp:''});const handleVerifyEmailFormData=e=>{const{name,value}=e.target;setOtpForm({...otpForm,[name]:value});};const verifyEmailSubmitForm=async e=>{e.preventDefault();setLoadingBar(true);verifyEmailForm.emailOtp=otpForm.emailOtp+otpForm.contactOtp;try{const responseData=await UserService.verifyAdmin(verifyEmailForm);console.log(responseData);createAdminDisplaySucMsgForEmailVerify(\"OTP Verified Successfully\");}catch(error){handleVerifyEmailError(error.message);}finally{setLoadingBar(false);}};const handleVerifyEmailError=errorStatus=>{if(Constants.INVALID_REQUEST_FIELD===errorStatus)createAdminDisplayErrMsgForEmailVerify(\"Please enter valid inputs fields\");else if(Constants.OTP_NOT_MATCHED_FOR_MAIL===errorStatus)createAdminDisplayErrMsgForEmailVerify(\"Please enter correct OTP for mail\");else if(Constants.OTP_NOT_MATCHED_FOR_CONTACT===errorStatus)createAdminDisplayErrMsgForEmailVerify(\"Please enter correct OTP for contact\");else if(Constants.OTP_NOT_MATCHED===errorStatus)createAdminDisplayErrMsgForEmailVerify(\"Please enter correct OTP\");else if(Constants.ENTITY_NOT_FOUND===errorStatus)createAdminDisplayErrMsgForEmailVerify(\"Your registration is not found\");else if(Constants.BREEZE_DATABASE_EXCEPTION===errorStatus)createAdminDisplayErrMsgForEmailVerify(\"Sorry, Our service is down\");else createAdminDisplayErrMsgForEmailVerify(\"Could not process your request\");};const[errMsgDiv,setErrMsgDiv]=useState(false);const[errMsg,setErrMsg]=useState(\"\");const[messageColor,setMessageColor]=useState(Constants.MESSAGE_COLOR);const createAdminDisplayErrMsg=errorMessage=>{setErrMsg(errorMessage);setErrMsgDiv(true);setTimeout(()=>{setErrMsg(\"\");setErrMsgDiv(false);},Constants.SET_TIME_OUT_FOR_ERROR_MSG);};const createAdminDisplaySucMsg=errorMessage=>{setErrMsg(errorMessage);setErrMsgDiv(true);setMessageColor('green');setTimeout(()=>{setErrMsg(\"\");setErrMsgDiv(false);setMessageColor(Constants.MESSAGE_COLOR);setShowModal(true);},Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);};const[errMsgDivForEmailVerify,setErrMsgDivForEmailVerify]=useState(false);const[errMsgForEmailVerify,setErrMsgForEmailVerify]=useState(\"\");const createAdminDisplayErrMsgForEmailVerify=errorMessage=>{setErrMsgForEmailVerify(errorMessage);setErrMsgDivForEmailVerify(true);setTimeout(()=>{setErrMsgForEmailVerify(\"\");setErrMsgDivForEmailVerify(false);},Constants.SET_TIME_OUT_FOR_ERROR_MSG);};const createAdminDisplaySucMsgForEmailVerify=errorMessage=>{setErrMsgForEmailVerify(errorMessage);setErrMsgDivForEmailVerify(true);setMessageColor('green');setTimeout(()=>{setErrMsgForEmailVerify(\"\");setErrMsgDivForEmailVerify(false);setMessageColor(Constants.MESSAGE_COLOR);handleCloseModal();},Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);};const customCssForMsg={fontSize:'medium',fontWeight:'700',color:messageColor};return/*#__PURE__*/_jsxs(\"div\",{className:\"create-admin\",children:[loadingBar&&/*#__PURE__*/_jsx(LoadingBar,{}),/*#__PURE__*/_jsx(\"div\",{className:\"admin-form\",children:/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleCreateAdmin,children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{children:\"First Name\"}),/*#__PURE__*/_jsx(\"input\",{className:\"form-control\",placeholder:\"First Name\",name:\"userFirstname\",onChange:handleCreateAdminFormFields,type:\"text\",required:true})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"mt-2\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Last Name\"}),/*#__PURE__*/_jsx(\"input\",{className:\"form-control\",placeholder:\"Last Name\",name:\"userLastname\",onChange:handleCreateAdminFormFields,type:\"text\",required:true})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"mt-2\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Mail Id\"}),/*#__PURE__*/_jsx(\"input\",{className:\"form-control\",placeholder:\"Mail Id\",name:\"username\",onChange:handleCreateAdminFormFields,type:\"email\",required:true})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"mt-2\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Contact Info\"}),/*#__PURE__*/_jsx(PhoneInput,{forceDialCode:true,onChange:handleContactInfo,inputStyle:{width:'100%'},required:true})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"mt-2\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Password\"}),/*#__PURE__*/_jsx(\"input\",{className:\"form-control\",placeholder:\"Password\",name:\"password\",onChange:handleCreateAdminFormFields,type:\"password\",required:true,pattern:\"^(?=.*[A-Z])(?=.*[!@#$%^&*])(?=.*\\\\d).{8,15}$\",title:\"Password should contain 1 uppercase, 1 digit, 1 Special Character, and length between 8-15.\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"mt-2\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Confirm Password\"}),/*#__PURE__*/_jsx(\"input\",{className:\"form-control\",placeholder:\"Confirm Password\",name:\"confirmPassword\",onChange:handleCreateAdminFormFields,type:\"password\",required:true})]}),errMsgDiv&&/*#__PURE__*/_jsx(\"div\",{style:customCssForMsg,children:/*#__PURE__*/_jsx(\"label\",{children:errMsg})}),/*#__PURE__*/_jsx(\"div\",{className:\"mt-2\",children:/*#__PURE__*/_jsx(\"button\",{className:\"dashboard-button\",type:\"submit\",children:\"Create\"})})]})}),showModal&&/*#__PURE__*/_jsx(Modal,{className:\"admin-email-verify-modal\",size:\"md\",show:showModal,onHide:handleCloseModal,centered:true,backdrop:\"static\",children:/*#__PURE__*/_jsxs(Container,{className:\"px-5\",children:[/*#__PURE__*/_jsx(Modal.Header,{closeButton:true,children:/*#__PURE__*/_jsx(Modal.Title,{style:{fontSize:'18px'},children:\"Verify Email & Contact Number\"})}),/*#__PURE__*/_jsx(Modal.Body,{children:/*#__PURE__*/_jsxs(\"form\",{onSubmit:verifyEmailSubmitForm,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"col-12\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Enter OTP sent to Admin Mail Id\"}),/*#__PURE__*/_jsx(\"input\",{className:\"form-control\",type:\"text\",name:\"emailOtp\"// value={verifyEmailForm.emailOtp}\n,onChange:handleVerifyEmailFormData,pattern:\"\\\\d{6}\",required:true})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"col-12 mt-2\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Enter OTP sent to Admin Contact Number\"}),/*#__PURE__*/_jsx(\"input\",{className:\"form-control\",type:\"text\",name:\"contactOtp\"// value={verifyEmailForm.emailOtp}\n,onChange:handleVerifyEmailFormData,pattern:\"\\\\d{6}\",required:true})]})]}),errMsgDivForEmailVerify&&/*#__PURE__*/_jsx(\"div\",{style:customCssForMsg,children:/*#__PURE__*/_jsx(\"label\",{children:errMsgForEmailVerify})}),/*#__PURE__*/_jsx(\"div\",{className:\"verify-button mt-2\",children:/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"dashboard-button px-3\",children:\"Verify\"})})]})})]})})]});}export default CreateAdmin;/** ============================================================================================= */ /**\r\n * import { useState } from 'react';\r\nimport './CreateAdmin.css';\r\nimport Constants from '../../../../Constants';\r\nimport UserService from '../../../../../Services/user_service/UserService';\r\nimport LoadingBar from '../../../../loading_bar_component/LoadingBar';\r\nimport { Container, Modal } from 'react-bootstrap';\r\n\r\nfunction CreateAdmin() {\r\n\r\n    const [loadingBar, setLoadingBar] = useState(false);\r\n\r\n    const [adminForm, setAdminForm] = useState({\r\n        userFirstname: '',\r\n        userLastname: '',\r\n        username: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n        userType: Constants.ADMIN,\r\n    });\r\n\r\n    const handleCreateAdminFormFields = (e) => {\r\n        const { name, value } = e.target;\r\n        setAdminForm({\r\n            ...adminForm,\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    const onlyLettersRegex = /^[A-Za-z]+$/;\r\n    const passwordPatternRegex = /^(?=.*[A-Z])(?=.*[!@#$%^&*])(?=.*\\d).{8,15}$/;\r\n\r\n    const handleCreateAdmin = async (e) => {\r\n        e.preventDefault();\r\n        const matchConfirmPassword = adminForm.password === adminForm.confirmPassword;\r\n\r\n        if (!onlyLettersRegex.test(adminForm.userFirstname)) {\r\n            createAdminDisplayErrMsg(\"First Name is not matching the pattern\");\r\n        } else if (!onlyLettersRegex.test(adminForm.userLastname)) {\r\n            createAdminDisplayErrMsg(\"Last Name is not matching the pattern\");\r\n        } else if (!((adminForm.username).slice(-4)).includes('.co')) {\r\n            createAdminDisplayErrMsg(\"Please provide valid mail address\");\r\n        } else if (!passwordPatternRegex.test(adminForm.password)) {\r\n            createAdminDisplayErrMsg(\"Password is not matching the pattern\");\r\n        } else if (!matchConfirmPassword) {\r\n            createAdminDisplayErrMsg(\"Confirm Password not matching Password\");\r\n        } else {\r\n            setLoadingBar(true);\r\n            console.log(adminForm);\r\n            try {\r\n                const responseData = await UserService.registerUser(adminForm);\r\n                console.log(responseData);\r\n                verifyEmailForm.userId = responseData.userId;\r\n                createAdminDisplaySucMsg('Admin Registered Successfully');\r\n            } catch (error) {\r\n                handleCreateAdminError(error.message);\r\n            } finally {\r\n                setLoadingBar(false);\r\n            }\r\n        }\r\n    }\r\n    const handleCreateAdminError = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            createAdminDisplayErrMsg(\"Please enter valid inputs fields\");\r\n        else if (Constants.EXISTING_USERNAME === errorStatus)\r\n            createAdminDisplayErrMsg(\"Email-Id is already existed\");\r\n        else if (Constants.ADDRESS_EXCEPTION === errorStatus)\r\n            createAdminDisplayErrMsg(\"Please check, Email syntax\");\r\n        else if (Constants.MESSAGING_EXCEPTION === errorStatus)\r\n            createAdminDisplayErrMsg(\"Could not sent email, Please try again\");\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            createAdminDisplayErrMsg(\"Sorry, Our service is down\");\r\n        else\r\n            createAdminDisplayErrMsg(\"Could not process your request\");\r\n    }\r\n\r\n    const [showModal, setShowModal] = useState(false);\r\n    const handleCloseModal = () => {\r\n        setShowModal(false);\r\n        window.location.reload();\r\n    }\r\n\r\n    const [verifyEmailForm, setVerifyEmailForm] = useState({\r\n        userId: '',\r\n        emailOtp: ''\r\n    });\r\n    const handleVerifyEmailFormData = (e) => {\r\n        const { name, value } = e.target;\r\n        setVerifyEmailForm({\r\n            ...verifyEmailForm,\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    const verifyEmailSubmitForm = async (e) => {\r\n        e.preventDefault();\r\n        setLoadingBar(true);\r\n        try {\r\n            const responseData = await UserService.verifyEmail(verifyEmailForm);\r\n            console.log(responseData);\r\n            createAdminDisplaySucMsgForEmailVerify(\"OTP Verified Successfully\");\r\n        } catch (error) {\r\n            handleVerifyEmailError(error.message);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    }\r\n    const handleVerifyEmailError = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            createAdminDisplayErrMsgForEmailVerify(\"Please enter valid inputs fields\");\r\n        else if (Constants.OTP_NOT_MATCHED === errorStatus)\r\n            createAdminDisplayErrMsgForEmailVerify(\"Please enter correct OTP\");\r\n        else if (Constants.ENTITY_NOT_FOUND === errorStatus)\r\n            createAdminDisplayErrMsgForEmailVerify(\"Your registration is not found\");\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            createAdminDisplayErrMsgForEmailVerify(\"Sorry, Our service is down\");\r\n        else\r\n            createAdminDisplayErrMsgForEmailVerify(\"Could not process your request\");\r\n    }\r\n\r\n    const [errMsgDiv, setErrMsgDiv] = useState(false);\r\n    const [errMsg, setErrMsg] = useState(\"\");\r\n    const [messageColor, setMessageColor] = useState(Constants.MESSAGE_COLOR);\r\n    const createAdminDisplayErrMsg = (errorMessage) => {\r\n        setErrMsg(errorMessage);\r\n        setErrMsgDiv(true);\r\n        setTimeout(() => {\r\n            setErrMsg(\"\");\r\n            setErrMsgDiv(false);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n    const createAdminDisplaySucMsg = (errorMessage) => {\r\n        setErrMsg(errorMessage);\r\n        setErrMsgDiv(true);\r\n        setMessageColor('green');\r\n        setTimeout(() => {\r\n            setErrMsg(\"\");\r\n            setErrMsgDiv(false);\r\n            setMessageColor(Constants.MESSAGE_COLOR);\r\n            setShowModal(true);\r\n        }, Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);\r\n    }\r\n\r\n    const [errMsgDivForEmailVerify, setErrMsgDivForEmailVerify] = useState(false);\r\n    const [errMsgForEmailVerify, setErrMsgForEmailVerify] = useState(\"\");\r\n    const createAdminDisplayErrMsgForEmailVerify = (errorMessage) => {\r\n        setErrMsgForEmailVerify(errorMessage);\r\n        setErrMsgDivForEmailVerify(true);\r\n        setTimeout(() => {\r\n            setErrMsgForEmailVerify(\"\");\r\n            setErrMsgDivForEmailVerify(false);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n    const createAdminDisplaySucMsgForEmailVerify = (errorMessage) => {\r\n        setErrMsgForEmailVerify(errorMessage);\r\n        setErrMsgDivForEmailVerify(true);\r\n        setMessageColor('green');\r\n        setTimeout(() => {\r\n            setErrMsgForEmailVerify(\"\");\r\n            setErrMsgDivForEmailVerify(false);\r\n            setMessageColor(Constants.MESSAGE_COLOR);\r\n            handleCloseModal();\r\n        }, Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);\r\n    }\r\n\r\n    const customCssForMsg = {\r\n        fontSize: 'medium',\r\n        fontWeight: '700',\r\n        color: messageColor,\r\n    }\r\n\r\n    return (\r\n        <div className='create-admin'>\r\n            {loadingBar && <LoadingBar />}\r\n            <div className='admin-form'>\r\n                <form onSubmit={handleCreateAdmin}>\r\n                    <div>\r\n                        <label>First Name</label>\r\n                        <input\r\n                            className='form-control'\r\n                            placeholder='First Name'\r\n                            name='userFirstname'\r\n                            onChange={handleCreateAdminFormFields}\r\n                            type='text'\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div className='mt-2'>\r\n                        <label>Last Name</label>\r\n                        <input\r\n                            className='form-control'\r\n                            placeholder='Last Name'\r\n                            name='userLastname'\r\n                            onChange={handleCreateAdminFormFields}\r\n                            type='text'\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div className='mt-2'>\r\n                        <label>Mail Id</label>\r\n                        <input\r\n                            className='form-control'\r\n                            placeholder='Mail Id'\r\n                            name='username'\r\n                            onChange={handleCreateAdminFormFields}\r\n                            type='email'\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div className='mt-2'>\r\n                        <label>Password</label>\r\n                        <input\r\n                            className='form-control'\r\n                            placeholder='Password'\r\n                            name='password'\r\n                            onChange={handleCreateAdminFormFields}\r\n                            type='password'\r\n                            required\r\n                            pattern=\"^(?=.*[A-Z])(?=.*[!@#$%^&*])(?=.*\\d).{8,15}$\"\r\n                            title='Password should contain 1 uppercase, 1 digit, 1 Special Character, and length between 8-15.'\r\n                        />\r\n                    </div>\r\n                    <div className='mt-2'>\r\n                        <label>Confirm Password</label>\r\n                        <input\r\n                            className='form-control'\r\n                            placeholder='Confirm Password'\r\n                            name='confirmPassword'\r\n                            onChange={handleCreateAdminFormFields}\r\n                            type='password'\r\n                            required\r\n                        />\r\n                    </div>\r\n                    {errMsgDiv &&\r\n                        <div style={customCssForMsg}>\r\n                            <label>{errMsg}</label>\r\n                        </div>}\r\n                    <div className='mt-2'>\r\n                        <button\r\n                            className='dashboard-button'\r\n                            type='submit'\r\n                        >\r\n                            Create\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            {showModal && (\r\n                <Modal className='admin-email-verify-modal' size='md' show={showModal} onHide={handleCloseModal} centered backdrop=\"static\">\r\n                    <Container className='px-5'>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title style={{ fontSize: '18px' }}>\r\n                                Verify Email\r\n                            </Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <form onSubmit={verifyEmailSubmitForm}>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col\">\r\n                                        <label>Enter OTP sent to Admin Mail Id</label>\r\n                                        <input\r\n                                            className='form-control'\r\n                                            type=\"text\"\r\n                                            name=\"emailOtp\"\r\n                                            value={verifyEmailForm.emailOtp}\r\n                                            onChange={handleVerifyEmailFormData}\r\n                                            pattern=\"\\d{6}\"\r\n                                            required\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                {errMsgDivForEmailVerify &&\r\n                                    <div style={customCssForMsg}>\r\n                                        <label>{errMsgForEmailVerify}</label>\r\n                                    </div>}\r\n                                <div className=\"verify-button mt-2\">\r\n                                    <button type=\"submit\" className=\"dashboard-button px-3\">Verify</button>\r\n                                </div>\r\n                            </form>\r\n                        </Modal.Body>\r\n                    </Container>\r\n                </Modal>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreateAdmin; \r\n */","map":{"version":3,"names":["useState","Constants","UserService","LoadingBar","Container","Modal","PhoneInput","jsx","_jsx","jsxs","_jsxs","CreateAdmin","loadingBar","setLoadingBar","adminForm","setAdminForm","userFirstname","userLastname","username","password","confirmPassword","userType","ADMIN","phoneNumber","countryCode","phoneNumberWithCountryCode","regionCode","handleCreateAdminFormFields","e","name","value","target","onlyLettersRegex","passwordPatternRegex","phone","setPhone","setCountryCode","phoneWithCountryCode","setPhoneWithCountryCode","iso2","setIso2","handleContactInfo","country","countryCodeWithPlus","dialCode","phoneWithOutCountryCode","replace","inputValue","handleCreateAdmin","preventDefault","matchConfirmPassword","test","createAdminDisplayErrMsg","slice","includes","undefined","console","log","responseData","createAdmin","verifyEmailForm","userId","createAdminDisplaySucMsg","error","handleCreateAdminError","message","errorStatus","INVALID_REQUEST_FIELD","EXISTING_USERNAME","ADDRESS_EXCEPTION","MESSAGING_EXCEPTION","INVALID_PHONE_NUMBER","OTP_NOT_SENT","BREEZE_DATABASE_EXCEPTION","showModal","setShowModal","handleCloseModal","window","location","reload","setVerifyEmailForm","emailOtp","otpForm","setOtpForm","contactOtp","handleVerifyEmailFormData","verifyEmailSubmitForm","verifyAdmin","createAdminDisplaySucMsgForEmailVerify","handleVerifyEmailError","createAdminDisplayErrMsgForEmailVerify","OTP_NOT_MATCHED_FOR_MAIL","OTP_NOT_MATCHED_FOR_CONTACT","OTP_NOT_MATCHED","ENTITY_NOT_FOUND","errMsgDiv","setErrMsgDiv","errMsg","setErrMsg","messageColor","setMessageColor","MESSAGE_COLOR","errorMessage","setTimeout","SET_TIME_OUT_FOR_ERROR_MSG","SET_TIME_OUT_FOR_SUCCESS_MSG","errMsgDivForEmailVerify","setErrMsgDivForEmailVerify","errMsgForEmailVerify","setErrMsgForEmailVerify","customCssForMsg","fontSize","fontWeight","color","className","children","onSubmit","placeholder","onChange","type","required","forceDialCode","inputStyle","width","pattern","title","style","size","show","onHide","centered","backdrop","Header","closeButton","Title","Body"],"sources":["C:/Users/DELL/Documents/prepswisefinalprojects/breeze (15)-frontend/breeze/src/components/dashboard_component/feature_component/admin_feature_component/create_admin_component/CreateAdmin.js"],"sourcesContent":["import { useState } from 'react';\r\nimport './CreateAdmin.css';\r\nimport Constants from '../../../../Constants';\r\nimport UserService from '../../../../../Services/user_service/UserService';\r\nimport LoadingBar from '../../../../loading_bar_component/LoadingBar';\r\nimport { Container, Modal } from 'react-bootstrap';\r\nimport { PhoneInput } from 'react-international-phone';\r\nimport 'react-international-phone/style.css';\r\n\r\nfunction CreateAdmin() {\r\n\r\n    const [loadingBar, setLoadingBar] = useState(false);\r\n\r\n    const [adminForm, setAdminForm] = useState({\r\n        userFirstname: '',\r\n        userLastname: '',\r\n        username: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n        userType: Constants.ADMIN,\r\n        phoneNumber: '',\r\n        countryCode: '',\r\n        phoneNumberWithCountryCode: null,\r\n        regionCode: '',\r\n    });\r\n\r\n    const handleCreateAdminFormFields = (e) => {\r\n        const { name, value } = e.target;\r\n        setAdminForm({\r\n            ...adminForm,\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    const onlyLettersRegex = /^[A-Za-z]+$/;\r\n    const passwordPatternRegex = /^(?=.*[A-Z])(?=.*[!@#$%^&*])(?=.*\\d).{8,15}$/;\r\n\r\n    // phone code\r\n    const [phone, setPhone] = useState('');\r\n    const [countryCode, setCountryCode] = useState('');\r\n    const [phoneWithCountryCode, setPhoneWithCountryCode] = useState(null);\r\n    const [iso2, setIso2] = useState('');\r\n    const handleContactInfo = (phone, country) => {\r\n        const countryCodeWithPlus = '+' + country.country.dialCode;\r\n        const phoneWithOutCountryCode = phone.replace(countryCodeWithPlus, '');\r\n        setPhone(phoneWithOutCountryCode);\r\n        // console.log(country);\r\n        // console.log(phone.replace(countryCodeWithPlus, ''));\r\n        // console.log(country.inputValue);\r\n        // console.log(country.country.dialCode);\r\n        // console.log(country.country.iso2); // region code\r\n        setPhoneWithCountryCode(country.inputValue);\r\n        setCountryCode(country.country.dialCode);\r\n        setIso2(country.country.iso2);\r\n    }\r\n\r\n    const handleCreateAdmin = async (e) => {\r\n        e.preventDefault();\r\n        const matchConfirmPassword = adminForm.password === adminForm.confirmPassword;\r\n\r\n        if (!onlyLettersRegex.test(adminForm.userFirstname)) {\r\n            createAdminDisplayErrMsg(\"First Name is not matching the pattern\");\r\n        } else if (!onlyLettersRegex.test(adminForm.userLastname)) {\r\n            createAdminDisplayErrMsg(\"Last Name is not matching the pattern\");\r\n        } else if (!((adminForm.username).slice(-4)).includes('.co')) {\r\n            createAdminDisplayErrMsg(\"Please provide valid mail address\");\r\n        } else if (phone === null || phone === '' || phone === undefined) {\r\n            createAdminDisplayErrMsg(\"please enter admin contact information\");\r\n        } else if (!passwordPatternRegex.test(adminForm.password)) {\r\n            createAdminDisplayErrMsg(\"Password is not matching the pattern\");\r\n        } else if (!matchConfirmPassword) {\r\n            createAdminDisplayErrMsg(\"Confirm Password not matching Password\");\r\n        } else {\r\n            setLoadingBar(true);\r\n            adminForm.phoneNumber = phone;\r\n            adminForm.countryCode = countryCode;\r\n            adminForm.phoneNumberWithCountryCode = phoneWithCountryCode;\r\n            adminForm.regionCode = iso2;\r\n            console.log(adminForm);\r\n            try {\r\n                const responseData = await UserService.createAdmin(adminForm);\r\n                console.log(responseData);\r\n                verifyEmailForm.userId = responseData.userId;\r\n                createAdminDisplaySucMsg('Admin Registered Successfully');\r\n            } catch (error) {\r\n                handleCreateAdminError(error.message);\r\n            } finally {\r\n                setLoadingBar(false);\r\n            }\r\n        }\r\n    }\r\n    const handleCreateAdminError = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            createAdminDisplayErrMsg(\"Please enter valid inputs fields\");\r\n        else if (Constants.EXISTING_USERNAME === errorStatus)\r\n            createAdminDisplayErrMsg(\"Email-Id is already existed\");\r\n        else if (Constants.ADDRESS_EXCEPTION === errorStatus)\r\n            createAdminDisplayErrMsg(\"Please check, Email syntax\");\r\n        else if (Constants.MESSAGING_EXCEPTION === errorStatus)\r\n            createAdminDisplayErrMsg(\"Could not sent email, Please try again\");\r\n        else if (Constants.INVALID_PHONE_NUMBER === errorStatus)\r\n            createAdminDisplayErrMsg(\"Entered Phone Number is Invalid\");\r\n        else if (Constants.OTP_NOT_SENT === errorStatus)\r\n            createAdminDisplayErrMsg(\"Failed to send otp\");\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            createAdminDisplayErrMsg(\"Sorry, Our service is down\");\r\n        else\r\n            createAdminDisplayErrMsg(\"Could not process your request\");\r\n    }\r\n\r\n    const [showModal, setShowModal] = useState(false);\r\n    const handleCloseModal = () => {\r\n        setShowModal(false);\r\n        window.location.reload();\r\n    }\r\n\r\n    const [verifyEmailForm, setVerifyEmailForm] = useState({\r\n        userId: '',\r\n        emailOtp: ''\r\n    });\r\n    const [otpForm, setOtpForm] = useState({\r\n        contactOtp: '',\r\n        emailOtp: ''\r\n    });\r\n    const handleVerifyEmailFormData = (e) => {\r\n        const { name, value } = e.target;\r\n        setOtpForm({\r\n            ...otpForm,\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    const verifyEmailSubmitForm = async (e) => {\r\n        e.preventDefault();\r\n        setLoadingBar(true);\r\n        verifyEmailForm.emailOtp = otpForm.emailOtp + otpForm.contactOtp;\r\n        try {\r\n            const responseData = await UserService.verifyAdmin(verifyEmailForm);\r\n            console.log(responseData);\r\n            createAdminDisplaySucMsgForEmailVerify(\"OTP Verified Successfully\");\r\n        } catch (error) {\r\n            handleVerifyEmailError(error.message);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    }\r\n    const handleVerifyEmailError = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            createAdminDisplayErrMsgForEmailVerify(\"Please enter valid inputs fields\");\r\n        else if (Constants.OTP_NOT_MATCHED_FOR_MAIL === errorStatus)\r\n            createAdminDisplayErrMsgForEmailVerify(\"Please enter correct OTP for mail\");\r\n        else if (Constants.OTP_NOT_MATCHED_FOR_CONTACT === errorStatus)\r\n            createAdminDisplayErrMsgForEmailVerify(\"Please enter correct OTP for contact\");\r\n        else if (Constants.OTP_NOT_MATCHED === errorStatus)\r\n            createAdminDisplayErrMsgForEmailVerify(\"Please enter correct OTP\");\r\n        else if (Constants.ENTITY_NOT_FOUND === errorStatus)\r\n            createAdminDisplayErrMsgForEmailVerify(\"Your registration is not found\");\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            createAdminDisplayErrMsgForEmailVerify(\"Sorry, Our service is down\");\r\n        else\r\n            createAdminDisplayErrMsgForEmailVerify(\"Could not process your request\");\r\n    }\r\n\r\n    const [errMsgDiv, setErrMsgDiv] = useState(false);\r\n    const [errMsg, setErrMsg] = useState(\"\");\r\n    const [messageColor, setMessageColor] = useState(Constants.MESSAGE_COLOR);\r\n    const createAdminDisplayErrMsg = (errorMessage) => {\r\n        setErrMsg(errorMessage);\r\n        setErrMsgDiv(true);\r\n        setTimeout(() => {\r\n            setErrMsg(\"\");\r\n            setErrMsgDiv(false);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n    const createAdminDisplaySucMsg = (errorMessage) => {\r\n        setErrMsg(errorMessage);\r\n        setErrMsgDiv(true);\r\n        setMessageColor('green');\r\n        setTimeout(() => {\r\n            setErrMsg(\"\");\r\n            setErrMsgDiv(false);\r\n            setMessageColor(Constants.MESSAGE_COLOR);\r\n            setShowModal(true);\r\n        }, Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);\r\n    }\r\n\r\n    const [errMsgDivForEmailVerify, setErrMsgDivForEmailVerify] = useState(false);\r\n    const [errMsgForEmailVerify, setErrMsgForEmailVerify] = useState(\"\");\r\n    const createAdminDisplayErrMsgForEmailVerify = (errorMessage) => {\r\n        setErrMsgForEmailVerify(errorMessage);\r\n        setErrMsgDivForEmailVerify(true);\r\n        setTimeout(() => {\r\n            setErrMsgForEmailVerify(\"\");\r\n            setErrMsgDivForEmailVerify(false);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n    const createAdminDisplaySucMsgForEmailVerify = (errorMessage) => {\r\n        setErrMsgForEmailVerify(errorMessage);\r\n        setErrMsgDivForEmailVerify(true);\r\n        setMessageColor('green');\r\n        setTimeout(() => {\r\n            setErrMsgForEmailVerify(\"\");\r\n            setErrMsgDivForEmailVerify(false);\r\n            setMessageColor(Constants.MESSAGE_COLOR);\r\n            handleCloseModal();\r\n        }, Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);\r\n    }\r\n\r\n    const customCssForMsg = {\r\n        fontSize: 'medium',\r\n        fontWeight: '700',\r\n        color: messageColor,\r\n    }\r\n\r\n    return (\r\n        <div className='create-admin'>\r\n            {loadingBar && <LoadingBar />}\r\n            <div className='admin-form'>\r\n                <form onSubmit={handleCreateAdmin}>\r\n                    <div>\r\n                        <label>First Name</label>\r\n                        <input\r\n                            className='form-control'\r\n                            placeholder='First Name'\r\n                            name='userFirstname'\r\n                            onChange={handleCreateAdminFormFields}\r\n                            type='text'\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div className='mt-2'>\r\n                        <label>Last Name</label>\r\n                        <input\r\n                            className='form-control'\r\n                            placeholder='Last Name'\r\n                            name='userLastname'\r\n                            onChange={handleCreateAdminFormFields}\r\n                            type='text'\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div className='mt-2'>\r\n                        <label>Mail Id</label>\r\n                        <input\r\n                            className='form-control'\r\n                            placeholder='Mail Id'\r\n                            name='username'\r\n                            onChange={handleCreateAdminFormFields}\r\n                            type='email'\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div className='mt-2'>\r\n                        <label>Contact Info</label>\r\n                        <PhoneInput\r\n                            forceDialCode={true}\r\n                            onChange={handleContactInfo}\r\n                            inputStyle={{ width: '100%' }}\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div className='mt-2'>\r\n                        <label>Password</label>\r\n                        <input\r\n                            className='form-control'\r\n                            placeholder='Password'\r\n                            name='password'\r\n                            onChange={handleCreateAdminFormFields}\r\n                            type='password'\r\n                            required\r\n                            pattern=\"^(?=.*[A-Z])(?=.*[!@#$%^&*])(?=.*\\d).{8,15}$\"\r\n                            title='Password should contain 1 uppercase, 1 digit, 1 Special Character, and length between 8-15.'\r\n                        />\r\n                    </div>\r\n                    <div className='mt-2'>\r\n                        <label>Confirm Password</label>\r\n                        <input\r\n                            className='form-control'\r\n                            placeholder='Confirm Password'\r\n                            name='confirmPassword'\r\n                            onChange={handleCreateAdminFormFields}\r\n                            type='password'\r\n                            required\r\n                        />\r\n                    </div>\r\n                    {errMsgDiv &&\r\n                        <div style={customCssForMsg}>\r\n                            <label>{errMsg}</label>\r\n                        </div>}\r\n                    <div className='mt-2'>\r\n                        <button\r\n                            className='dashboard-button'\r\n                            type='submit'\r\n                        >\r\n                            Create\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            {showModal && (\r\n                <Modal className='admin-email-verify-modal' size='md' show={showModal} onHide={handleCloseModal} centered backdrop=\"static\">\r\n                    <Container className='px-5'>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title style={{ fontSize: '18px' }}>\r\n                                Verify Email & Contact Number\r\n                            </Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <form onSubmit={verifyEmailSubmitForm}>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-12\">\r\n                                        <label>Enter OTP sent to Admin Mail Id</label>\r\n                                        <input\r\n                                            className='form-control'\r\n                                            type=\"text\"\r\n                                            name=\"emailOtp\"\r\n                                            // value={verifyEmailForm.emailOtp}\r\n                                            onChange={handleVerifyEmailFormData}\r\n                                            pattern=\"\\d{6}\"\r\n                                            required\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"col-12 mt-2\">\r\n                                        <label>Enter OTP sent to Admin Contact Number</label>\r\n                                        <input\r\n                                            className='form-control'\r\n                                            type=\"text\"\r\n                                            name=\"contactOtp\"\r\n                                            // value={verifyEmailForm.emailOtp}\r\n                                            onChange={handleVerifyEmailFormData}\r\n                                            pattern=\"\\d{6}\"\r\n                                            required\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                {errMsgDivForEmailVerify &&\r\n                                    <div style={customCssForMsg}>\r\n                                        <label>{errMsgForEmailVerify}</label>\r\n                                    </div>}\r\n                                <div className=\"verify-button mt-2\">\r\n                                    <button type=\"submit\" className=\"dashboard-button px-3\">Verify</button>\r\n                                </div>\r\n                            </form>\r\n                        </Modal.Body>\r\n                    </Container>\r\n                </Modal>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreateAdmin;\r\n\r\n/** ============================================================================================= */\r\n\r\n/**\r\n * import { useState } from 'react';\r\nimport './CreateAdmin.css';\r\nimport Constants from '../../../../Constants';\r\nimport UserService from '../../../../../Services/user_service/UserService';\r\nimport LoadingBar from '../../../../loading_bar_component/LoadingBar';\r\nimport { Container, Modal } from 'react-bootstrap';\r\n\r\nfunction CreateAdmin() {\r\n\r\n    const [loadingBar, setLoadingBar] = useState(false);\r\n\r\n    const [adminForm, setAdminForm] = useState({\r\n        userFirstname: '',\r\n        userLastname: '',\r\n        username: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n        userType: Constants.ADMIN,\r\n    });\r\n\r\n    const handleCreateAdminFormFields = (e) => {\r\n        const { name, value } = e.target;\r\n        setAdminForm({\r\n            ...adminForm,\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    const onlyLettersRegex = /^[A-Za-z]+$/;\r\n    const passwordPatternRegex = /^(?=.*[A-Z])(?=.*[!@#$%^&*])(?=.*\\d).{8,15}$/;\r\n\r\n    const handleCreateAdmin = async (e) => {\r\n        e.preventDefault();\r\n        const matchConfirmPassword = adminForm.password === adminForm.confirmPassword;\r\n\r\n        if (!onlyLettersRegex.test(adminForm.userFirstname)) {\r\n            createAdminDisplayErrMsg(\"First Name is not matching the pattern\");\r\n        } else if (!onlyLettersRegex.test(adminForm.userLastname)) {\r\n            createAdminDisplayErrMsg(\"Last Name is not matching the pattern\");\r\n        } else if (!((adminForm.username).slice(-4)).includes('.co')) {\r\n            createAdminDisplayErrMsg(\"Please provide valid mail address\");\r\n        } else if (!passwordPatternRegex.test(adminForm.password)) {\r\n            createAdminDisplayErrMsg(\"Password is not matching the pattern\");\r\n        } else if (!matchConfirmPassword) {\r\n            createAdminDisplayErrMsg(\"Confirm Password not matching Password\");\r\n        } else {\r\n            setLoadingBar(true);\r\n            console.log(adminForm);\r\n            try {\r\n                const responseData = await UserService.registerUser(adminForm);\r\n                console.log(responseData);\r\n                verifyEmailForm.userId = responseData.userId;\r\n                createAdminDisplaySucMsg('Admin Registered Successfully');\r\n            } catch (error) {\r\n                handleCreateAdminError(error.message);\r\n            } finally {\r\n                setLoadingBar(false);\r\n            }\r\n        }\r\n    }\r\n    const handleCreateAdminError = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            createAdminDisplayErrMsg(\"Please enter valid inputs fields\");\r\n        else if (Constants.EXISTING_USERNAME === errorStatus)\r\n            createAdminDisplayErrMsg(\"Email-Id is already existed\");\r\n        else if (Constants.ADDRESS_EXCEPTION === errorStatus)\r\n            createAdminDisplayErrMsg(\"Please check, Email syntax\");\r\n        else if (Constants.MESSAGING_EXCEPTION === errorStatus)\r\n            createAdminDisplayErrMsg(\"Could not sent email, Please try again\");\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            createAdminDisplayErrMsg(\"Sorry, Our service is down\");\r\n        else\r\n            createAdminDisplayErrMsg(\"Could not process your request\");\r\n    }\r\n\r\n    const [showModal, setShowModal] = useState(false);\r\n    const handleCloseModal = () => {\r\n        setShowModal(false);\r\n        window.location.reload();\r\n    }\r\n\r\n    const [verifyEmailForm, setVerifyEmailForm] = useState({\r\n        userId: '',\r\n        emailOtp: ''\r\n    });\r\n    const handleVerifyEmailFormData = (e) => {\r\n        const { name, value } = e.target;\r\n        setVerifyEmailForm({\r\n            ...verifyEmailForm,\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    const verifyEmailSubmitForm = async (e) => {\r\n        e.preventDefault();\r\n        setLoadingBar(true);\r\n        try {\r\n            const responseData = await UserService.verifyEmail(verifyEmailForm);\r\n            console.log(responseData);\r\n            createAdminDisplaySucMsgForEmailVerify(\"OTP Verified Successfully\");\r\n        } catch (error) {\r\n            handleVerifyEmailError(error.message);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    }\r\n    const handleVerifyEmailError = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            createAdminDisplayErrMsgForEmailVerify(\"Please enter valid inputs fields\");\r\n        else if (Constants.OTP_NOT_MATCHED === errorStatus)\r\n            createAdminDisplayErrMsgForEmailVerify(\"Please enter correct OTP\");\r\n        else if (Constants.ENTITY_NOT_FOUND === errorStatus)\r\n            createAdminDisplayErrMsgForEmailVerify(\"Your registration is not found\");\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            createAdminDisplayErrMsgForEmailVerify(\"Sorry, Our service is down\");\r\n        else\r\n            createAdminDisplayErrMsgForEmailVerify(\"Could not process your request\");\r\n    }\r\n\r\n    const [errMsgDiv, setErrMsgDiv] = useState(false);\r\n    const [errMsg, setErrMsg] = useState(\"\");\r\n    const [messageColor, setMessageColor] = useState(Constants.MESSAGE_COLOR);\r\n    const createAdminDisplayErrMsg = (errorMessage) => {\r\n        setErrMsg(errorMessage);\r\n        setErrMsgDiv(true);\r\n        setTimeout(() => {\r\n            setErrMsg(\"\");\r\n            setErrMsgDiv(false);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n    const createAdminDisplaySucMsg = (errorMessage) => {\r\n        setErrMsg(errorMessage);\r\n        setErrMsgDiv(true);\r\n        setMessageColor('green');\r\n        setTimeout(() => {\r\n            setErrMsg(\"\");\r\n            setErrMsgDiv(false);\r\n            setMessageColor(Constants.MESSAGE_COLOR);\r\n            setShowModal(true);\r\n        }, Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);\r\n    }\r\n\r\n    const [errMsgDivForEmailVerify, setErrMsgDivForEmailVerify] = useState(false);\r\n    const [errMsgForEmailVerify, setErrMsgForEmailVerify] = useState(\"\");\r\n    const createAdminDisplayErrMsgForEmailVerify = (errorMessage) => {\r\n        setErrMsgForEmailVerify(errorMessage);\r\n        setErrMsgDivForEmailVerify(true);\r\n        setTimeout(() => {\r\n            setErrMsgForEmailVerify(\"\");\r\n            setErrMsgDivForEmailVerify(false);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n    const createAdminDisplaySucMsgForEmailVerify = (errorMessage) => {\r\n        setErrMsgForEmailVerify(errorMessage);\r\n        setErrMsgDivForEmailVerify(true);\r\n        setMessageColor('green');\r\n        setTimeout(() => {\r\n            setErrMsgForEmailVerify(\"\");\r\n            setErrMsgDivForEmailVerify(false);\r\n            setMessageColor(Constants.MESSAGE_COLOR);\r\n            handleCloseModal();\r\n        }, Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);\r\n    }\r\n\r\n    const customCssForMsg = {\r\n        fontSize: 'medium',\r\n        fontWeight: '700',\r\n        color: messageColor,\r\n    }\r\n\r\n    return (\r\n        <div className='create-admin'>\r\n            {loadingBar && <LoadingBar />}\r\n            <div className='admin-form'>\r\n                <form onSubmit={handleCreateAdmin}>\r\n                    <div>\r\n                        <label>First Name</label>\r\n                        <input\r\n                            className='form-control'\r\n                            placeholder='First Name'\r\n                            name='userFirstname'\r\n                            onChange={handleCreateAdminFormFields}\r\n                            type='text'\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div className='mt-2'>\r\n                        <label>Last Name</label>\r\n                        <input\r\n                            className='form-control'\r\n                            placeholder='Last Name'\r\n                            name='userLastname'\r\n                            onChange={handleCreateAdminFormFields}\r\n                            type='text'\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div className='mt-2'>\r\n                        <label>Mail Id</label>\r\n                        <input\r\n                            className='form-control'\r\n                            placeholder='Mail Id'\r\n                            name='username'\r\n                            onChange={handleCreateAdminFormFields}\r\n                            type='email'\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div className='mt-2'>\r\n                        <label>Password</label>\r\n                        <input\r\n                            className='form-control'\r\n                            placeholder='Password'\r\n                            name='password'\r\n                            onChange={handleCreateAdminFormFields}\r\n                            type='password'\r\n                            required\r\n                            pattern=\"^(?=.*[A-Z])(?=.*[!@#$%^&*])(?=.*\\d).{8,15}$\"\r\n                            title='Password should contain 1 uppercase, 1 digit, 1 Special Character, and length between 8-15.'\r\n                        />\r\n                    </div>\r\n                    <div className='mt-2'>\r\n                        <label>Confirm Password</label>\r\n                        <input\r\n                            className='form-control'\r\n                            placeholder='Confirm Password'\r\n                            name='confirmPassword'\r\n                            onChange={handleCreateAdminFormFields}\r\n                            type='password'\r\n                            required\r\n                        />\r\n                    </div>\r\n                    {errMsgDiv &&\r\n                        <div style={customCssForMsg}>\r\n                            <label>{errMsg}</label>\r\n                        </div>}\r\n                    <div className='mt-2'>\r\n                        <button\r\n                            className='dashboard-button'\r\n                            type='submit'\r\n                        >\r\n                            Create\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            {showModal && (\r\n                <Modal className='admin-email-verify-modal' size='md' show={showModal} onHide={handleCloseModal} centered backdrop=\"static\">\r\n                    <Container className='px-5'>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title style={{ fontSize: '18px' }}>\r\n                                Verify Email\r\n                            </Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <form onSubmit={verifyEmailSubmitForm}>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col\">\r\n                                        <label>Enter OTP sent to Admin Mail Id</label>\r\n                                        <input\r\n                                            className='form-control'\r\n                                            type=\"text\"\r\n                                            name=\"emailOtp\"\r\n                                            value={verifyEmailForm.emailOtp}\r\n                                            onChange={handleVerifyEmailFormData}\r\n                                            pattern=\"\\d{6}\"\r\n                                            required\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                {errMsgDivForEmailVerify &&\r\n                                    <div style={customCssForMsg}>\r\n                                        <label>{errMsgForEmailVerify}</label>\r\n                                    </div>}\r\n                                <div className=\"verify-button mt-2\">\r\n                                    <button type=\"submit\" className=\"dashboard-button px-3\">Verify</button>\r\n                                </div>\r\n                            </form>\r\n                        </Modal.Body>\r\n                    </Container>\r\n                </Modal>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreateAdmin; \r\n */"],"mappings":"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":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}