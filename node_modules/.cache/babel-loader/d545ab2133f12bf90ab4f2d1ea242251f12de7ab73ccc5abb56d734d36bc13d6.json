{"ast":null,"code":"import{useEffect,useState}from'react';import LoadingBar from'../../../../../loading_bar_component/LoadingBar';import'./ExponentApprovedInterviewSupport.css';import Constants from'../../../../../Constants';import InterviewSupporterService from'../../../../../../Services/exponent_service/InterviewSupporterService';import{Button,Card,Container,Modal}from'react-bootstrap';import GlobalService from'../../../../../../Services/global_service/GlobalService';import Multiselect from'multiselect-react-dropdown';import{FaRedo}from'react-icons/fa';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function ExponentApprovedInterviewSupport(){const[loadingBar,setLoadingBar]=useState(false);const[approvedInterviewSupport,setApprovedInterviewSupport]=useState(null);const userId=localStorage.getItem(\"breezeUserId\");const getApprovedInterviewSupportByExponentId=async()=>{setLoadingBar(true);const request={exponentId:userId};try{const responseData=await InterviewSupporterService.exponentApprovedInterviewSupport(request);console.log(responseData);setApprovedInterviewSupport(responseData);}catch(error){console.log(error.message);handleExponentApprovedInterviewSupportErrors(error.message);}finally{setLoadingBar(false);}};useEffect(()=>{getApprovedInterviewSupportByExponentId();// eslint-disable-next-line react-hooks/exhaustive-deps\n},[]);const handleExponentApprovedInterviewSupportErrors=errorStatus=>{if(Constants.INVALID_REQUEST_FIELD===errorStatus)approvedInterviewSupportDisplayErrMsg(\"Interview Supporter Id is invalid\");else if(Constants.ENTITY_NOT_FOUND===errorStatus)approvedInterviewSupportDisplayErrMsg(\"You Have No Approved Interview Support\");else if(Constants.BREEZE_DATABASE_EXCEPTION===errorStatus)approvedInterviewSupportDisplayErrMsg(\"Sorry, Our service is down\");else approvedInterviewSupportDisplayErrMsg(\"Could not process your request\");};//Fields for to display err msg div and label\nconst[messageColor,setMessageColor]=useState(Constants.MESSAGE_COLOR);const[errMsgDiv,setErrMsgDiv]=useState(false);const[errMsg,setErrMsg]=useState(\"\");//JS for to display err msg\nconst approvedInterviewSupportDisplayErrMsg=errorMessage=>{setErrMsg(errorMessage);setErrMsgDiv(true);// setTimeout(() => {\n//     setErrMsg(\"\");\n//     setErrMsgDiv(false);\n// }, 3000);\n};const[showUpdateApprovedInterviewSupportModal,setShowUpdateApprovedInterviewSupportModal]=useState(false);const handleUpdateApprovedInterviewSupportModalClose=()=>{setShowUpdateApprovedInterviewSupportModal(false);setTechnologies([]);setTechnologiesList([]);setTimeSlotList([]);setSelectedSlots([]);setDefaultTechnologyList([]);};// technology code\nconst[technologies,setTechnologies]=useState([]);const[technologiesList,setTechnologiesList]=useState([]);const[defaultTechnologyList,setDefaultTechnologyList]=useState([]);const onSelectTechnology=(selectedList,selectedItem)=>{setTechnologies([...selectedList]);console.log(technologies);};const onRemoveTechnology=(selectedList,removedItem)=>{setTechnologies([...selectedList]);console.log(technologies);};// time slot code\nconst[timeSlotList,setTimeSlotList]=useState([]);const[selectedSlots,setSelectedSlots]=useState([]);const handleTimeSlotClick=slot=>{if(selectedSlots.includes(slot)){setSelectedSlots(selectedSlots.filter(s=>s!==slot));}else{setSelectedSlots([...selectedSlots,slot]);}console.log(selectedSlots);};const handleTimeSlotReload=()=>{setSelectedSlots(timeSlotList.filter(slot=>slot.isBooked));};const handleUpdateApprovedInterviewSupport=()=>{const request={userId:userId};const getTechStackByExponentId=async()=>{setLoadingBar(true);try{const responseData=await GlobalService.getTechStackByExponentId(request);console.log(responseData);const jsonResponseData=responseData.map((item,index)=>{return{technologyName:item};});console.log(jsonResponseData);setDefaultTechnologyList(approvedInterviewSupport.technologyList);setTechnologies(approvedInterviewSupport.technologyList);setTechnologiesList(jsonResponseData);}catch(error){console.log(error.message);}finally{setLoadingBar(false);}};getTechStackByExponentId();const getAllTimeSlot=async()=>{setLoadingBar(true);try{const responseData=await GlobalService.getAllTimeSlot();console.log(responseData);const updatedResponseData=responseData.map(slot=>{const isBooked=approvedInterviewSupport.timeSlotList.some(approvedSlot=>approvedSlot.timeSlotId===slot.timeSlotId);return{...slot,isBooked:isBooked?true:slot.isBooked};});console.log(updatedResponseData);setSelectedSlots(updatedResponseData.filter(slot=>slot.isBooked));setTimeSlotList(updatedResponseData);}catch(error){console.log(error.message);}finally{setLoadingBar(false);}};getAllTimeSlot();setShowUpdateApprovedInterviewSupportModal(true);};const handleApprovedUpdateInterviewSupport=async()=>{console.log(technologies);console.log(selectedSlots);if(technologies===null||technologies.length===0){updateApprovedInterviewSupportDisplayErrMsg('Please select technical stack to give interview support from your technical stack');}else if(selectedSlots===null||selectedSlots.length===0){updateApprovedInterviewSupportDisplayErrMsg('Please select Your Available Time Slots');}else{setLoadingBar(true);const request={interviewSupportId:approvedInterviewSupport.interviewSupportId,technologyList:technologies,timeSlotList:selectedSlots};try{const responseData=await InterviewSupporterService.updateApprovedInterviewSupport(request);console.log(responseData);updateApprovedInterviewSupportDisplaySucMsg('Interview Support Updated Successfully, Our backend team will verify shortly...');}catch(error){handleUpdateApprovedInterviewSupportErrors(error.message);}finally{setLoadingBar(false);}}};const handleUpdateApprovedInterviewSupportErrors=errorStatus=>{if(Constants.INVALID_REQUEST_FIELD===errorStatus)updateApprovedInterviewSupportDisplayErrMsg(\"Inputs are invalid\");else if(Constants.EXISTING_BOOKINGS===errorStatus)updateApprovedInterviewSupportDisplayErrMsg(\"Your Interview Support having bookings, you can't update now\");else if(Constants.ENTITY_NOT_FOUND===errorStatus)updateApprovedInterviewSupportDisplayErrMsg(\"Your Interview Support is not found\");else if(Constants.BREEZE_DATABASE_EXCEPTION===errorStatus)updateApprovedInterviewSupportDisplayErrMsg(\"Sorry, Our service is down\");else updateApprovedInterviewSupportDisplayErrMsg(\"Could not process your request\");};const[updateApprovedInterviewSupportErrMsgDiv,setUpdateApprovedInterviewSupportErrMsgDiv]=useState(false);const[updateApprovedInterviewSupportErrMsg,setUpdateApprovedInterviewSupportErrMsg]=useState(\"\");//JS for to display err msg\nconst updateApprovedInterviewSupportDisplayErrMsg=errorMessage=>{setUpdateApprovedInterviewSupportErrMsg(errorMessage);setUpdateApprovedInterviewSupportErrMsgDiv(true);setTimeout(()=>{setUpdateApprovedInterviewSupportErrMsg(\"\");setUpdateApprovedInterviewSupportErrMsgDiv(false);},Constants.SET_TIME_OUT_FOR_ERROR_MSG);};const updateApprovedInterviewSupportDisplaySucMsg=errorMessage=>{setMessageColor('green');setUpdateApprovedInterviewSupportErrMsg(errorMessage);setUpdateApprovedInterviewSupportErrMsgDiv(true);setTimeout(()=>{setUpdateApprovedInterviewSupportErrMsg(\"\");setUpdateApprovedInterviewSupportErrMsgDiv(false);setMessageColor(Constants.MESSAGE_COLOR);handleUpdateApprovedInterviewSupportModalClose();window.location.reload();},Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);};const childColor=getComputedStyle(document.documentElement).getPropertyValue('--child-color');const customCssForMsg={fontSize:'medium',fontWeight:'700',color:messageColor};return/*#__PURE__*/_jsxs(\"div\",{className:\"exponent-approved-interview-support\",children:[loadingBar&&/*#__PURE__*/_jsx(LoadingBar,{}),approvedInterviewSupport&&/*#__PURE__*/_jsx(\"div\",{className:\"approved-interview-support\",children:/*#__PURE__*/_jsxs(Card,{className:\"card\",children:[/*#__PURE__*/_jsx(Card.Body,{children:/*#__PURE__*/_jsx(Card.Text,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"approved-interview-support-data\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{style:{textDecoration:'underline',fontSize:'15px'},children:'Your Interview Support'}),/*#__PURE__*/_jsx(\"button\",{style:{float:'right'},className:\"update-button\",onClick:()=>handleUpdateApprovedInterviewSupport(),children:\"Update\"})]}),/*#__PURE__*/_jsx(\"label\",{children:\"Technical-Stack : \"}),\" \",/*#__PURE__*/_jsx(\"span\",{children:approvedInterviewSupport.technologyList.map(tech=>tech.technologyName).join(', ')}),\" \",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"div\",{className:\"time-slots\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Available Slots : \"}),/*#__PURE__*/_jsx(\"div\",{className:\"time-slot-container\",children:approvedInterviewSupport.timeSlotList.map((item,index)=>/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"time-slot-button\",children:Constants.formatTime(Constants.convertUserTimezoneTime(item.slotStartTime))+' - '+Constants.formatTime(Constants.convertUserTimezoneTime(item.slotEndTime))},index))})]})]})})}),approvedInterviewSupport.updateStatus&&/*#__PURE__*/_jsx(Card.Footer,{children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Updated Status : \"}),\" \",/*#__PURE__*/_jsx(\"span\",{children:approvedInterviewSupport.updateStatus}),/*#__PURE__*/_jsx(\"br\",{}),approvedInterviewSupport.updateStatus===Constants.HOLD&&/*#__PURE__*/_jsxs(\"label\",{style:{fontSize:'13px'},children:[/*#__PURE__*/_jsx(\"span\",{style:{color:'red'},children:\"* \"}),\"Since Your Updated Status is on Hold, Candidates cannot Search Your Interview Support.\"]}),approvedInterviewSupport.updateStatus===Constants.REJECTED&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Reason : \"}),\" \",/*#__PURE__*/_jsx(\"span\",{children:approvedInterviewSupport.description}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"label\",{style:{fontSize:'13px'},children:[/*#__PURE__*/_jsx(\"span\",{style:{color:'red'},children:\"* \"}),\"Since Your Updated Status is on Rejected, Candidates can Search Your previous Interview Support Technical Stack and Available Slots.\"]})]})]})})]})}),/*#__PURE__*/_jsx(\"div\",{children:errMsgDiv&&/*#__PURE__*/_jsx(\"div\",{style:customCssForMsg,children:/*#__PURE__*/_jsx(\"label\",{children:errMsg})})}),showUpdateApprovedInterviewSupportModal&&/*#__PURE__*/_jsx(Modal,{className:\"update-approved-interview-support-modal\",size:\"xl\",show:showUpdateApprovedInterviewSupportModal,onHide:handleUpdateApprovedInterviewSupportModalClose,centered:true,backdrop:\"static\",children:/*#__PURE__*/_jsxs(Container,{children:[/*#__PURE__*/_jsx(Modal.Header,{closeButton:true,children:/*#__PURE__*/_jsx(Modal.Title,{children:\"Update Interview Support\"})}),/*#__PURE__*/_jsx(Modal.Body,{children:/*#__PURE__*/_jsx(\"div\",{className:\"update-interview-support\",style:{fontSize:'14px'},children:/*#__PURE__*/_jsx(\"div\",{className:\"interview-support-form\",children:/*#__PURE__*/_jsxs(\"form\",{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"technology-multiselect mt-3\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Add Technical Stack\"}),/*#__PURE__*/_jsx(Multiselect,{id:\"technology\",options:technologiesList,selectedValues:defaultTechnologyList,disablePreSelectedValues:true,onSelect:onSelectTechnology,onRemove:onRemoveTechnology,displayValue:\"technologyName\"//technologyName\n,placeholder:\"Your Technical Stack\",avoidHighlightFirstOption:true,style:{chips:{background:childColor}}})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"time-slots mt-3\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"label-container\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Select Your Available Time Slots for a day\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"reload-container\",onClick:handleTimeSlotReload,children:[/*#__PURE__*/_jsx(FaRedo,{className:\"reload-icon\"}),/*#__PURE__*/_jsx(\"span\",{className:\"reload-text\",children:\"Uncheck All Slots\"})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"time-slot-container\",children:timeSlotList.map((item,index)=>/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"time-slot-button \".concat(selectedSlots.includes(item)?'selected':''),onClick:()=>handleTimeSlotClick(item),disabled:item.isBooked?true:false,children:Constants.formatTime(Constants.convertUserTimezoneTime(item.slotStartTime))+' - '+Constants.formatTime(Constants.convertUserTimezoneTime(item.slotEndTime))},index))})]}),/*#__PURE__*/_jsx(\"div\",{className:\"mt-2\",children:updateApprovedInterviewSupportErrMsgDiv&&/*#__PURE__*/_jsx(\"div\",{style:customCssForMsg,children:/*#__PURE__*/_jsx(\"label\",{children:updateApprovedInterviewSupportErrMsg})})})]})})})}),/*#__PURE__*/_jsx(Modal.Footer,{children:/*#__PURE__*/_jsx(\"div\",{className:\"update-interview-support-button\",children:/*#__PURE__*/_jsx(Button,{className:\"dashboard-button\",onClick:handleApprovedUpdateInterviewSupport,children:\"Update\"})})})]})})]});}export default ExponentApprovedInterviewSupport;/**======================================================================== */ /**\r\n * import { useEffect, useState } from 'react';\r\nimport LoadingBar from '../../../../../loading_bar_component/LoadingBar';\r\nimport './ExponentApprovedInterviewSupport.css';\r\nimport Constants from '../../../../../Constants';\r\nimport InterviewSupporterService from '../../../../../../Services/exponent_service/InterviewSupporterService';\r\nimport { Button, Card, Container, Modal } from 'react-bootstrap';\r\nimport GlobalService from '../../../../../../Services/global_service/GlobalService';\r\nimport Multiselect from 'multiselect-react-dropdown';\r\nimport { FaRedo } from 'react-icons/fa';\r\n\r\nfunction ExponentApprovedInterviewSupport() {\r\n\r\n    const [loadingBar, setLoadingBar] = useState(false);\r\n\r\n    const [approvedInterviewSupport, setApprovedInterviewSupport] = useState(null);\r\n    const userId = localStorage.getItem(\"breezeUserId\");\r\n    const getApprovedInterviewSupportByExponentId = async () => {\r\n        setLoadingBar(true);\r\n        const request = {\r\n            exponentId: userId,\r\n        }\r\n        try {\r\n            const responseData = await InterviewSupporterService.exponentApprovedInterviewSupport(request);\r\n            console.log(responseData);\r\n            setApprovedInterviewSupport(responseData);\r\n        } catch (error) {\r\n            console.log(error.message);\r\n            handleExponentApprovedInterviewSupportErrors(error.message);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        getApprovedInterviewSupportByExponentId();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const handleExponentApprovedInterviewSupportErrors = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            approvedInterviewSupportDisplayErrMsg(\"Interview Supporter Id is invalid\");\r\n        else if (Constants.ENTITY_NOT_FOUND === errorStatus)\r\n            approvedInterviewSupportDisplayErrMsg(\"You Have No Approved Interview Support\");\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            approvedInterviewSupportDisplayErrMsg(\"Sorry, Our service is down\");\r\n        else\r\n            approvedInterviewSupportDisplayErrMsg(\"Could not process your request\");\r\n    }\r\n\r\n    //Fields for to display err msg div and label\r\n    const [messageColor, setMessageColor] = useState(Constants.MESSAGE_COLOR);\r\n    const [errMsgDiv, setErrMsgDiv] = useState(false);\r\n    const [errMsg, setErrMsg] = useState(\"\");\r\n    //JS for to display err msg\r\n    const approvedInterviewSupportDisplayErrMsg = (errorMessage) => {\r\n        setErrMsg(errorMessage);\r\n        setErrMsgDiv(true);\r\n        // setTimeout(() => {\r\n        //     setErrMsg(\"\");\r\n        //     setErrMsgDiv(false);\r\n        // }, 3000);\r\n    }\r\n\r\n    const [showUpdateApprovedInterviewSupportModal, setShowUpdateApprovedInterviewSupportModal] = useState(false);\r\n    const handleUpdateApprovedInterviewSupportModalClose = () => {\r\n        setShowUpdateApprovedInterviewSupportModal(false);\r\n        setTechnologies([]);\r\n        setTechnologiesList([]);\r\n        setTimeSlotList([]);\r\n        setSelectedSlots([]); \r\n    }\r\n\r\n    // technology code\r\n    const [technologies, setTechnologies] = useState([]);\r\n    const [technologiesList, setTechnologiesList] = useState([]);\r\n    const onSelectTechnology = (selectedList, selectedItem) => {\r\n        setTechnologies([...selectedList]);\r\n        console.log(technologies);\r\n    }\r\n    const onRemoveTechnology = (selectedList, removedItem) => {\r\n        setTechnologies([...selectedList]);\r\n        console.log(technologies);\r\n    }\r\n\r\n    // time slot code\r\n    const [timeSlotList, setTimeSlotList] = useState([]);\r\n    const [selectedSlots, setSelectedSlots] = useState([]);\r\n    const handleTimeSlotClick = (slot) => {\r\n        if (selectedSlots.includes(slot)) {\r\n            setSelectedSlots(selectedSlots.filter(s => s !== slot));\r\n        } else {\r\n            setSelectedSlots([...selectedSlots, slot]);\r\n        }\r\n        console.log(selectedSlots);\r\n    };\r\n    const handleTimeSlotReload = () => {\r\n        setSelectedSlots([]);\r\n    };\r\n\r\n    const handleUpdateApprovedInterviewSupport = () => {\r\n\r\n        const request = {\r\n            userId: userId,\r\n        }\r\n\r\n        const getTechStackByExponentId = async () => {\r\n            setLoadingBar(true);\r\n            try {\r\n                const responseData = await GlobalService.getTechStackByExponentId(request);\r\n                console.log(responseData);\r\n                const jsonResponseData = responseData.map((item, index) => {\r\n                    return { technologyName: item }\r\n                });\r\n                console.log(jsonResponseData);\r\n                setTechnologiesList(jsonResponseData);\r\n            } catch (error) {\r\n                console.log(error.message);\r\n            } finally {\r\n                setLoadingBar(false);\r\n            }\r\n        };\r\n        getTechStackByExponentId();\r\n\r\n        const getAllTimeSlot = async () => {\r\n            setLoadingBar(true);\r\n            try {\r\n                const responseData = await GlobalService.getAllTimeSlot();\r\n                console.log(responseData);\r\n                setTimeSlotList(responseData);\r\n            } catch (error) {\r\n                console.log(error.message);\r\n            } finally {\r\n                setLoadingBar(false);\r\n            }\r\n        };\r\n        getAllTimeSlot();\r\n        setShowUpdateApprovedInterviewSupportModal(true);\r\n    }\r\n\r\n    const handleApprovedUpdateInterviewSupport = async () => {\r\n        console.log(technologies);\r\n        console.log(selectedSlots);\r\n\r\n        if (technologies === null || technologies.length === 0) {\r\n            updateApprovedInterviewSupportDisplayErrMsg('Please select technologies to give interview support from your technical stack');\r\n        } else if (selectedSlots === null || selectedSlots.length === 0) {\r\n            updateApprovedInterviewSupportDisplayErrMsg('Please select Your Available Time Slots');\r\n        } else {\r\n            setLoadingBar(true);\r\n            const request = {\r\n                interviewSupportId: approvedInterviewSupport.interviewSupportId,\r\n                technologyList: technologies,\r\n                timeSlotList: selectedSlots,\r\n            }\r\n            try {\r\n                const responseData = await InterviewSupporterService.updateApprovedInterviewSupport(request);\r\n                console.log(responseData);\r\n                updateApprovedInterviewSupportDisplaySucMsg('Interview Support Updated Successfully, Our backend team will verify shortly...');\r\n            } catch (error) {\r\n                handleUpdateApprovedInterviewSupportErrors(error.message);\r\n            } finally {\r\n                setLoadingBar(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleUpdateApprovedInterviewSupportErrors = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            updateApprovedInterviewSupportDisplayErrMsg(\"Inputs are invalid\");\r\n        else if (Constants.EXISTING_BOOKINGS === errorStatus)\r\n            updateApprovedInterviewSupportDisplayErrMsg(\"You Interview Support having bookings, you can't update now\");\r\n        else if (Constants.ENTITY_NOT_FOUND === errorStatus)\r\n            updateApprovedInterviewSupportDisplayErrMsg(\"You Interview Support is not found\");\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            updateApprovedInterviewSupportDisplayErrMsg(\"Sorry, Our service is down\");\r\n        else\r\n            updateApprovedInterviewSupportDisplayErrMsg(\"Could not process your request\");\r\n    }\r\n\r\n    const [updateApprovedInterviewSupportErrMsgDiv, setUpdateApprovedInterviewSupportErrMsgDiv] = useState(false);\r\n    const [updateApprovedInterviewSupportErrMsg, setUpdateApprovedInterviewSupportErrMsg] = useState(\"\");\r\n    //JS for to display err msg\r\n    const updateApprovedInterviewSupportDisplayErrMsg = (errorMessage) => {\r\n        setUpdateApprovedInterviewSupportErrMsg(errorMessage);\r\n        setUpdateApprovedInterviewSupportErrMsgDiv(true);\r\n        setTimeout(() => {\r\n            setUpdateApprovedInterviewSupportErrMsg(\"\");\r\n            setUpdateApprovedInterviewSupportErrMsgDiv(false);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n    const updateApprovedInterviewSupportDisplaySucMsg = (errorMessage) => {\r\n        setMessageColor('green');\r\n        setUpdateApprovedInterviewSupportErrMsg(errorMessage);\r\n        setUpdateApprovedInterviewSupportErrMsgDiv(true);\r\n        setTimeout(() => {\r\n            setUpdateApprovedInterviewSupportErrMsg(\"\");\r\n            setUpdateApprovedInterviewSupportErrMsgDiv(false);\r\n            setMessageColor(Constants.MESSAGE_COLOR);\r\n            handleUpdateApprovedInterviewSupportModalClose();\r\n            window.location.reload();\r\n        }, Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);\r\n    }\r\n\r\n    const childColor = getComputedStyle(document.documentElement).getPropertyValue('--child-color');\r\n\r\n    const customCssForMsg = {\r\n        fontSize: 'medium',\r\n        fontWeight: '700',\r\n        color: messageColor,\r\n    }\r\n\r\n    return (\r\n        <div className='exponent-approved-interview-support'>\r\n            {loadingBar && <LoadingBar />}\r\n            {approvedInterviewSupport && (\r\n                <div className='approved-interview-support'>\r\n                    <Card className='card'>\r\n                        <Card.Body>\r\n                            <Card.Text>\r\n                                <div className='approved-interview-support-data'>\r\n                                    <div>\r\n                                        <label style={{ textDecoration: 'underline', fontSize: '15px' }}>{'Your Interview Support'}</label>\r\n                                        <button\r\n                                            style={{ float: 'right' }}\r\n                                            className='update-button'\r\n                                            onClick={() => handleUpdateApprovedInterviewSupport()}\r\n                                        >\r\n                                            Update\r\n                                        </button>\r\n                                    </div>\r\n                                    <label>Technical-Stack : </label> <span>{approvedInterviewSupport.technologyList.map(tech => tech.technologyName).join(', ')}</span> <br />\r\n                                    <div className='time-slots'>\r\n                                        <label>Available Slots : </label>\r\n                                        <div className='time-slot-container'>\r\n                                            {approvedInterviewSupport.timeSlotList.map((item, index) => (\r\n                                                <button\r\n                                                    key={index}\r\n                                                    type='button'\r\n                                                    className='time-slot-button'\r\n                                                >\r\n                                                    {Constants.formatTime(Constants.convertUserTimezoneTime(item.slotStartTime)) + ' - ' + Constants.formatTime(Constants.convertUserTimezoneTime(item.slotEndTime))}\r\n                                                </button>\r\n                                            ))}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </Card.Text>\r\n                        </Card.Body>\r\n                        { approvedInterviewSupport.updateStatus && (\r\n                            <Card.Footer>\r\n                                <div>\r\n                                    <label>Updated Status : </label> <span>{approvedInterviewSupport.updateStatus}</span><br />\r\n                                    { approvedInterviewSupport.updateStatus === Constants.HOLD && (\r\n                                        <label style={{fontSize:'13px'}}><span style={{color:'red'}}>* </span>Since Your Updated Status is on Hold, Candidates cannot Search Your Interview Support.</label>\r\n                                    )}\r\n                                    { approvedInterviewSupport.updateStatus === Constants.REJECTED && (\r\n                                        <div>\r\n                                            <label>Reason : </label> <span>{approvedInterviewSupport.description}</span><br />\r\n                                            <label style={{fontSize:'13px'}}><span style={{color:'red'}}>* </span>Since Your Updated Status is on Rejected, Candidates can Search Your previous Interview Support Technical Stack and Available Slots.</label>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </Card.Footer>\r\n                        )}\r\n                    </Card>\r\n                </div>\r\n            )}\r\n            <div>\r\n                {errMsgDiv &&\r\n                    <div style={customCssForMsg}>\r\n                        <label>{errMsg}</label>\r\n                    </div>}\r\n            </div>\r\n            {showUpdateApprovedInterviewSupportModal && (\r\n                <Modal className='update-approved-interview-support-modal' size='xl' show={showUpdateApprovedInterviewSupportModal} onHide={handleUpdateApprovedInterviewSupportModalClose} centered backdrop=\"static\">\r\n                    <Container>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title>Update Interview Support</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <div className=\"update-interview-support\" style={{ fontSize: '14px' }}>\r\n                                <div className=\"interview-support-form\">\r\n                                    <form>\r\n                                        <div className='technology-multiselect mt-3'>\r\n                                            <label>Add Technical Stack</label>\r\n                                            <Multiselect\r\n                                                id='technology'\r\n                                                options={technologiesList}\r\n                                                onSelect={onSelectTechnology}\r\n                                                onRemove={onRemoveTechnology}\r\n                                                displayValue=\"technologyName\" //technologyName\r\n                                                placeholder=\"Your Technical Stack\"\r\n                                                avoidHighlightFirstOption={true}\r\n                                                style={{\r\n                                                    chips: {\r\n                                                        background: childColor,\r\n                                                    },\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='time-slots mt-3'>\r\n                                            <div className=\"label-container\">\r\n                                                <label>Select Your Available Time Slots for a day</label>\r\n                                                <div className=\"reload-container\" onClick={handleTimeSlotReload}>\r\n                                                    <FaRedo className=\"reload-icon\" />\r\n                                                    <span className=\"reload-text\">Uncheck All Slots</span>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"time-slot-container\" >\r\n                                                {timeSlotList.map((item, index) => (\r\n                                                    <button\r\n                                                        key={index}\r\n                                                        type='button'\r\n                                                        className={`time-slot-button ${selectedSlots.includes(item) ? 'selected' : ''}`}\r\n                                                        onClick={() => handleTimeSlotClick(item)}\r\n                                                    >\r\n                                                        {Constants.formatTime(Constants.convertUserTimezoneTime(item.slotStartTime)) + ' - ' + Constants.formatTime(Constants.convertUserTimezoneTime(item.slotEndTime))}\r\n                                                    </button>\r\n                                                ))}\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className='mt-2'>\r\n                                            {updateApprovedInterviewSupportErrMsgDiv &&\r\n                                                <div style={customCssForMsg}>\r\n                                                    <label>{updateApprovedInterviewSupportErrMsg}</label>\r\n                                                </div>}\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            <div className='update-interview-support-button'>\r\n                                <Button\r\n                                    className='dashboard-button'\r\n                                    onClick={handleApprovedUpdateInterviewSupport}\r\n                                >\r\n                                    Update\r\n                                </Button>\r\n                            </div>\r\n                        </Modal.Footer>\r\n                    </Container>\r\n                </Modal>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ExponentApprovedInterviewSupport;\r\n */","map":{"version":3,"names":["useEffect","useState","LoadingBar","Constants","InterviewSupporterService","Button","Card","Container","Modal","GlobalService","Multiselect","FaRedo","jsx","_jsx","jsxs","_jsxs","ExponentApprovedInterviewSupport","loadingBar","setLoadingBar","approvedInterviewSupport","setApprovedInterviewSupport","userId","localStorage","getItem","getApprovedInterviewSupportByExponentId","request","exponentId","responseData","exponentApprovedInterviewSupport","console","log","error","message","handleExponentApprovedInterviewSupportErrors","errorStatus","INVALID_REQUEST_FIELD","approvedInterviewSupportDisplayErrMsg","ENTITY_NOT_FOUND","BREEZE_DATABASE_EXCEPTION","messageColor","setMessageColor","MESSAGE_COLOR","errMsgDiv","setErrMsgDiv","errMsg","setErrMsg","errorMessage","showUpdateApprovedInterviewSupportModal","setShowUpdateApprovedInterviewSupportModal","handleUpdateApprovedInterviewSupportModalClose","setTechnologies","setTechnologiesList","setTimeSlotList","setSelectedSlots","setDefaultTechnologyList","technologies","technologiesList","defaultTechnologyList","onSelectTechnology","selectedList","selectedItem","onRemoveTechnology","removedItem","timeSlotList","selectedSlots","handleTimeSlotClick","slot","includes","filter","s","handleTimeSlotReload","isBooked","handleUpdateApprovedInterviewSupport","getTechStackByExponentId","jsonResponseData","map","item","index","technologyName","technologyList","getAllTimeSlot","updatedResponseData","some","approvedSlot","timeSlotId","handleApprovedUpdateInterviewSupport","length","updateApprovedInterviewSupportDisplayErrMsg","interviewSupportId","updateApprovedInterviewSupport","updateApprovedInterviewSupportDisplaySucMsg","handleUpdateApprovedInterviewSupportErrors","EXISTING_BOOKINGS","updateApprovedInterviewSupportErrMsgDiv","setUpdateApprovedInterviewSupportErrMsgDiv","updateApprovedInterviewSupportErrMsg","setUpdateApprovedInterviewSupportErrMsg","setTimeout","SET_TIME_OUT_FOR_ERROR_MSG","window","location","reload","SET_TIME_OUT_FOR_SUCCESS_MSG","childColor","getComputedStyle","document","documentElement","getPropertyValue","customCssForMsg","fontSize","fontWeight","color","className","children","Body","Text","style","textDecoration","float","onClick","tech","join","type","formatTime","convertUserTimezoneTime","slotStartTime","slotEndTime","updateStatus","Footer","HOLD","REJECTED","description","size","show","onHide","centered","backdrop","Header","closeButton","Title","id","options","selectedValues","disablePreSelectedValues","onSelect","onRemove","displayValue","placeholder","avoidHighlightFirstOption","chips","background","concat","disabled"],"sources":["C:/Users/DELL/Documents/prepswisefinalprojects/breeze (15)-frontend/breeze/src/components/dashboard_component/feature_component/exponent_feature_component/interview_supporter_feature_component/approved_interview_support_component/ExponentApprovedInterviewSupport.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport LoadingBar from '../../../../../loading_bar_component/LoadingBar';\r\nimport './ExponentApprovedInterviewSupport.css';\r\nimport Constants from '../../../../../Constants';\r\nimport InterviewSupporterService from '../../../../../../Services/exponent_service/InterviewSupporterService';\r\nimport { Button, Card, Container, Modal } from 'react-bootstrap';\r\nimport GlobalService from '../../../../../../Services/global_service/GlobalService';\r\nimport Multiselect from 'multiselect-react-dropdown';\r\nimport { FaRedo } from 'react-icons/fa';\r\n\r\nfunction ExponentApprovedInterviewSupport() {\r\n\r\n    const [loadingBar, setLoadingBar] = useState(false);\r\n\r\n    const [approvedInterviewSupport, setApprovedInterviewSupport] = useState(null);\r\n    const userId = localStorage.getItem(\"breezeUserId\");\r\n    const getApprovedInterviewSupportByExponentId = async () => {\r\n        setLoadingBar(true);\r\n        const request = {\r\n            exponentId: userId,\r\n        }\r\n        try {\r\n            const responseData = await InterviewSupporterService.exponentApprovedInterviewSupport(request);\r\n            console.log(responseData);\r\n            setApprovedInterviewSupport(responseData);\r\n        } catch (error) {\r\n            console.log(error.message);\r\n            handleExponentApprovedInterviewSupportErrors(error.message);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        getApprovedInterviewSupportByExponentId();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const handleExponentApprovedInterviewSupportErrors = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            approvedInterviewSupportDisplayErrMsg(\"Interview Supporter Id is invalid\");\r\n        else if (Constants.ENTITY_NOT_FOUND === errorStatus)\r\n            approvedInterviewSupportDisplayErrMsg(\"You Have No Approved Interview Support\");\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            approvedInterviewSupportDisplayErrMsg(\"Sorry, Our service is down\");\r\n        else\r\n            approvedInterviewSupportDisplayErrMsg(\"Could not process your request\");\r\n    }\r\n\r\n    //Fields for to display err msg div and label\r\n    const [messageColor, setMessageColor] = useState(Constants.MESSAGE_COLOR);\r\n    const [errMsgDiv, setErrMsgDiv] = useState(false);\r\n    const [errMsg, setErrMsg] = useState(\"\");\r\n    //JS for to display err msg\r\n    const approvedInterviewSupportDisplayErrMsg = (errorMessage) => {\r\n        setErrMsg(errorMessage);\r\n        setErrMsgDiv(true);\r\n        // setTimeout(() => {\r\n        //     setErrMsg(\"\");\r\n        //     setErrMsgDiv(false);\r\n        // }, 3000);\r\n    }\r\n\r\n    const [showUpdateApprovedInterviewSupportModal, setShowUpdateApprovedInterviewSupportModal] = useState(false);\r\n    const handleUpdateApprovedInterviewSupportModalClose = () => {\r\n        setShowUpdateApprovedInterviewSupportModal(false);\r\n        setTechnologies([]);\r\n        setTechnologiesList([]);\r\n        setTimeSlotList([]);\r\n        setSelectedSlots([]); \r\n        setDefaultTechnologyList([]);\r\n    }\r\n\r\n    // technology code\r\n    const [technologies, setTechnologies] = useState([]);\r\n    const [technologiesList, setTechnologiesList] = useState([]);\r\n    const [defaultTechnologyList, setDefaultTechnologyList] = useState([]);\r\n    const onSelectTechnology = (selectedList, selectedItem) => {\r\n        setTechnologies([...selectedList]);\r\n        console.log(technologies);\r\n    }\r\n    const onRemoveTechnology = (selectedList, removedItem) => {\r\n        setTechnologies([...selectedList]);\r\n        console.log(technologies);\r\n    }\r\n\r\n    // time slot code\r\n    const [timeSlotList, setTimeSlotList] = useState([]);\r\n    const [selectedSlots, setSelectedSlots] = useState([]);\r\n    const handleTimeSlotClick = (slot) => {\r\n        if (selectedSlots.includes(slot)) {\r\n            setSelectedSlots(selectedSlots.filter(s => s !== slot));\r\n        } else {\r\n            setSelectedSlots([...selectedSlots, slot]);\r\n        }\r\n        console.log(selectedSlots);\r\n    };\r\n    const handleTimeSlotReload = () => {\r\n        setSelectedSlots(timeSlotList.filter(slot => slot.isBooked));\r\n    };\r\n\r\n    const handleUpdateApprovedInterviewSupport = () => {\r\n\r\n        const request = {\r\n            userId: userId,\r\n        }\r\n\r\n        const getTechStackByExponentId = async () => {\r\n            setLoadingBar(true);\r\n            try {\r\n                const responseData = await GlobalService.getTechStackByExponentId(request);\r\n                console.log(responseData);\r\n                const jsonResponseData = responseData.map((item, index) => {\r\n                    return { technologyName: item }\r\n                });\r\n                console.log(jsonResponseData);\r\n                setDefaultTechnologyList(approvedInterviewSupport.technologyList);\r\n                setTechnologies(approvedInterviewSupport.technologyList);\r\n                setTechnologiesList(jsonResponseData);\r\n            } catch (error) {\r\n                console.log(error.message);\r\n            } finally {\r\n                setLoadingBar(false);\r\n            }\r\n        };\r\n        getTechStackByExponentId();\r\n\r\n        const getAllTimeSlot = async () => {\r\n            setLoadingBar(true);\r\n            try {\r\n                const responseData = await GlobalService.getAllTimeSlot();\r\n                console.log(responseData);\r\n                const updatedResponseData = responseData.map(slot => {\r\n                    const isBooked = approvedInterviewSupport.timeSlotList.some(\r\n                        approvedSlot => approvedSlot.timeSlotId === slot.timeSlotId\r\n                    );\r\n                    return { ...slot, isBooked: isBooked ? true : slot.isBooked };\r\n                });\r\n                console.log(updatedResponseData);\r\n                setSelectedSlots(updatedResponseData.filter(slot => slot.isBooked));\r\n                setTimeSlotList(updatedResponseData);\r\n            } catch (error) {\r\n                console.log(error.message);\r\n            } finally {\r\n                setLoadingBar(false);\r\n            }\r\n        };\r\n        getAllTimeSlot();\r\n        setShowUpdateApprovedInterviewSupportModal(true);\r\n    }\r\n\r\n    const handleApprovedUpdateInterviewSupport = async () => {\r\n        console.log(technologies);\r\n        console.log(selectedSlots);\r\n\r\n        if (technologies === null || technologies.length === 0) {\r\n            updateApprovedInterviewSupportDisplayErrMsg('Please select technical stack to give interview support from your technical stack');\r\n        } else if (selectedSlots === null || selectedSlots.length === 0) {\r\n            updateApprovedInterviewSupportDisplayErrMsg('Please select Your Available Time Slots');\r\n        } else {\r\n            setLoadingBar(true);\r\n            const request = {\r\n                interviewSupportId: approvedInterviewSupport.interviewSupportId,\r\n                technologyList: technologies,\r\n                timeSlotList: selectedSlots,\r\n            }\r\n            try {\r\n                const responseData = await InterviewSupporterService.updateApprovedInterviewSupport(request);\r\n                console.log(responseData);\r\n                updateApprovedInterviewSupportDisplaySucMsg('Interview Support Updated Successfully, Our backend team will verify shortly...');\r\n            } catch (error) {\r\n                handleUpdateApprovedInterviewSupportErrors(error.message);\r\n            } finally {\r\n                setLoadingBar(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleUpdateApprovedInterviewSupportErrors = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            updateApprovedInterviewSupportDisplayErrMsg(\"Inputs are invalid\");\r\n        else if (Constants.EXISTING_BOOKINGS === errorStatus)\r\n            updateApprovedInterviewSupportDisplayErrMsg(\"Your Interview Support having bookings, you can't update now\");\r\n        else if (Constants.ENTITY_NOT_FOUND === errorStatus)\r\n            updateApprovedInterviewSupportDisplayErrMsg(\"Your Interview Support is not found\");\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            updateApprovedInterviewSupportDisplayErrMsg(\"Sorry, Our service is down\");\r\n        else\r\n            updateApprovedInterviewSupportDisplayErrMsg(\"Could not process your request\");\r\n    }\r\n\r\n    const [updateApprovedInterviewSupportErrMsgDiv, setUpdateApprovedInterviewSupportErrMsgDiv] = useState(false);\r\n    const [updateApprovedInterviewSupportErrMsg, setUpdateApprovedInterviewSupportErrMsg] = useState(\"\");\r\n    //JS for to display err msg\r\n    const updateApprovedInterviewSupportDisplayErrMsg = (errorMessage) => {\r\n        setUpdateApprovedInterviewSupportErrMsg(errorMessage);\r\n        setUpdateApprovedInterviewSupportErrMsgDiv(true);\r\n        setTimeout(() => {\r\n            setUpdateApprovedInterviewSupportErrMsg(\"\");\r\n            setUpdateApprovedInterviewSupportErrMsgDiv(false);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n    const updateApprovedInterviewSupportDisplaySucMsg = (errorMessage) => {\r\n        setMessageColor('green');\r\n        setUpdateApprovedInterviewSupportErrMsg(errorMessage);\r\n        setUpdateApprovedInterviewSupportErrMsgDiv(true);\r\n        setTimeout(() => {\r\n            setUpdateApprovedInterviewSupportErrMsg(\"\");\r\n            setUpdateApprovedInterviewSupportErrMsgDiv(false);\r\n            setMessageColor(Constants.MESSAGE_COLOR);\r\n            handleUpdateApprovedInterviewSupportModalClose();\r\n            window.location.reload();\r\n        }, Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);\r\n    }\r\n\r\n    const childColor = getComputedStyle(document.documentElement).getPropertyValue('--child-color');\r\n\r\n    const customCssForMsg = {\r\n        fontSize: 'medium',\r\n        fontWeight: '700',\r\n        color: messageColor,\r\n    }\r\n\r\n    return (\r\n        <div className='exponent-approved-interview-support'>\r\n            {loadingBar && <LoadingBar />}\r\n            {approvedInterviewSupport && (\r\n                <div className='approved-interview-support'>\r\n                    <Card className='card'>\r\n                        <Card.Body>\r\n                            <Card.Text>\r\n                                <div className='approved-interview-support-data'>\r\n                                    <div>\r\n                                        <label style={{ textDecoration: 'underline', fontSize: '15px' }}>{'Your Interview Support'}</label>\r\n                                        <button\r\n                                            style={{ float: 'right' }}\r\n                                            className='update-button'\r\n                                            onClick={() => handleUpdateApprovedInterviewSupport()}\r\n                                        >\r\n                                            Update\r\n                                        </button>\r\n                                    </div>\r\n                                    <label>Technical-Stack : </label> <span>{approvedInterviewSupport.technologyList.map(tech => tech.technologyName).join(', ')}</span> <br />\r\n                                    <div className='time-slots'>\r\n                                        <label>Available Slots : </label>\r\n                                        <div className='time-slot-container'>\r\n                                            {approvedInterviewSupport.timeSlotList.map((item, index) => (\r\n                                                <button\r\n                                                    key={index}\r\n                                                    type='button'\r\n                                                    className='time-slot-button'\r\n                                                >\r\n                                                    {Constants.formatTime(Constants.convertUserTimezoneTime(item.slotStartTime)) + ' - ' + Constants.formatTime(Constants.convertUserTimezoneTime(item.slotEndTime))}\r\n                                                </button>\r\n                                            ))}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </Card.Text>\r\n                        </Card.Body>\r\n                        { approvedInterviewSupport.updateStatus && (\r\n                            <Card.Footer>\r\n                                <div>\r\n                                    <label>Updated Status : </label> <span>{approvedInterviewSupport.updateStatus}</span><br />\r\n                                    { approvedInterviewSupport.updateStatus === Constants.HOLD && (\r\n                                        <label style={{fontSize:'13px'}}><span style={{color:'red'}}>* </span>Since Your Updated Status is on Hold, Candidates cannot Search Your Interview Support.</label>\r\n                                    )}\r\n                                    { approvedInterviewSupport.updateStatus === Constants.REJECTED && (\r\n                                        <div>\r\n                                            <label>Reason : </label> <span>{approvedInterviewSupport.description}</span><br />\r\n                                            <label style={{fontSize:'13px'}}><span style={{color:'red'}}>* </span>Since Your Updated Status is on Rejected, Candidates can Search Your previous Interview Support Technical Stack and Available Slots.</label>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </Card.Footer>\r\n                        )}\r\n                    </Card>\r\n                </div>\r\n            )}\r\n            <div>\r\n                {errMsgDiv &&\r\n                    <div style={customCssForMsg}>\r\n                        <label>{errMsg}</label>\r\n                    </div>}\r\n            </div>\r\n            {showUpdateApprovedInterviewSupportModal && (\r\n                <Modal className='update-approved-interview-support-modal' size='xl' show={showUpdateApprovedInterviewSupportModal} onHide={handleUpdateApprovedInterviewSupportModalClose} centered backdrop=\"static\">\r\n                    <Container>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title>Update Interview Support</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <div className=\"update-interview-support\" style={{ fontSize: '14px' }}>\r\n                                <div className=\"interview-support-form\">\r\n                                    <form>\r\n                                        <div className='technology-multiselect mt-3'>\r\n                                            <label>Add Technical Stack</label>\r\n                                            <Multiselect\r\n                                                id='technology'\r\n                                                options={technologiesList}\r\n                                                selectedValues={defaultTechnologyList}\r\n                                                disablePreSelectedValues\r\n                                                onSelect={onSelectTechnology}\r\n                                                onRemove={onRemoveTechnology}                                                \r\n                                                displayValue=\"technologyName\" //technologyName\r\n                                                placeholder=\"Your Technical Stack\"\r\n                                                avoidHighlightFirstOption={true}\r\n                                                style={{\r\n                                                    chips: {\r\n                                                        background: childColor,\r\n                                                    },\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='time-slots mt-3'>\r\n                                            <div className=\"label-container\">\r\n                                                <label>Select Your Available Time Slots for a day</label>\r\n                                                <div className=\"reload-container\" onClick={handleTimeSlotReload}>\r\n                                                    <FaRedo className=\"reload-icon\" />\r\n                                                    <span className=\"reload-text\">Uncheck All Slots</span>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"time-slot-container\" >\r\n                                                {timeSlotList.map((item, index) => (\r\n                                                    <button\r\n                                                        key={index}\r\n                                                        type='button'\r\n                                                        className={`time-slot-button ${selectedSlots.includes(item) ? 'selected' : ''}`}\r\n                                                        onClick={() => handleTimeSlotClick(item)}\r\n                                                        disabled={item.isBooked ? true : false}\r\n                                                    >\r\n                                                        {Constants.formatTime(Constants.convertUserTimezoneTime(item.slotStartTime)) + ' - ' + Constants.formatTime(Constants.convertUserTimezoneTime(item.slotEndTime))}\r\n                                                    </button>\r\n                                                ))}\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className='mt-2'>\r\n                                            {updateApprovedInterviewSupportErrMsgDiv &&\r\n                                                <div style={customCssForMsg}>\r\n                                                    <label>{updateApprovedInterviewSupportErrMsg}</label>\r\n                                                </div>}\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            <div className='update-interview-support-button'>\r\n                                <Button\r\n                                    className='dashboard-button'\r\n                                    onClick={handleApprovedUpdateInterviewSupport}\r\n                                >\r\n                                    Update\r\n                                </Button>\r\n                            </div>\r\n                        </Modal.Footer>\r\n                    </Container>\r\n                </Modal>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ExponentApprovedInterviewSupport;\r\n\r\n\r\n/**======================================================================== */\r\n\r\n/**\r\n * import { useEffect, useState } from 'react';\r\nimport LoadingBar from '../../../../../loading_bar_component/LoadingBar';\r\nimport './ExponentApprovedInterviewSupport.css';\r\nimport Constants from '../../../../../Constants';\r\nimport InterviewSupporterService from '../../../../../../Services/exponent_service/InterviewSupporterService';\r\nimport { Button, Card, Container, Modal } from 'react-bootstrap';\r\nimport GlobalService from '../../../../../../Services/global_service/GlobalService';\r\nimport Multiselect from 'multiselect-react-dropdown';\r\nimport { FaRedo } from 'react-icons/fa';\r\n\r\nfunction ExponentApprovedInterviewSupport() {\r\n\r\n    const [loadingBar, setLoadingBar] = useState(false);\r\n\r\n    const [approvedInterviewSupport, setApprovedInterviewSupport] = useState(null);\r\n    const userId = localStorage.getItem(\"breezeUserId\");\r\n    const getApprovedInterviewSupportByExponentId = async () => {\r\n        setLoadingBar(true);\r\n        const request = {\r\n            exponentId: userId,\r\n        }\r\n        try {\r\n            const responseData = await InterviewSupporterService.exponentApprovedInterviewSupport(request);\r\n            console.log(responseData);\r\n            setApprovedInterviewSupport(responseData);\r\n        } catch (error) {\r\n            console.log(error.message);\r\n            handleExponentApprovedInterviewSupportErrors(error.message);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        getApprovedInterviewSupportByExponentId();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const handleExponentApprovedInterviewSupportErrors = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            approvedInterviewSupportDisplayErrMsg(\"Interview Supporter Id is invalid\");\r\n        else if (Constants.ENTITY_NOT_FOUND === errorStatus)\r\n            approvedInterviewSupportDisplayErrMsg(\"You Have No Approved Interview Support\");\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            approvedInterviewSupportDisplayErrMsg(\"Sorry, Our service is down\");\r\n        else\r\n            approvedInterviewSupportDisplayErrMsg(\"Could not process your request\");\r\n    }\r\n\r\n    //Fields for to display err msg div and label\r\n    const [messageColor, setMessageColor] = useState(Constants.MESSAGE_COLOR);\r\n    const [errMsgDiv, setErrMsgDiv] = useState(false);\r\n    const [errMsg, setErrMsg] = useState(\"\");\r\n    //JS for to display err msg\r\n    const approvedInterviewSupportDisplayErrMsg = (errorMessage) => {\r\n        setErrMsg(errorMessage);\r\n        setErrMsgDiv(true);\r\n        // setTimeout(() => {\r\n        //     setErrMsg(\"\");\r\n        //     setErrMsgDiv(false);\r\n        // }, 3000);\r\n    }\r\n\r\n    const [showUpdateApprovedInterviewSupportModal, setShowUpdateApprovedInterviewSupportModal] = useState(false);\r\n    const handleUpdateApprovedInterviewSupportModalClose = () => {\r\n        setShowUpdateApprovedInterviewSupportModal(false);\r\n        setTechnologies([]);\r\n        setTechnologiesList([]);\r\n        setTimeSlotList([]);\r\n        setSelectedSlots([]); \r\n    }\r\n\r\n    // technology code\r\n    const [technologies, setTechnologies] = useState([]);\r\n    const [technologiesList, setTechnologiesList] = useState([]);\r\n    const onSelectTechnology = (selectedList, selectedItem) => {\r\n        setTechnologies([...selectedList]);\r\n        console.log(technologies);\r\n    }\r\n    const onRemoveTechnology = (selectedList, removedItem) => {\r\n        setTechnologies([...selectedList]);\r\n        console.log(technologies);\r\n    }\r\n\r\n    // time slot code\r\n    const [timeSlotList, setTimeSlotList] = useState([]);\r\n    const [selectedSlots, setSelectedSlots] = useState([]);\r\n    const handleTimeSlotClick = (slot) => {\r\n        if (selectedSlots.includes(slot)) {\r\n            setSelectedSlots(selectedSlots.filter(s => s !== slot));\r\n        } else {\r\n            setSelectedSlots([...selectedSlots, slot]);\r\n        }\r\n        console.log(selectedSlots);\r\n    };\r\n    const handleTimeSlotReload = () => {\r\n        setSelectedSlots([]);\r\n    };\r\n\r\n    const handleUpdateApprovedInterviewSupport = () => {\r\n\r\n        const request = {\r\n            userId: userId,\r\n        }\r\n\r\n        const getTechStackByExponentId = async () => {\r\n            setLoadingBar(true);\r\n            try {\r\n                const responseData = await GlobalService.getTechStackByExponentId(request);\r\n                console.log(responseData);\r\n                const jsonResponseData = responseData.map((item, index) => {\r\n                    return { technologyName: item }\r\n                });\r\n                console.log(jsonResponseData);\r\n                setTechnologiesList(jsonResponseData);\r\n            } catch (error) {\r\n                console.log(error.message);\r\n            } finally {\r\n                setLoadingBar(false);\r\n            }\r\n        };\r\n        getTechStackByExponentId();\r\n\r\n        const getAllTimeSlot = async () => {\r\n            setLoadingBar(true);\r\n            try {\r\n                const responseData = await GlobalService.getAllTimeSlot();\r\n                console.log(responseData);\r\n                setTimeSlotList(responseData);\r\n            } catch (error) {\r\n                console.log(error.message);\r\n            } finally {\r\n                setLoadingBar(false);\r\n            }\r\n        };\r\n        getAllTimeSlot();\r\n        setShowUpdateApprovedInterviewSupportModal(true);\r\n    }\r\n\r\n    const handleApprovedUpdateInterviewSupport = async () => {\r\n        console.log(technologies);\r\n        console.log(selectedSlots);\r\n\r\n        if (technologies === null || technologies.length === 0) {\r\n            updateApprovedInterviewSupportDisplayErrMsg('Please select technologies to give interview support from your technical stack');\r\n        } else if (selectedSlots === null || selectedSlots.length === 0) {\r\n            updateApprovedInterviewSupportDisplayErrMsg('Please select Your Available Time Slots');\r\n        } else {\r\n            setLoadingBar(true);\r\n            const request = {\r\n                interviewSupportId: approvedInterviewSupport.interviewSupportId,\r\n                technologyList: technologies,\r\n                timeSlotList: selectedSlots,\r\n            }\r\n            try {\r\n                const responseData = await InterviewSupporterService.updateApprovedInterviewSupport(request);\r\n                console.log(responseData);\r\n                updateApprovedInterviewSupportDisplaySucMsg('Interview Support Updated Successfully, Our backend team will verify shortly...');\r\n            } catch (error) {\r\n                handleUpdateApprovedInterviewSupportErrors(error.message);\r\n            } finally {\r\n                setLoadingBar(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleUpdateApprovedInterviewSupportErrors = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            updateApprovedInterviewSupportDisplayErrMsg(\"Inputs are invalid\");\r\n        else if (Constants.EXISTING_BOOKINGS === errorStatus)\r\n            updateApprovedInterviewSupportDisplayErrMsg(\"You Interview Support having bookings, you can't update now\");\r\n        else if (Constants.ENTITY_NOT_FOUND === errorStatus)\r\n            updateApprovedInterviewSupportDisplayErrMsg(\"You Interview Support is not found\");\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            updateApprovedInterviewSupportDisplayErrMsg(\"Sorry, Our service is down\");\r\n        else\r\n            updateApprovedInterviewSupportDisplayErrMsg(\"Could not process your request\");\r\n    }\r\n\r\n    const [updateApprovedInterviewSupportErrMsgDiv, setUpdateApprovedInterviewSupportErrMsgDiv] = useState(false);\r\n    const [updateApprovedInterviewSupportErrMsg, setUpdateApprovedInterviewSupportErrMsg] = useState(\"\");\r\n    //JS for to display err msg\r\n    const updateApprovedInterviewSupportDisplayErrMsg = (errorMessage) => {\r\n        setUpdateApprovedInterviewSupportErrMsg(errorMessage);\r\n        setUpdateApprovedInterviewSupportErrMsgDiv(true);\r\n        setTimeout(() => {\r\n            setUpdateApprovedInterviewSupportErrMsg(\"\");\r\n            setUpdateApprovedInterviewSupportErrMsgDiv(false);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n    const updateApprovedInterviewSupportDisplaySucMsg = (errorMessage) => {\r\n        setMessageColor('green');\r\n        setUpdateApprovedInterviewSupportErrMsg(errorMessage);\r\n        setUpdateApprovedInterviewSupportErrMsgDiv(true);\r\n        setTimeout(() => {\r\n            setUpdateApprovedInterviewSupportErrMsg(\"\");\r\n            setUpdateApprovedInterviewSupportErrMsgDiv(false);\r\n            setMessageColor(Constants.MESSAGE_COLOR);\r\n            handleUpdateApprovedInterviewSupportModalClose();\r\n            window.location.reload();\r\n        }, Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);\r\n    }\r\n\r\n    const childColor = getComputedStyle(document.documentElement).getPropertyValue('--child-color');\r\n\r\n    const customCssForMsg = {\r\n        fontSize: 'medium',\r\n        fontWeight: '700',\r\n        color: messageColor,\r\n    }\r\n\r\n    return (\r\n        <div className='exponent-approved-interview-support'>\r\n            {loadingBar && <LoadingBar />}\r\n            {approvedInterviewSupport && (\r\n                <div className='approved-interview-support'>\r\n                    <Card className='card'>\r\n                        <Card.Body>\r\n                            <Card.Text>\r\n                                <div className='approved-interview-support-data'>\r\n                                    <div>\r\n                                        <label style={{ textDecoration: 'underline', fontSize: '15px' }}>{'Your Interview Support'}</label>\r\n                                        <button\r\n                                            style={{ float: 'right' }}\r\n                                            className='update-button'\r\n                                            onClick={() => handleUpdateApprovedInterviewSupport()}\r\n                                        >\r\n                                            Update\r\n                                        </button>\r\n                                    </div>\r\n                                    <label>Technical-Stack : </label> <span>{approvedInterviewSupport.technologyList.map(tech => tech.technologyName).join(', ')}</span> <br />\r\n                                    <div className='time-slots'>\r\n                                        <label>Available Slots : </label>\r\n                                        <div className='time-slot-container'>\r\n                                            {approvedInterviewSupport.timeSlotList.map((item, index) => (\r\n                                                <button\r\n                                                    key={index}\r\n                                                    type='button'\r\n                                                    className='time-slot-button'\r\n                                                >\r\n                                                    {Constants.formatTime(Constants.convertUserTimezoneTime(item.slotStartTime)) + ' - ' + Constants.formatTime(Constants.convertUserTimezoneTime(item.slotEndTime))}\r\n                                                </button>\r\n                                            ))}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </Card.Text>\r\n                        </Card.Body>\r\n                        { approvedInterviewSupport.updateStatus && (\r\n                            <Card.Footer>\r\n                                <div>\r\n                                    <label>Updated Status : </label> <span>{approvedInterviewSupport.updateStatus}</span><br />\r\n                                    { approvedInterviewSupport.updateStatus === Constants.HOLD && (\r\n                                        <label style={{fontSize:'13px'}}><span style={{color:'red'}}>* </span>Since Your Updated Status is on Hold, Candidates cannot Search Your Interview Support.</label>\r\n                                    )}\r\n                                    { approvedInterviewSupport.updateStatus === Constants.REJECTED && (\r\n                                        <div>\r\n                                            <label>Reason : </label> <span>{approvedInterviewSupport.description}</span><br />\r\n                                            <label style={{fontSize:'13px'}}><span style={{color:'red'}}>* </span>Since Your Updated Status is on Rejected, Candidates can Search Your previous Interview Support Technical Stack and Available Slots.</label>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </Card.Footer>\r\n                        )}\r\n                    </Card>\r\n                </div>\r\n            )}\r\n            <div>\r\n                {errMsgDiv &&\r\n                    <div style={customCssForMsg}>\r\n                        <label>{errMsg}</label>\r\n                    </div>}\r\n            </div>\r\n            {showUpdateApprovedInterviewSupportModal && (\r\n                <Modal className='update-approved-interview-support-modal' size='xl' show={showUpdateApprovedInterviewSupportModal} onHide={handleUpdateApprovedInterviewSupportModalClose} centered backdrop=\"static\">\r\n                    <Container>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title>Update Interview Support</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <div className=\"update-interview-support\" style={{ fontSize: '14px' }}>\r\n                                <div className=\"interview-support-form\">\r\n                                    <form>\r\n                                        <div className='technology-multiselect mt-3'>\r\n                                            <label>Add Technical Stack</label>\r\n                                            <Multiselect\r\n                                                id='technology'\r\n                                                options={technologiesList}\r\n                                                onSelect={onSelectTechnology}\r\n                                                onRemove={onRemoveTechnology}\r\n                                                displayValue=\"technologyName\" //technologyName\r\n                                                placeholder=\"Your Technical Stack\"\r\n                                                avoidHighlightFirstOption={true}\r\n                                                style={{\r\n                                                    chips: {\r\n                                                        background: childColor,\r\n                                                    },\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='time-slots mt-3'>\r\n                                            <div className=\"label-container\">\r\n                                                <label>Select Your Available Time Slots for a day</label>\r\n                                                <div className=\"reload-container\" onClick={handleTimeSlotReload}>\r\n                                                    <FaRedo className=\"reload-icon\" />\r\n                                                    <span className=\"reload-text\">Uncheck All Slots</span>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"time-slot-container\" >\r\n                                                {timeSlotList.map((item, index) => (\r\n                                                    <button\r\n                                                        key={index}\r\n                                                        type='button'\r\n                                                        className={`time-slot-button ${selectedSlots.includes(item) ? 'selected' : ''}`}\r\n                                                        onClick={() => handleTimeSlotClick(item)}\r\n                                                    >\r\n                                                        {Constants.formatTime(Constants.convertUserTimezoneTime(item.slotStartTime)) + ' - ' + Constants.formatTime(Constants.convertUserTimezoneTime(item.slotEndTime))}\r\n                                                    </button>\r\n                                                ))}\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className='mt-2'>\r\n                                            {updateApprovedInterviewSupportErrMsgDiv &&\r\n                                                <div style={customCssForMsg}>\r\n                                                    <label>{updateApprovedInterviewSupportErrMsg}</label>\r\n                                                </div>}\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            <div className='update-interview-support-button'>\r\n                                <Button\r\n                                    className='dashboard-button'\r\n                                    onClick={handleApprovedUpdateInterviewSupport}\r\n                                >\r\n                                    Update\r\n                                </Button>\r\n                            </div>\r\n                        </Modal.Footer>\r\n                    </Container>\r\n                </Modal>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ExponentApprovedInterviewSupport;\r\n */"],"mappings":"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":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}