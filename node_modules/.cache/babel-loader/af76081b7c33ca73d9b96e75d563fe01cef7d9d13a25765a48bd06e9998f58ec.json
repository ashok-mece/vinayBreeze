{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Documents\\\\prepswisefinalprojects\\\\breeze (15)-frontend\\\\breeze\\\\src\\\\components\\\\dashboard_component\\\\feature_component\\\\admin_feature_component\\\\create_admin_component\\\\CreateAdmin.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport './CreateAdmin.css';\nimport Constants from '../../../../Constants';\nimport UserService from '../../../../../Services/user_service/UserService';\nimport LoadingBar from '../../../../loading_bar_component/LoadingBar';\nimport { Container, Modal } from 'react-bootstrap';\nimport { PhoneInput } from 'react-international-phone';\nimport 'react-international-phone/style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CreateAdmin() {\n  _s();\n  const [loadingBar, setLoadingBar] = useState(false);\n  const [adminForm, setAdminForm] = useState({\n    userFirstname: '',\n    userLastname: '',\n    username: '',\n    password: '',\n    confirmPassword: '',\n    userType: Constants.ADMIN,\n    phoneNumber: '',\n    countryCode: '',\n    phoneNumberWithCountryCode: null,\n    regionCode: ''\n  });\n  const handleCreateAdminFormFields = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setAdminForm({\n      ...adminForm,\n      [name]: value\n    });\n  };\n  const onlyLettersRegex = /^[A-Za-z]+$/;\n  const passwordPatternRegex = /^(?=.*[A-Z])(?=.*[!@#$%^&*])(?=.*\\d).{8,15}$/;\n\n  // phone code\n  const [phone, setPhone] = useState('');\n  const [countryCode, setCountryCode] = useState('');\n  const [phoneWithCountryCode, setPhoneWithCountryCode] = useState(null);\n  const [iso2, setIso2] = useState('');\n  const handleContactInfo = (phone, country) => {\n    const countryCodeWithPlus = '+' + country.country.dialCode;\n    const phoneWithOutCountryCode = phone.replace(countryCodeWithPlus, '');\n    setPhone(phoneWithOutCountryCode);\n    // console.log(country);\n    // console.log(phone.replace(countryCodeWithPlus, ''));\n    // console.log(country.inputValue);\n    // console.log(country.country.dialCode);\n    // console.log(country.country.iso2); // region code\n    setPhoneWithCountryCode(country.inputValue);\n    setCountryCode(country.country.dialCode);\n    setIso2(country.country.iso2);\n  };\n  const handleCreateAdmin = async e => {\n    e.preventDefault();\n    const matchConfirmPassword = adminForm.password === adminForm.confirmPassword;\n    if (!onlyLettersRegex.test(adminForm.userFirstname)) {\n      createAdminDisplayErrMsg(\"First Name is not matching the pattern\");\n    } else if (!onlyLettersRegex.test(adminForm.userLastname)) {\n      createAdminDisplayErrMsg(\"Last Name is not matching the pattern\");\n    } else if (!adminForm.username.slice(-4).includes('.co')) {\n      createAdminDisplayErrMsg(\"Please provide valid mail address\");\n    } else if (phone === null || phone === '' || phone === undefined) {\n      createAdminDisplayErrMsg(\"please enter admin contact information\");\n    } else if (!passwordPatternRegex.test(adminForm.password)) {\n      createAdminDisplayErrMsg(\"Password is not matching the pattern\");\n    } else if (!matchConfirmPassword) {\n      createAdminDisplayErrMsg(\"Confirm Password not matching Password\");\n    } else {\n      setLoadingBar(true);\n      adminForm.phoneNumber = phone;\n      adminForm.countryCode = countryCode;\n      adminForm.phoneNumberWithCountryCode = phoneWithCountryCode;\n      adminForm.regionCode = iso2;\n      console.log(adminForm);\n      try {\n        const responseData = await UserService.createAdmin(adminForm);\n        console.log(responseData);\n        verifyEmailForm.userId = responseData.userId;\n        createAdminDisplaySucMsg('Admin Registered Successfully');\n      } catch (error) {\n        handleCreateAdminError(error.message);\n      } finally {\n        setLoadingBar(false);\n      }\n    }\n  };\n  const handleCreateAdminError = errorStatus => {\n    if (Constants.INVALID_REQUEST_FIELD === errorStatus) createAdminDisplayErrMsg(\"Please enter valid inputs fields\");else if (Constants.EXISTING_USERNAME === errorStatus) createAdminDisplayErrMsg(\"Email-Id is already existed\");else if (Constants.ADDRESS_EXCEPTION === errorStatus) createAdminDisplayErrMsg(\"Please check, Email syntax\");else if (Constants.MESSAGING_EXCEPTION === errorStatus) createAdminDisplayErrMsg(\"Could not sent email, Please try again\");else if (Constants.INVALID_PHONE_NUMBER === errorStatus) createAdminDisplayErrMsg(\"Entered Phone Number is Invalid\");else if (Constants.OTP_NOT_SENT === errorStatus) createAdminDisplayErrMsg(\"Failed to send otp\");else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus) createAdminDisplayErrMsg(\"Sorry, Our service is down\");else createAdminDisplayErrMsg(\"Could not process your request\");\n  };\n  const [showModal, setShowModal] = useState(false);\n  const handleCloseModal = () => {\n    setShowModal(false);\n    window.location.reload();\n  };\n  const [verifyEmailForm, setVerifyEmailForm] = useState({\n    userId: '',\n    emailOtp: ''\n  });\n  const [otpForm, setOtpForm] = useState({\n    contactOtp: '',\n    emailOtp: ''\n  });\n  const handleVerifyEmailFormData = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setOtpForm({\n      ...otpForm,\n      [name]: value\n    });\n  };\n  const verifyEmailSubmitForm = async e => {\n    e.preventDefault();\n    setLoadingBar(true);\n    verifyEmailForm.emailOtp = otpForm.emailOtp + otpForm.contactOtp;\n    try {\n      const responseData = await UserService.verifyAdmin(verifyEmailForm);\n      console.log(responseData);\n      createAdminDisplaySucMsgForEmailVerify(\"OTP Verified Successfully\");\n    } catch (error) {\n      handleVerifyEmailError(error.message);\n    } finally {\n      setLoadingBar(false);\n    }\n  };\n  const handleVerifyEmailError = errorStatus => {\n    if (Constants.INVALID_REQUEST_FIELD === errorStatus) createAdminDisplayErrMsgForEmailVerify(\"Please enter valid inputs fields\");else if (Constants.OTP_NOT_MATCHED_FOR_MAIL === errorStatus) createAdminDisplayErrMsgForEmailVerify(\"Please enter correct OTP for mail\");else if (Constants.OTP_NOT_MATCHED_FOR_CONTACT === errorStatus) createAdminDisplayErrMsgForEmailVerify(\"Please enter correct OTP for contact\");else if (Constants.OTP_NOT_MATCHED === errorStatus) createAdminDisplayErrMsgForEmailVerify(\"Please enter correct OTP\");else if (Constants.ENTITY_NOT_FOUND === errorStatus) createAdminDisplayErrMsgForEmailVerify(\"Your registration is not found\");else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus) createAdminDisplayErrMsgForEmailVerify(\"Sorry, Our service is down\");else createAdminDisplayErrMsgForEmailVerify(\"Could not process your request\");\n  };\n  const [errMsgDiv, setErrMsgDiv] = useState(false);\n  const [errMsg, setErrMsg] = useState(\"\");\n  const [messageColor, setMessageColor] = useState(Constants.MESSAGE_COLOR);\n  const createAdminDisplayErrMsg = errorMessage => {\n    setErrMsg(errorMessage);\n    setErrMsgDiv(true);\n    setTimeout(() => {\n      setErrMsg(\"\");\n      setErrMsgDiv(false);\n    }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\n  };\n  const createAdminDisplaySucMsg = errorMessage => {\n    setErrMsg(errorMessage);\n    setErrMsgDiv(true);\n    setMessageColor('green');\n    setTimeout(() => {\n      setErrMsg(\"\");\n      setErrMsgDiv(false);\n      setMessageColor(Constants.MESSAGE_COLOR);\n      setShowModal(true);\n    }, Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);\n  };\n  const [errMsgDivForEmailVerify, setErrMsgDivForEmailVerify] = useState(false);\n  const [errMsgForEmailVerify, setErrMsgForEmailVerify] = useState(\"\");\n  const createAdminDisplayErrMsgForEmailVerify = errorMessage => {\n    setErrMsgForEmailVerify(errorMessage);\n    setErrMsgDivForEmailVerify(true);\n    setTimeout(() => {\n      setErrMsgForEmailVerify(\"\");\n      setErrMsgDivForEmailVerify(false);\n    }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\n  };\n  const createAdminDisplaySucMsgForEmailVerify = errorMessage => {\n    setErrMsgForEmailVerify(errorMessage);\n    setErrMsgDivForEmailVerify(true);\n    setMessageColor('green');\n    setTimeout(() => {\n      setErrMsgForEmailVerify(\"\");\n      setErrMsgDivForEmailVerify(false);\n      setMessageColor(Constants.MESSAGE_COLOR);\n      handleCloseModal();\n    }, Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);\n  };\n  const customCssForMsg = {\n    fontSize: 'medium',\n    fontWeight: '700',\n    color: messageColor\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"create-admin\",\n    children: [loadingBar && /*#__PURE__*/_jsxDEV(LoadingBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 28\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"admin-form\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleCreateAdmin,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"First Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"form-control\",\n            placeholder: \"First Name\",\n            name: \"userFirstname\",\n            onChange: handleCreateAdminFormFields,\n            type: \"text\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Last Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"form-control\",\n            placeholder: \"Last Name\",\n            name: \"userLastname\",\n            onChange: handleCreateAdminFormFields,\n            type: \"text\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Mail Id\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"form-control\",\n            placeholder: \"Mail Id\",\n            name: \"username\",\n            onChange: handleCreateAdminFormFields,\n            type: \"email\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Contact Info\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(PhoneInput, {\n            forceDialCode: true,\n            onChange: handleContactInfo,\n            inputStyle: {\n              width: '100%'\n            },\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"form-control\",\n            placeholder: \"Password\",\n            name: \"password\",\n            onChange: handleCreateAdminFormFields,\n            type: \"password\",\n            required: true,\n            pattern: \"^(?=.*[A-Z])(?=.*[!@#$%^&*])(?=.*\\\\d).{8,15}$\",\n            title: \"Password should contain 1 uppercase, 1 digit, 1 Special Character, and length between 8-15.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Confirm Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"form-control\",\n            placeholder: \"Confirm Password\",\n            name: \"confirmPassword\",\n            onChange: handleCreateAdminFormFields,\n            type: \"password\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 21\n        }, this), errMsgDiv && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: customCssForMsg,\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: errMsg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-2\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"dashboard-button\",\n            type: \"submit\",\n            children: \"Create\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }, this), showModal && /*#__PURE__*/_jsxDEV(Modal, {\n      className: \"admin-email-verify-modal\",\n      size: \"md\",\n      show: showModal,\n      onHide: handleCloseModal,\n      centered: true,\n      backdrop: \"static\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        className: \"px-5\",\n        children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n          closeButton: true,\n          children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n            style: {\n              fontSize: '18px'\n            },\n            children: \"Verify Email & Contact Number\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: verifyEmailSubmitForm,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"row\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-12\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"Enter OTP sent to Admin Mail Id\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 312,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  className: \"form-control\",\n                  type: \"text\",\n                  name: \"emailOtp\"\n                  // value={verifyEmailForm.emailOtp}\n                  ,\n                  onChange: handleVerifyEmailFormData,\n                  pattern: \"\\\\d{6}\",\n                  required: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 313,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 311,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-12 mt-2\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"Enter OTP sent to Admin Contact Number\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 324,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  className: \"form-control\",\n                  type: \"text\",\n                  name: \"contactOtp\"\n                  // value={verifyEmailForm.emailOtp}\n                  ,\n                  onChange: handleVerifyEmailFormData,\n                  pattern: \"\\\\d{6}\",\n                  required: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 325,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 323,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 33\n            }, this), errMsgDivForEmailVerify && /*#__PURE__*/_jsxDEV(\"div\", {\n              style: customCssForMsg,\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                children: errMsgForEmailVerify\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 338,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"verify-button mt-2\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"submit\",\n                className: \"dashboard-button px-3\",\n                children: \"Verify\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 341,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 340,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 216,\n    columnNumber: 9\n  }, this);\n}\n_s(CreateAdmin, \"GluvAmdXQ7LEFcsWQiL6/6oBr7Y=\");\n_c = CreateAdmin;\nexport default CreateAdmin;\n\n/** ============================================================================================= */\n\n/**\r\n * import { useState } from 'react';\r\nimport './CreateAdmin.css';\r\nimport Constants from '../../../../Constants';\r\nimport UserService from '../../../../../Services/user_service/UserService';\r\nimport LoadingBar from '../../../../loading_bar_component/LoadingBar';\r\nimport { Container, Modal } from 'react-bootstrap';\r\n\r\nfunction CreateAdmin() {\r\n\r\n    const [loadingBar, setLoadingBar] = useState(false);\r\n\r\n    const [adminForm, setAdminForm] = useState({\r\n        userFirstname: '',\r\n        userLastname: '',\r\n        username: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n        userType: Constants.ADMIN,\r\n    });\r\n\r\n    const handleCreateAdminFormFields = (e) => {\r\n        const { name, value } = e.target;\r\n        setAdminForm({\r\n            ...adminForm,\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    const onlyLettersRegex = /^[A-Za-z]+$/;\r\n    const passwordPatternRegex = /^(?=.*[A-Z])(?=.*[!@#$%^&*])(?=.*\\d).{8,15}$/;\r\n\r\n    const handleCreateAdmin = async (e) => {\r\n        e.preventDefault();\r\n        const matchConfirmPassword = adminForm.password === adminForm.confirmPassword;\r\n\r\n        if (!onlyLettersRegex.test(adminForm.userFirstname)) {\r\n            createAdminDisplayErrMsg(\"First Name is not matching the pattern\");\r\n        } else if (!onlyLettersRegex.test(adminForm.userLastname)) {\r\n            createAdminDisplayErrMsg(\"Last Name is not matching the pattern\");\r\n        } else if (!((adminForm.username).slice(-4)).includes('.co')) {\r\n            createAdminDisplayErrMsg(\"Please provide valid mail address\");\r\n        } else if (!passwordPatternRegex.test(adminForm.password)) {\r\n            createAdminDisplayErrMsg(\"Password is not matching the pattern\");\r\n        } else if (!matchConfirmPassword) {\r\n            createAdminDisplayErrMsg(\"Confirm Password not matching Password\");\r\n        } else {\r\n            setLoadingBar(true);\r\n            console.log(adminForm);\r\n            try {\r\n                const responseData = await UserService.registerUser(adminForm);\r\n                console.log(responseData);\r\n                verifyEmailForm.userId = responseData.userId;\r\n                createAdminDisplaySucMsg('Admin Registered Successfully');\r\n            } catch (error) {\r\n                handleCreateAdminError(error.message);\r\n            } finally {\r\n                setLoadingBar(false);\r\n            }\r\n        }\r\n    }\r\n    const handleCreateAdminError = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            createAdminDisplayErrMsg(\"Please enter valid inputs fields\");\r\n        else if (Constants.EXISTING_USERNAME === errorStatus)\r\n            createAdminDisplayErrMsg(\"Email-Id is already existed\");\r\n        else if (Constants.ADDRESS_EXCEPTION === errorStatus)\r\n            createAdminDisplayErrMsg(\"Please check, Email syntax\");\r\n        else if (Constants.MESSAGING_EXCEPTION === errorStatus)\r\n            createAdminDisplayErrMsg(\"Could not sent email, Please try again\");\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            createAdminDisplayErrMsg(\"Sorry, Our service is down\");\r\n        else\r\n            createAdminDisplayErrMsg(\"Could not process your request\");\r\n    }\r\n\r\n    const [showModal, setShowModal] = useState(false);\r\n    const handleCloseModal = () => {\r\n        setShowModal(false);\r\n        window.location.reload();\r\n    }\r\n\r\n    const [verifyEmailForm, setVerifyEmailForm] = useState({\r\n        userId: '',\r\n        emailOtp: ''\r\n    });\r\n    const handleVerifyEmailFormData = (e) => {\r\n        const { name, value } = e.target;\r\n        setVerifyEmailForm({\r\n            ...verifyEmailForm,\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    const verifyEmailSubmitForm = async (e) => {\r\n        e.preventDefault();\r\n        setLoadingBar(true);\r\n        try {\r\n            const responseData = await UserService.verifyEmail(verifyEmailForm);\r\n            console.log(responseData);\r\n            createAdminDisplaySucMsgForEmailVerify(\"OTP Verified Successfully\");\r\n        } catch (error) {\r\n            handleVerifyEmailError(error.message);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    }\r\n    const handleVerifyEmailError = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            createAdminDisplayErrMsgForEmailVerify(\"Please enter valid inputs fields\");\r\n        else if (Constants.OTP_NOT_MATCHED === errorStatus)\r\n            createAdminDisplayErrMsgForEmailVerify(\"Please enter correct OTP\");\r\n        else if (Constants.ENTITY_NOT_FOUND === errorStatus)\r\n            createAdminDisplayErrMsgForEmailVerify(\"Your registration is not found\");\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            createAdminDisplayErrMsgForEmailVerify(\"Sorry, Our service is down\");\r\n        else\r\n            createAdminDisplayErrMsgForEmailVerify(\"Could not process your request\");\r\n    }\r\n\r\n    const [errMsgDiv, setErrMsgDiv] = useState(false);\r\n    const [errMsg, setErrMsg] = useState(\"\");\r\n    const [messageColor, setMessageColor] = useState(Constants.MESSAGE_COLOR);\r\n    const createAdminDisplayErrMsg = (errorMessage) => {\r\n        setErrMsg(errorMessage);\r\n        setErrMsgDiv(true);\r\n        setTimeout(() => {\r\n            setErrMsg(\"\");\r\n            setErrMsgDiv(false);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n    const createAdminDisplaySucMsg = (errorMessage) => {\r\n        setErrMsg(errorMessage);\r\n        setErrMsgDiv(true);\r\n        setMessageColor('green');\r\n        setTimeout(() => {\r\n            setErrMsg(\"\");\r\n            setErrMsgDiv(false);\r\n            setMessageColor(Constants.MESSAGE_COLOR);\r\n            setShowModal(true);\r\n        }, Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);\r\n    }\r\n\r\n    const [errMsgDivForEmailVerify, setErrMsgDivForEmailVerify] = useState(false);\r\n    const [errMsgForEmailVerify, setErrMsgForEmailVerify] = useState(\"\");\r\n    const createAdminDisplayErrMsgForEmailVerify = (errorMessage) => {\r\n        setErrMsgForEmailVerify(errorMessage);\r\n        setErrMsgDivForEmailVerify(true);\r\n        setTimeout(() => {\r\n            setErrMsgForEmailVerify(\"\");\r\n            setErrMsgDivForEmailVerify(false);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n    const createAdminDisplaySucMsgForEmailVerify = (errorMessage) => {\r\n        setErrMsgForEmailVerify(errorMessage);\r\n        setErrMsgDivForEmailVerify(true);\r\n        setMessageColor('green');\r\n        setTimeout(() => {\r\n            setErrMsgForEmailVerify(\"\");\r\n            setErrMsgDivForEmailVerify(false);\r\n            setMessageColor(Constants.MESSAGE_COLOR);\r\n            handleCloseModal();\r\n        }, Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);\r\n    }\r\n\r\n    const customCssForMsg = {\r\n        fontSize: 'medium',\r\n        fontWeight: '700',\r\n        color: messageColor,\r\n    }\r\n\r\n    return (\r\n        <div className='create-admin'>\r\n            {loadingBar && <LoadingBar />}\r\n            <div className='admin-form'>\r\n                <form onSubmit={handleCreateAdmin}>\r\n                    <div>\r\n                        <label>First Name</label>\r\n                        <input\r\n                            className='form-control'\r\n                            placeholder='First Name'\r\n                            name='userFirstname'\r\n                            onChange={handleCreateAdminFormFields}\r\n                            type='text'\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div className='mt-2'>\r\n                        <label>Last Name</label>\r\n                        <input\r\n                            className='form-control'\r\n                            placeholder='Last Name'\r\n                            name='userLastname'\r\n                            onChange={handleCreateAdminFormFields}\r\n                            type='text'\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div className='mt-2'>\r\n                        <label>Mail Id</label>\r\n                        <input\r\n                            className='form-control'\r\n                            placeholder='Mail Id'\r\n                            name='username'\r\n                            onChange={handleCreateAdminFormFields}\r\n                            type='email'\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div className='mt-2'>\r\n                        <label>Password</label>\r\n                        <input\r\n                            className='form-control'\r\n                            placeholder='Password'\r\n                            name='password'\r\n                            onChange={handleCreateAdminFormFields}\r\n                            type='password'\r\n                            required\r\n                            pattern=\"^(?=.*[A-Z])(?=.*[!@#$%^&*])(?=.*\\d).{8,15}$\"\r\n                            title='Password should contain 1 uppercase, 1 digit, 1 Special Character, and length between 8-15.'\r\n                        />\r\n                    </div>\r\n                    <div className='mt-2'>\r\n                        <label>Confirm Password</label>\r\n                        <input\r\n                            className='form-control'\r\n                            placeholder='Confirm Password'\r\n                            name='confirmPassword'\r\n                            onChange={handleCreateAdminFormFields}\r\n                            type='password'\r\n                            required\r\n                        />\r\n                    </div>\r\n                    {errMsgDiv &&\r\n                        <div style={customCssForMsg}>\r\n                            <label>{errMsg}</label>\r\n                        </div>}\r\n                    <div className='mt-2'>\r\n                        <button\r\n                            className='dashboard-button'\r\n                            type='submit'\r\n                        >\r\n                            Create\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            {showModal && (\r\n                <Modal className='admin-email-verify-modal' size='md' show={showModal} onHide={handleCloseModal} centered backdrop=\"static\">\r\n                    <Container className='px-5'>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title style={{ fontSize: '18px' }}>\r\n                                Verify Email\r\n                            </Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <form onSubmit={verifyEmailSubmitForm}>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col\">\r\n                                        <label>Enter OTP sent to Admin Mail Id</label>\r\n                                        <input\r\n                                            className='form-control'\r\n                                            type=\"text\"\r\n                                            name=\"emailOtp\"\r\n                                            value={verifyEmailForm.emailOtp}\r\n                                            onChange={handleVerifyEmailFormData}\r\n                                            pattern=\"\\d{6}\"\r\n                                            required\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                {errMsgDivForEmailVerify &&\r\n                                    <div style={customCssForMsg}>\r\n                                        <label>{errMsgForEmailVerify}</label>\r\n                                    </div>}\r\n                                <div className=\"verify-button mt-2\">\r\n                                    <button type=\"submit\" className=\"dashboard-button px-3\">Verify</button>\r\n                                </div>\r\n                            </form>\r\n                        </Modal.Body>\r\n                    </Container>\r\n                </Modal>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreateAdmin; \r\n */\nvar _c;\n$RefreshReg$(_c, \"CreateAdmin\");","map":{"version":3,"names":["useState","Constants","UserService","LoadingBar","Container","Modal","PhoneInput","jsxDEV","_jsxDEV","CreateAdmin","_s","loadingBar","setLoadingBar","adminForm","setAdminForm","userFirstname","userLastname","username","password","confirmPassword","userType","ADMIN","phoneNumber","countryCode","phoneNumberWithCountryCode","regionCode","handleCreateAdminFormFields","e","name","value","target","onlyLettersRegex","passwordPatternRegex","phone","setPhone","setCountryCode","phoneWithCountryCode","setPhoneWithCountryCode","iso2","setIso2","handleContactInfo","country","countryCodeWithPlus","dialCode","phoneWithOutCountryCode","replace","inputValue","handleCreateAdmin","preventDefault","matchConfirmPassword","test","createAdminDisplayErrMsg","slice","includes","undefined","console","log","responseData","createAdmin","verifyEmailForm","userId","createAdminDisplaySucMsg","error","handleCreateAdminError","message","errorStatus","INVALID_REQUEST_FIELD","EXISTING_USERNAME","ADDRESS_EXCEPTION","MESSAGING_EXCEPTION","INVALID_PHONE_NUMBER","OTP_NOT_SENT","BREEZE_DATABASE_EXCEPTION","showModal","setShowModal","handleCloseModal","window","location","reload","setVerifyEmailForm","emailOtp","otpForm","setOtpForm","contactOtp","handleVerifyEmailFormData","verifyEmailSubmitForm","verifyAdmin","createAdminDisplaySucMsgForEmailVerify","handleVerifyEmailError","createAdminDisplayErrMsgForEmailVerify","OTP_NOT_MATCHED_FOR_MAIL","OTP_NOT_MATCHED_FOR_CONTACT","OTP_NOT_MATCHED","ENTITY_NOT_FOUND","errMsgDiv","setErrMsgDiv","errMsg","setErrMsg","messageColor","setMessageColor","MESSAGE_COLOR","errorMessage","setTimeout","SET_TIME_OUT_FOR_ERROR_MSG","SET_TIME_OUT_FOR_SUCCESS_MSG","errMsgDivForEmailVerify","setErrMsgDivForEmailVerify","errMsgForEmailVerify","setErrMsgForEmailVerify","customCssForMsg","fontSize","fontWeight","color","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","placeholder","onChange","type","required","forceDialCode","inputStyle","width","pattern","title","style","size","show","onHide","centered","backdrop","Header","closeButton","Title","Body","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Documents/prepswisefinalprojects/breeze (15)-frontend/breeze/src/components/dashboard_component/feature_component/admin_feature_component/create_admin_component/CreateAdmin.js"],"sourcesContent":["import { useState } from 'react';\r\nimport './CreateAdmin.css';\r\nimport Constants from '../../../../Constants';\r\nimport UserService from '../../../../../Services/user_service/UserService';\r\nimport LoadingBar from '../../../../loading_bar_component/LoadingBar';\r\nimport { Container, Modal } from 'react-bootstrap';\r\nimport { PhoneInput } from 'react-international-phone';\r\nimport 'react-international-phone/style.css';\r\n\r\nfunction CreateAdmin() {\r\n\r\n    const [loadingBar, setLoadingBar] = useState(false);\r\n\r\n    const [adminForm, setAdminForm] = useState({\r\n        userFirstname: '',\r\n        userLastname: '',\r\n        username: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n        userType: Constants.ADMIN,\r\n        phoneNumber: '',\r\n        countryCode: '',\r\n        phoneNumberWithCountryCode: null,\r\n        regionCode: '',\r\n    });\r\n\r\n    const handleCreateAdminFormFields = (e) => {\r\n        const { name, value } = e.target;\r\n        setAdminForm({\r\n            ...adminForm,\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    const onlyLettersRegex = /^[A-Za-z]+$/;\r\n    const passwordPatternRegex = /^(?=.*[A-Z])(?=.*[!@#$%^&*])(?=.*\\d).{8,15}$/;\r\n\r\n    // phone code\r\n    const [phone, setPhone] = useState('');\r\n    const [countryCode, setCountryCode] = useState('');\r\n    const [phoneWithCountryCode, setPhoneWithCountryCode] = useState(null);\r\n    const [iso2, setIso2] = useState('');\r\n    const handleContactInfo = (phone, country) => {\r\n        const countryCodeWithPlus = '+' + country.country.dialCode;\r\n        const phoneWithOutCountryCode = phone.replace(countryCodeWithPlus, '');\r\n        setPhone(phoneWithOutCountryCode);\r\n        // console.log(country);\r\n        // console.log(phone.replace(countryCodeWithPlus, ''));\r\n        // console.log(country.inputValue);\r\n        // console.log(country.country.dialCode);\r\n        // console.log(country.country.iso2); // region code\r\n        setPhoneWithCountryCode(country.inputValue);\r\n        setCountryCode(country.country.dialCode);\r\n        setIso2(country.country.iso2);\r\n    }\r\n\r\n    const handleCreateAdmin = async (e) => {\r\n        e.preventDefault();\r\n        const matchConfirmPassword = adminForm.password === adminForm.confirmPassword;\r\n\r\n        if (!onlyLettersRegex.test(adminForm.userFirstname)) {\r\n            createAdminDisplayErrMsg(\"First Name is not matching the pattern\");\r\n        } else if (!onlyLettersRegex.test(adminForm.userLastname)) {\r\n            createAdminDisplayErrMsg(\"Last Name is not matching the pattern\");\r\n        } else if (!((adminForm.username).slice(-4)).includes('.co')) {\r\n            createAdminDisplayErrMsg(\"Please provide valid mail address\");\r\n        } else if (phone === null || phone === '' || phone === undefined) {\r\n            createAdminDisplayErrMsg(\"please enter admin contact information\");\r\n        } else if (!passwordPatternRegex.test(adminForm.password)) {\r\n            createAdminDisplayErrMsg(\"Password is not matching the pattern\");\r\n        } else if (!matchConfirmPassword) {\r\n            createAdminDisplayErrMsg(\"Confirm Password not matching Password\");\r\n        } else {\r\n            setLoadingBar(true);\r\n            adminForm.phoneNumber = phone;\r\n            adminForm.countryCode = countryCode;\r\n            adminForm.phoneNumberWithCountryCode = phoneWithCountryCode;\r\n            adminForm.regionCode = iso2;\r\n            console.log(adminForm);\r\n            try {\r\n                const responseData = await UserService.createAdmin(adminForm);\r\n                console.log(responseData);\r\n                verifyEmailForm.userId = responseData.userId;\r\n                createAdminDisplaySucMsg('Admin Registered Successfully');\r\n            } catch (error) {\r\n                handleCreateAdminError(error.message);\r\n            } finally {\r\n                setLoadingBar(false);\r\n            }\r\n        }\r\n    }\r\n    const handleCreateAdminError = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            createAdminDisplayErrMsg(\"Please enter valid inputs fields\");\r\n        else if (Constants.EXISTING_USERNAME === errorStatus)\r\n            createAdminDisplayErrMsg(\"Email-Id is already existed\");\r\n        else if (Constants.ADDRESS_EXCEPTION === errorStatus)\r\n            createAdminDisplayErrMsg(\"Please check, Email syntax\");\r\n        else if (Constants.MESSAGING_EXCEPTION === errorStatus)\r\n            createAdminDisplayErrMsg(\"Could not sent email, Please try again\");\r\n        else if (Constants.INVALID_PHONE_NUMBER === errorStatus)\r\n            createAdminDisplayErrMsg(\"Entered Phone Number is Invalid\");\r\n        else if (Constants.OTP_NOT_SENT === errorStatus)\r\n            createAdminDisplayErrMsg(\"Failed to send otp\");\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            createAdminDisplayErrMsg(\"Sorry, Our service is down\");\r\n        else\r\n            createAdminDisplayErrMsg(\"Could not process your request\");\r\n    }\r\n\r\n    const [showModal, setShowModal] = useState(false);\r\n    const handleCloseModal = () => {\r\n        setShowModal(false);\r\n        window.location.reload();\r\n    }\r\n\r\n    const [verifyEmailForm, setVerifyEmailForm] = useState({\r\n        userId: '',\r\n        emailOtp: ''\r\n    });\r\n    const [otpForm, setOtpForm] = useState({\r\n        contactOtp: '',\r\n        emailOtp: ''\r\n    });\r\n    const handleVerifyEmailFormData = (e) => {\r\n        const { name, value } = e.target;\r\n        setOtpForm({\r\n            ...otpForm,\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    const verifyEmailSubmitForm = async (e) => {\r\n        e.preventDefault();\r\n        setLoadingBar(true);\r\n        verifyEmailForm.emailOtp = otpForm.emailOtp + otpForm.contactOtp;\r\n        try {\r\n            const responseData = await UserService.verifyAdmin(verifyEmailForm);\r\n            console.log(responseData);\r\n            createAdminDisplaySucMsgForEmailVerify(\"OTP Verified Successfully\");\r\n        } catch (error) {\r\n            handleVerifyEmailError(error.message);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    }\r\n    const handleVerifyEmailError = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            createAdminDisplayErrMsgForEmailVerify(\"Please enter valid inputs fields\");\r\n        else if (Constants.OTP_NOT_MATCHED_FOR_MAIL === errorStatus)\r\n            createAdminDisplayErrMsgForEmailVerify(\"Please enter correct OTP for mail\");\r\n        else if (Constants.OTP_NOT_MATCHED_FOR_CONTACT === errorStatus)\r\n            createAdminDisplayErrMsgForEmailVerify(\"Please enter correct OTP for contact\");\r\n        else if (Constants.OTP_NOT_MATCHED === errorStatus)\r\n            createAdminDisplayErrMsgForEmailVerify(\"Please enter correct OTP\");\r\n        else if (Constants.ENTITY_NOT_FOUND === errorStatus)\r\n            createAdminDisplayErrMsgForEmailVerify(\"Your registration is not found\");\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            createAdminDisplayErrMsgForEmailVerify(\"Sorry, Our service is down\");\r\n        else\r\n            createAdminDisplayErrMsgForEmailVerify(\"Could not process your request\");\r\n    }\r\n\r\n    const [errMsgDiv, setErrMsgDiv] = useState(false);\r\n    const [errMsg, setErrMsg] = useState(\"\");\r\n    const [messageColor, setMessageColor] = useState(Constants.MESSAGE_COLOR);\r\n    const createAdminDisplayErrMsg = (errorMessage) => {\r\n        setErrMsg(errorMessage);\r\n        setErrMsgDiv(true);\r\n        setTimeout(() => {\r\n            setErrMsg(\"\");\r\n            setErrMsgDiv(false);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n    const createAdminDisplaySucMsg = (errorMessage) => {\r\n        setErrMsg(errorMessage);\r\n        setErrMsgDiv(true);\r\n        setMessageColor('green');\r\n        setTimeout(() => {\r\n            setErrMsg(\"\");\r\n            setErrMsgDiv(false);\r\n            setMessageColor(Constants.MESSAGE_COLOR);\r\n            setShowModal(true);\r\n        }, Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);\r\n    }\r\n\r\n    const [errMsgDivForEmailVerify, setErrMsgDivForEmailVerify] = useState(false);\r\n    const [errMsgForEmailVerify, setErrMsgForEmailVerify] = useState(\"\");\r\n    const createAdminDisplayErrMsgForEmailVerify = (errorMessage) => {\r\n        setErrMsgForEmailVerify(errorMessage);\r\n        setErrMsgDivForEmailVerify(true);\r\n        setTimeout(() => {\r\n            setErrMsgForEmailVerify(\"\");\r\n            setErrMsgDivForEmailVerify(false);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n    const createAdminDisplaySucMsgForEmailVerify = (errorMessage) => {\r\n        setErrMsgForEmailVerify(errorMessage);\r\n        setErrMsgDivForEmailVerify(true);\r\n        setMessageColor('green');\r\n        setTimeout(() => {\r\n            setErrMsgForEmailVerify(\"\");\r\n            setErrMsgDivForEmailVerify(false);\r\n            setMessageColor(Constants.MESSAGE_COLOR);\r\n            handleCloseModal();\r\n        }, Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);\r\n    }\r\n\r\n    const customCssForMsg = {\r\n        fontSize: 'medium',\r\n        fontWeight: '700',\r\n        color: messageColor,\r\n    }\r\n\r\n    return (\r\n        <div className='create-admin'>\r\n            {loadingBar && <LoadingBar />}\r\n            <div className='admin-form'>\r\n                <form onSubmit={handleCreateAdmin}>\r\n                    <div>\r\n                        <label>First Name</label>\r\n                        <input\r\n                            className='form-control'\r\n                            placeholder='First Name'\r\n                            name='userFirstname'\r\n                            onChange={handleCreateAdminFormFields}\r\n                            type='text'\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div className='mt-2'>\r\n                        <label>Last Name</label>\r\n                        <input\r\n                            className='form-control'\r\n                            placeholder='Last Name'\r\n                            name='userLastname'\r\n                            onChange={handleCreateAdminFormFields}\r\n                            type='text'\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div className='mt-2'>\r\n                        <label>Mail Id</label>\r\n                        <input\r\n                            className='form-control'\r\n                            placeholder='Mail Id'\r\n                            name='username'\r\n                            onChange={handleCreateAdminFormFields}\r\n                            type='email'\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div className='mt-2'>\r\n                        <label>Contact Info</label>\r\n                        <PhoneInput\r\n                            forceDialCode={true}\r\n                            onChange={handleContactInfo}\r\n                            inputStyle={{ width: '100%' }}\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div className='mt-2'>\r\n                        <label>Password</label>\r\n                        <input\r\n                            className='form-control'\r\n                            placeholder='Password'\r\n                            name='password'\r\n                            onChange={handleCreateAdminFormFields}\r\n                            type='password'\r\n                            required\r\n                            pattern=\"^(?=.*[A-Z])(?=.*[!@#$%^&*])(?=.*\\d).{8,15}$\"\r\n                            title='Password should contain 1 uppercase, 1 digit, 1 Special Character, and length between 8-15.'\r\n                        />\r\n                    </div>\r\n                    <div className='mt-2'>\r\n                        <label>Confirm Password</label>\r\n                        <input\r\n                            className='form-control'\r\n                            placeholder='Confirm Password'\r\n                            name='confirmPassword'\r\n                            onChange={handleCreateAdminFormFields}\r\n                            type='password'\r\n                            required\r\n                        />\r\n                    </div>\r\n                    {errMsgDiv &&\r\n                        <div style={customCssForMsg}>\r\n                            <label>{errMsg}</label>\r\n                        </div>}\r\n                    <div className='mt-2'>\r\n                        <button\r\n                            className='dashboard-button'\r\n                            type='submit'\r\n                        >\r\n                            Create\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            {showModal && (\r\n                <Modal className='admin-email-verify-modal' size='md' show={showModal} onHide={handleCloseModal} centered backdrop=\"static\">\r\n                    <Container className='px-5'>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title style={{ fontSize: '18px' }}>\r\n                                Verify Email & Contact Number\r\n                            </Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <form onSubmit={verifyEmailSubmitForm}>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-12\">\r\n                                        <label>Enter OTP sent to Admin Mail Id</label>\r\n                                        <input\r\n                                            className='form-control'\r\n                                            type=\"text\"\r\n                                            name=\"emailOtp\"\r\n                                            // value={verifyEmailForm.emailOtp}\r\n                                            onChange={handleVerifyEmailFormData}\r\n                                            pattern=\"\\d{6}\"\r\n                                            required\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"col-12 mt-2\">\r\n                                        <label>Enter OTP sent to Admin Contact Number</label>\r\n                                        <input\r\n                                            className='form-control'\r\n                                            type=\"text\"\r\n                                            name=\"contactOtp\"\r\n                                            // value={verifyEmailForm.emailOtp}\r\n                                            onChange={handleVerifyEmailFormData}\r\n                                            pattern=\"\\d{6}\"\r\n                                            required\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                {errMsgDivForEmailVerify &&\r\n                                    <div style={customCssForMsg}>\r\n                                        <label>{errMsgForEmailVerify}</label>\r\n                                    </div>}\r\n                                <div className=\"verify-button mt-2\">\r\n                                    <button type=\"submit\" className=\"dashboard-button px-3\">Verify</button>\r\n                                </div>\r\n                            </form>\r\n                        </Modal.Body>\r\n                    </Container>\r\n                </Modal>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreateAdmin;\r\n\r\n/** ============================================================================================= */\r\n\r\n/**\r\n * import { useState } from 'react';\r\nimport './CreateAdmin.css';\r\nimport Constants from '../../../../Constants';\r\nimport UserService from '../../../../../Services/user_service/UserService';\r\nimport LoadingBar from '../../../../loading_bar_component/LoadingBar';\r\nimport { Container, Modal } from 'react-bootstrap';\r\n\r\nfunction CreateAdmin() {\r\n\r\n    const [loadingBar, setLoadingBar] = useState(false);\r\n\r\n    const [adminForm, setAdminForm] = useState({\r\n        userFirstname: '',\r\n        userLastname: '',\r\n        username: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n        userType: Constants.ADMIN,\r\n    });\r\n\r\n    const handleCreateAdminFormFields = (e) => {\r\n        const { name, value } = e.target;\r\n        setAdminForm({\r\n            ...adminForm,\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    const onlyLettersRegex = /^[A-Za-z]+$/;\r\n    const passwordPatternRegex = /^(?=.*[A-Z])(?=.*[!@#$%^&*])(?=.*\\d).{8,15}$/;\r\n\r\n    const handleCreateAdmin = async (e) => {\r\n        e.preventDefault();\r\n        const matchConfirmPassword = adminForm.password === adminForm.confirmPassword;\r\n\r\n        if (!onlyLettersRegex.test(adminForm.userFirstname)) {\r\n            createAdminDisplayErrMsg(\"First Name is not matching the pattern\");\r\n        } else if (!onlyLettersRegex.test(adminForm.userLastname)) {\r\n            createAdminDisplayErrMsg(\"Last Name is not matching the pattern\");\r\n        } else if (!((adminForm.username).slice(-4)).includes('.co')) {\r\n            createAdminDisplayErrMsg(\"Please provide valid mail address\");\r\n        } else if (!passwordPatternRegex.test(adminForm.password)) {\r\n            createAdminDisplayErrMsg(\"Password is not matching the pattern\");\r\n        } else if (!matchConfirmPassword) {\r\n            createAdminDisplayErrMsg(\"Confirm Password not matching Password\");\r\n        } else {\r\n            setLoadingBar(true);\r\n            console.log(adminForm);\r\n            try {\r\n                const responseData = await UserService.registerUser(adminForm);\r\n                console.log(responseData);\r\n                verifyEmailForm.userId = responseData.userId;\r\n                createAdminDisplaySucMsg('Admin Registered Successfully');\r\n            } catch (error) {\r\n                handleCreateAdminError(error.message);\r\n            } finally {\r\n                setLoadingBar(false);\r\n            }\r\n        }\r\n    }\r\n    const handleCreateAdminError = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            createAdminDisplayErrMsg(\"Please enter valid inputs fields\");\r\n        else if (Constants.EXISTING_USERNAME === errorStatus)\r\n            createAdminDisplayErrMsg(\"Email-Id is already existed\");\r\n        else if (Constants.ADDRESS_EXCEPTION === errorStatus)\r\n            createAdminDisplayErrMsg(\"Please check, Email syntax\");\r\n        else if (Constants.MESSAGING_EXCEPTION === errorStatus)\r\n            createAdminDisplayErrMsg(\"Could not sent email, Please try again\");\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            createAdminDisplayErrMsg(\"Sorry, Our service is down\");\r\n        else\r\n            createAdminDisplayErrMsg(\"Could not process your request\");\r\n    }\r\n\r\n    const [showModal, setShowModal] = useState(false);\r\n    const handleCloseModal = () => {\r\n        setShowModal(false);\r\n        window.location.reload();\r\n    }\r\n\r\n    const [verifyEmailForm, setVerifyEmailForm] = useState({\r\n        userId: '',\r\n        emailOtp: ''\r\n    });\r\n    const handleVerifyEmailFormData = (e) => {\r\n        const { name, value } = e.target;\r\n        setVerifyEmailForm({\r\n            ...verifyEmailForm,\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    const verifyEmailSubmitForm = async (e) => {\r\n        e.preventDefault();\r\n        setLoadingBar(true);\r\n        try {\r\n            const responseData = await UserService.verifyEmail(verifyEmailForm);\r\n            console.log(responseData);\r\n            createAdminDisplaySucMsgForEmailVerify(\"OTP Verified Successfully\");\r\n        } catch (error) {\r\n            handleVerifyEmailError(error.message);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    }\r\n    const handleVerifyEmailError = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            createAdminDisplayErrMsgForEmailVerify(\"Please enter valid inputs fields\");\r\n        else if (Constants.OTP_NOT_MATCHED === errorStatus)\r\n            createAdminDisplayErrMsgForEmailVerify(\"Please enter correct OTP\");\r\n        else if (Constants.ENTITY_NOT_FOUND === errorStatus)\r\n            createAdminDisplayErrMsgForEmailVerify(\"Your registration is not found\");\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            createAdminDisplayErrMsgForEmailVerify(\"Sorry, Our service is down\");\r\n        else\r\n            createAdminDisplayErrMsgForEmailVerify(\"Could not process your request\");\r\n    }\r\n\r\n    const [errMsgDiv, setErrMsgDiv] = useState(false);\r\n    const [errMsg, setErrMsg] = useState(\"\");\r\n    const [messageColor, setMessageColor] = useState(Constants.MESSAGE_COLOR);\r\n    const createAdminDisplayErrMsg = (errorMessage) => {\r\n        setErrMsg(errorMessage);\r\n        setErrMsgDiv(true);\r\n        setTimeout(() => {\r\n            setErrMsg(\"\");\r\n            setErrMsgDiv(false);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n    const createAdminDisplaySucMsg = (errorMessage) => {\r\n        setErrMsg(errorMessage);\r\n        setErrMsgDiv(true);\r\n        setMessageColor('green');\r\n        setTimeout(() => {\r\n            setErrMsg(\"\");\r\n            setErrMsgDiv(false);\r\n            setMessageColor(Constants.MESSAGE_COLOR);\r\n            setShowModal(true);\r\n        }, Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);\r\n    }\r\n\r\n    const [errMsgDivForEmailVerify, setErrMsgDivForEmailVerify] = useState(false);\r\n    const [errMsgForEmailVerify, setErrMsgForEmailVerify] = useState(\"\");\r\n    const createAdminDisplayErrMsgForEmailVerify = (errorMessage) => {\r\n        setErrMsgForEmailVerify(errorMessage);\r\n        setErrMsgDivForEmailVerify(true);\r\n        setTimeout(() => {\r\n            setErrMsgForEmailVerify(\"\");\r\n            setErrMsgDivForEmailVerify(false);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n    const createAdminDisplaySucMsgForEmailVerify = (errorMessage) => {\r\n        setErrMsgForEmailVerify(errorMessage);\r\n        setErrMsgDivForEmailVerify(true);\r\n        setMessageColor('green');\r\n        setTimeout(() => {\r\n            setErrMsgForEmailVerify(\"\");\r\n            setErrMsgDivForEmailVerify(false);\r\n            setMessageColor(Constants.MESSAGE_COLOR);\r\n            handleCloseModal();\r\n        }, Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);\r\n    }\r\n\r\n    const customCssForMsg = {\r\n        fontSize: 'medium',\r\n        fontWeight: '700',\r\n        color: messageColor,\r\n    }\r\n\r\n    return (\r\n        <div className='create-admin'>\r\n            {loadingBar && <LoadingBar />}\r\n            <div className='admin-form'>\r\n                <form onSubmit={handleCreateAdmin}>\r\n                    <div>\r\n                        <label>First Name</label>\r\n                        <input\r\n                            className='form-control'\r\n                            placeholder='First Name'\r\n                            name='userFirstname'\r\n                            onChange={handleCreateAdminFormFields}\r\n                            type='text'\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div className='mt-2'>\r\n                        <label>Last Name</label>\r\n                        <input\r\n                            className='form-control'\r\n                            placeholder='Last Name'\r\n                            name='userLastname'\r\n                            onChange={handleCreateAdminFormFields}\r\n                            type='text'\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div className='mt-2'>\r\n                        <label>Mail Id</label>\r\n                        <input\r\n                            className='form-control'\r\n                            placeholder='Mail Id'\r\n                            name='username'\r\n                            onChange={handleCreateAdminFormFields}\r\n                            type='email'\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div className='mt-2'>\r\n                        <label>Password</label>\r\n                        <input\r\n                            className='form-control'\r\n                            placeholder='Password'\r\n                            name='password'\r\n                            onChange={handleCreateAdminFormFields}\r\n                            type='password'\r\n                            required\r\n                            pattern=\"^(?=.*[A-Z])(?=.*[!@#$%^&*])(?=.*\\d).{8,15}$\"\r\n                            title='Password should contain 1 uppercase, 1 digit, 1 Special Character, and length between 8-15.'\r\n                        />\r\n                    </div>\r\n                    <div className='mt-2'>\r\n                        <label>Confirm Password</label>\r\n                        <input\r\n                            className='form-control'\r\n                            placeholder='Confirm Password'\r\n                            name='confirmPassword'\r\n                            onChange={handleCreateAdminFormFields}\r\n                            type='password'\r\n                            required\r\n                        />\r\n                    </div>\r\n                    {errMsgDiv &&\r\n                        <div style={customCssForMsg}>\r\n                            <label>{errMsg}</label>\r\n                        </div>}\r\n                    <div className='mt-2'>\r\n                        <button\r\n                            className='dashboard-button'\r\n                            type='submit'\r\n                        >\r\n                            Create\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            {showModal && (\r\n                <Modal className='admin-email-verify-modal' size='md' show={showModal} onHide={handleCloseModal} centered backdrop=\"static\">\r\n                    <Container className='px-5'>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title style={{ fontSize: '18px' }}>\r\n                                Verify Email\r\n                            </Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <form onSubmit={verifyEmailSubmitForm}>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col\">\r\n                                        <label>Enter OTP sent to Admin Mail Id</label>\r\n                                        <input\r\n                                            className='form-control'\r\n                                            type=\"text\"\r\n                                            name=\"emailOtp\"\r\n                                            value={verifyEmailForm.emailOtp}\r\n                                            onChange={handleVerifyEmailFormData}\r\n                                            pattern=\"\\d{6}\"\r\n                                            required\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                {errMsgDivForEmailVerify &&\r\n                                    <div style={customCssForMsg}>\r\n                                        <label>{errMsgForEmailVerify}</label>\r\n                                    </div>}\r\n                                <div className=\"verify-button mt-2\">\r\n                                    <button type=\"submit\" className=\"dashboard-button px-3\">Verify</button>\r\n                                </div>\r\n                            </form>\r\n                        </Modal.Body>\r\n                    </Container>\r\n                </Modal>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreateAdmin; \r\n */"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}