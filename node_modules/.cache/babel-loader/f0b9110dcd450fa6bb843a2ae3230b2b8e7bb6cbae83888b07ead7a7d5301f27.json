{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Documents\\\\prepswisefinalprojects\\\\breeze(15)-frontend\\\\breeze\\\\src\\\\components\\\\dashboard_component\\\\feature_component\\\\fetchuser\\\\CompanyUsersComponent.js\\\\CompanyUsersComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport AdminService from './AdminService'; // Replace with your actual AdminService import\nimport Constants from './Constants'; // Replace with your constants file import\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CompanyUsersComponent = () => {\n  _s();\n  const [enrolledCandidates, setEnrolledCandidates] = useState([]);\n  const [selectedCompany, setSelectedCompany] = useState(0);\n  const [showEnrolledCandidates, setShowEnrolledCandidates] = useState(false);\n  const [loadingBar, setLoadingBar] = useState(false);\n  const [errorMessageDiv, setErrorMessageDiv] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  useEffect(() => {}, [enrolledCandidates]);\n  const handleCloseCompanyModal = () => {\n    fetchCompaniesData();\n    setShowEnrolledCandidates(false);\n    setSelectedCompany(0);\n    setEnrolledCandidates([]);\n  };\n  const fetchUsersWithCompanyName = async companyId => {\n    setLoadingBar(true);\n    const requestPayload = {\n      companyId: companyId\n    };\n    try {\n      const responseData = await AdminService.fetchCandidatesByCompany(requestPayload);\n      console.log(responseData);\n      if (responseData.length === 0) {\n        displayErrorMessage('Candidates are not found');\n        setEnrolledCandidates(responseData);\n      } else {\n        setEnrolledCandidates(responseData);\n        setSelectedCompany(companyId);\n        setShowEnrolledCandidates(true);\n      }\n    } catch (error) {\n      console.log(error.message);\n      handleFetchCandidatesErrors(error.message, companyId);\n    } finally {\n      setLoadingBar(false);\n    }\n  };\n  const handleFetchCandidatesErrors = (errorStatus, companyId) => {\n    if (Constants.INVALID_REQUEST_FIELD === errorStatus) displayCompanyErrorMessage(\"Selected company is invalid\", companyId);else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus) displayCompanyErrorMessage(\"Sorry, Our service is down\", companyId);else displayCompanyErrorMessage(\"Could not process your request\", companyId);\n  };\n  const candidatesDataTable = () => {\n    const renderCandidateActions = candidateData => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          gap: '10px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this);\n    };\n    const columns = [{\n      label: 'First Name',\n      field: 'userFirstname',\n      width: 150\n    }, {\n      label: 'Last Name',\n      field: 'userLastname',\n      width: 150\n    }, {\n      label: 'Email',\n      field: 'username',\n      width: 200\n    }, {\n      label: 'Phone',\n      field: 'phoneNumberWithCountryCode',\n      width: 150\n    }, {\n      label: 'Gender',\n      field: 'gender',\n      width: 100\n    }];\n    const rows = enrolledCandidates.map(candidate => ({\n      ...candidate,\n      action: renderCandidateActions(candidate)\n    }));\n    return {\n      columns,\n      rows\n    };\n  };\n  const handleErrorMessages = errorStatus => {\n    if (Constants.INVALID_REQUEST_FIELD === errorStatus) displayErrorMessage(\"Inputs are invalid\");else if (Constants.ENTITY_NOT_FOUND === errorStatus) displayErrorMessage(\"Entity Not Found\");else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus) displayErrorMessage(\"Sorry, Our service is down\");else displayErrorMessage(\"Could not process your request\");\n  };\n  const displayErrorMessage = errorMessage => {\n    setErrorMessage(errorMessage);\n    setErrorMessageDiv(true);\n    setTimeout(() => {\n      setErrorMessage(\"\");\n      setErrorMessageDiv(false);\n    }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Company Users\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), errorMessageDiv && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 33\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n};\n_s(CompanyUsersComponent, \"c2VcKSRciaGZDj5vhKKDt1tpFHw=\");\n_c = CompanyUsersComponent;\nexport default CompanyUsersComponent;\nvar _c;\n$RefreshReg$(_c, \"CompanyUsersComponent\");","map":{"version":3,"names":["React","useState","useEffect","AdminService","Constants","jsxDEV","_jsxDEV","CompanyUsersComponent","_s","enrolledCandidates","setEnrolledCandidates","selectedCompany","setSelectedCompany","showEnrolledCandidates","setShowEnrolledCandidates","loadingBar","setLoadingBar","errorMessageDiv","setErrorMessageDiv","errorMessage","setErrorMessage","handleCloseCompanyModal","fetchCompaniesData","fetchUsersWithCompanyName","companyId","requestPayload","responseData","fetchCandidatesByCompany","console","log","length","displayErrorMessage","error","message","handleFetchCandidatesErrors","errorStatus","INVALID_REQUEST_FIELD","displayCompanyErrorMessage","BREEZE_DATABASE_EXCEPTION","candidatesDataTable","renderCandidateActions","candidateData","style","display","gap","fileName","_jsxFileName","lineNumber","columnNumber","columns","label","field","width","rows","map","candidate","action","handleErrorMessages","ENTITY_NOT_FOUND","setTimeout","SET_TIME_OUT_FOR_ERROR_MSG","children","className","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Documents/prepswisefinalprojects/breeze(15)-frontend/breeze/src/components/dashboard_component/feature_component/fetchuser/CompanyUsersComponent.js/CompanyUsersComponent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport AdminService from './AdminService'; // Replace with your actual AdminService import\r\nimport Constants from './Constants'; // Replace with your constants file import\r\n\r\nconst CompanyUsersComponent = () => {\r\n    const [enrolledCandidates, setEnrolledCandidates] = useState([]);\r\n    const [selectedCompany, setSelectedCompany] = useState(0);\r\n    const [showEnrolledCandidates, setShowEnrolledCandidates] = useState(false);\r\n    const [loadingBar, setLoadingBar] = useState(false);\r\n    const [errorMessageDiv, setErrorMessageDiv] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n    useEffect(() => {}, [enrolledCandidates]);\r\n\r\n    const handleCloseCompanyModal = () => {\r\n        fetchCompaniesData();\r\n        setShowEnrolledCandidates(false);\r\n        setSelectedCompany(0);\r\n        setEnrolledCandidates([]);\r\n    };\r\n\r\n    const fetchUsersWithCompanyName = async (companyId) => {\r\n        setLoadingBar(true);\r\n        const requestPayload = {\r\n            companyId: companyId,\r\n        };\r\n        try {\r\n            const responseData = await AdminService.fetchCandidatesByCompany(requestPayload);\r\n            console.log(responseData);\r\n            if (responseData.length === 0) {\r\n                displayErrorMessage('Candidates are not found');\r\n                setEnrolledCandidates(responseData);\r\n            } else {\r\n                setEnrolledCandidates(responseData);\r\n                setSelectedCompany(companyId);\r\n                setShowEnrolledCandidates(true);\r\n            }\r\n        } catch (error) {\r\n            console.log(error.message);\r\n            handleFetchCandidatesErrors(error.message, companyId);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    };\r\n\r\n    const handleFetchCandidatesErrors = (errorStatus, companyId) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            displayCompanyErrorMessage(\"Selected company is invalid\", companyId);\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            displayCompanyErrorMessage(\"Sorry, Our service is down\", companyId);\r\n        else\r\n            displayCompanyErrorMessage(\"Could not process your request\", companyId);\r\n    };\r\n\r\n    const candidatesDataTable = () => {\r\n        const renderCandidateActions = (candidateData) => {\r\n            return (\r\n                <div style={{ display: 'flex', gap: '10px' }}>\r\n                    {/* Removed confirm/withdraw actions */}\r\n                </div>\r\n            );\r\n        };\r\n\r\n        const columns = [\r\n            { label: 'First Name', field: 'userFirstname', width: 150 },\r\n            { label: 'Last Name', field: 'userLastname', width: 150 },\r\n            { label: 'Email', field: 'username', width: 200 },\r\n            { label: 'Phone', field: 'phoneNumberWithCountryCode', width: 150 },\r\n            { label: 'Gender', field: 'gender', width: 100 },\r\n        ];\r\n\r\n        const rows = enrolledCandidates.map((candidate) => ({\r\n            ...candidate,\r\n            action: renderCandidateActions(candidate),\r\n        }));\r\n\r\n        return { columns, rows };\r\n    };\r\n\r\n    const handleErrorMessages = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            displayErrorMessage(\"Inputs are invalid\");\r\n        else if (Constants.ENTITY_NOT_FOUND === errorStatus)\r\n            displayErrorMessage(\"Entity Not Found\");\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            displayErrorMessage(\"Sorry, Our service is down\");\r\n        else displayErrorMessage(\"Could not process your request\");\r\n    };\r\n\r\n    const displayErrorMessage = (errorMessage) => {\r\n        setErrorMessage(errorMessage);\r\n        setErrorMessageDiv(true);\r\n        setTimeout(() => {\r\n            setErrorMessage(\"\");\r\n            setErrorMessageDiv(false);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {/* Replace with your actual UI components */}\r\n            <h1>Company Users</h1>\r\n            {errorMessageDiv && <div className=\"error-message\">{errorMessage}</div>}\r\n            {/* Add UI elements for selecting a company, triggering fetchUsersWithCompanyName, and displaying enrolled candidates */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CompanyUsersComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}