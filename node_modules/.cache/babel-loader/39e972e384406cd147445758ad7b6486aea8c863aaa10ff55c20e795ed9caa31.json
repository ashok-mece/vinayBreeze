{"ast":null,"code":"import'./Register.css';import{useState}from\"react\";import{Dropdown,Form}from'react-bootstrap';import Constants from'../Constants';import UserService from'../../Services/user_service/UserService';import LoadingBar from'../loading_bar_component/LoadingBar';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function RegisterForm(){const[loadingBar,setLoadingBar]=useState(false);//Register Form Data Fields\nconst[registerFormData,setRegisterFormData]=useState({userFirstname:'',userLastname:'',username:'',password:'',confirmPassword:'',userType:'',exponentTypeList:[]});//Fields for dropdown selection\nconst[selectedOptions,setSelectedOptions]=useState([]);const[selectedRadio,setSelectedRadio]=useState('');//Fields for to display err msg div and label\nconst[errMsgDiv,setErrMsgDiv]=useState(false);const[errMsg,setErrMsg]=useState(\"\");//Fields for to display success msg div and label\nconst[sucMsgDiv,setSucMsgDiv]=useState(false);const[sucMsg,setSucMsg]=useState(\"\");//Regular Expressions for form input fields\nconst onlyLettersRegex=/^[A-Za-z]+$/;const passwordPatternRegex=/^(?=.*[A-Z])(?=.*[!@#$%^&*])(?=.*\\d).{8,15}$/;//JS for it will update registerFormData with form inputs\nconst handleRegisterFormData=e=>{const{name,value}=e.target;setRegisterFormData({...registerFormData,[name]:value});};//JS for multiple selection in dropdown\nconst handleCheckboxChange=option=>{const newSelectedOptions=[...selectedOptions];const selectedIndex=newSelectedOptions.indexOf(option);if(selectedIndex===-1){newSelectedOptions.push(option);}else{newSelectedOptions.splice(selectedIndex,1);}setSelectedOptions(newSelectedOptions);setSelectedRadio('');};const handleRadioChange=option=>{setSelectedRadio(option);setSelectedOptions([]);};//JS for inserting selected options in dropdown\nconst innerHtmlButton=()=>{if(selectedOptions.length>0){return selectedOptions.join(', ');}else if(selectedRadio!==''){return selectedRadio;}else{return'How would you like to Register';}};//JS for to display err msg when validation for pattern fails for inputs\nconst registerFormDisplayErrMsg=errorMessage=>{setErrMsg(errorMessage);setErrMsgDiv(true);setTimeout(()=>{setErrMsg(\"\");setErrMsgDiv(false);},Constants.SET_TIME_OUT_FOR_ERROR_MSG);};//JS for to display suc msg when user registered successfully\nconst registerFormDisplaySucMsg=errorMessage=>{setSucMsg(errorMessage);setSucMsgDiv(true);setTimeout(()=>{setSucMsg(\"\");setSucMsgDiv(false);},1500);};//JS for when register form submit button is clicked then it will validate again with regular expression\n//username is not validated here\nconst registerSubmitForm=async e=>{e.preventDefault();const matchConfirmPassword=registerFormData.password===registerFormData.confirmPassword;if(!onlyLettersRegex.test(registerFormData.userFirstname)||registerFormData.userFirstname.length<3){registerFormDisplayErrMsg(\"First Name is not matching the pattern\");}else if(!onlyLettersRegex.test(registerFormData.userLastname)||registerFormData.userLastname.length<3){registerFormDisplayErrMsg(\"Last Name is not matching the pattern\");}else if(!registerFormData.username.slice(-4).includes('.co')){registerFormDisplayErrMsg(\"Please provide valid mail address\");}else if(!passwordPatternRegex.test(registerFormData.password)){registerFormDisplayErrMsg(\"Password is not matching the pattern\");}else if(!matchConfirmPassword){registerFormDisplayErrMsg(\"Confirm Password is not matching given Password\");}else if(selectedOptions.length===0&&selectedRadio===''){registerFormDisplayErrMsg(\"Please check, How you want to Register\");}else{setLoadingBar(true);if(selectedOptions.length>0){registerFormData.exponentTypeList=[...selectedOptions];registerFormData.userType=\"EXPONENT\";}if(selectedRadio!==''){registerFormData.exponentTypeList=[];registerFormData.userType=\"CANDIDATE\";}console.log(registerFormData);try{const responseData=await UserService.registerUser(registerFormData);localStorage.setItem('userId',JSON.stringify(responseData.userId));registerFormDisplaySucMsg('Registered Successfully...');setTimeout(()=>{window.location.href='/verify-email';},1500);}catch(error){handleRegisterUserError(error.message);}finally{setLoadingBar(false);}}};const handleRegisterUserError=errorStatus=>{if(Constants.INVALID_REQUEST_FIELD===errorStatus)registerFormDisplayErrMsg(\"Please enter valid inputs fields\");else if(Constants.EXISTING_USERNAME===errorStatus)registerFormDisplayErrMsg(\"Mail-Id is already existed\");else if(Constants.ADDRESS_EXCEPTION===errorStatus)registerFormDisplayErrMsg(\"Please check, Email syntax\");else if(Constants.MESSAGING_EXCEPTION===errorStatus)registerFormDisplayErrMsg(\"Could not sent mail, Please try again\");else if(Constants.BREEZE_DATABASE_EXCEPTION===errorStatus)registerFormDisplayErrMsg(\"Sorry, Our service is down\");else registerFormDisplayErrMsg(\"Could not process your request\");};//need to display title properly for input password of not matching pattern\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"Register-form-component\",children:[loadingBar&&/*#__PURE__*/_jsx(LoadingBar,{}),/*#__PURE__*/_jsx(\"div\",{className:\"Register-form-heading\",children:/*#__PURE__*/_jsx(\"h2\",{className:\"my-3\",children:\"Registration\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"Register-form\",children:/*#__PURE__*/_jsxs(\"form\",{onSubmit:registerSubmitForm,className:\"form\",children:[/*#__PURE__*/_jsxs(\"div\",{class:\"Register-txt-field\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"userFirstname\",value:registerFormData.userFirstname,onChange:handleRegisterFormData,required:true,pattern:\"[A-Za-z]{3,}\",title:\"Only letters are allowed and minimum length should be 3\"}),/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"label\",{children:\"First Name\"})]}),/*#__PURE__*/_jsxs(\"div\",{class:\"Register-txt-field\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"userLastname\",value:registerFormData.userLastname,onChange:handleRegisterFormData,required:true,pattern:\"[A-Za-z]{3,}\",title:\"Only letters are allowed and minimum length should be 3\"}),/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"label\",{children:\"Last Name\"})]}),/*#__PURE__*/_jsxs(\"div\",{class:\"Register-txt-field\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"email\",name:\"username\",value:registerFormData.username,onChange:handleRegisterFormData,required:true}),/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"label\",{children:\"Mail-Id\"})]}),/*#__PURE__*/_jsxs(\"div\",{class:\"Register-txt-field\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"password\",name:\"password\",value:registerFormData.password,onChange:handleRegisterFormData,required:true,pattern:\"^(?=.*[A-Z])(?=.*[!@#$%^&*])(?=.*\\\\d).{8,15}$\",title:\"Password should contain 1 uppercase, 1 digit, 1 Special Character, and length between 8-15.\"}),/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"label\",{children:\"Password\"})]}),/*#__PURE__*/_jsxs(\"div\",{class:\"Register-txt-field\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"password\",name:\"confirmPassword\",value:registerFormData.confirmPassword,onChange:handleRegisterFormData,required:true}),/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"label\",{children:\"Confirm Password\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"multiSelectDropdownInRegister\",children:/*#__PURE__*/_jsxs(Dropdown,{children:[/*#__PURE__*/_jsx(Dropdown.Toggle,{variant:\"success\",id:\"dropdown-basic\",className:\"Register-dropdown-button\",children:/*#__PURE__*/_jsx(\"span\",{className:\"Text-in-register-dropdown\",children:innerHtmlButton()})}),/*#__PURE__*/_jsx(Dropdown.Menu,{className:\"p-2\",children:/*#__PURE__*/_jsxs(Form,{children:[/*#__PURE__*/_jsx(Form.Check,{type:\"checkbox\",id:\"Trainer\",label:\"Trainer\",checked:selectedOptions.includes(Constants.TRAINER)//'Trainer'\n,onChange:()=>handleCheckboxChange(Constants.TRAINER)}),/*#__PURE__*/_jsx(Form.Check,{type:\"checkbox\",id:\"Job-Support\",label:\"Job-Supporter\",checked:selectedOptions.includes(Constants.JOB_SUPPORTER)//'Job-Support'\n,onChange:()=>handleCheckboxChange(Constants.JOB_SUPPORTER)}),/*#__PURE__*/_jsx(Form.Check,{type:\"checkbox\",id:\"Interview-Support\",label:\"Interview-Supporter\",checked:selectedOptions.includes(Constants.INTERVIEW_SUPPORTER)//'Interview-Support'\n,onChange:()=>handleCheckboxChange(Constants.INTERVIEW_SUPPORTER)}),/*#__PURE__*/_jsx(Form.Check,{type:\"radio\",id:\"Candidate\",label:\"Candidate\",checked:selectedRadio===Constants.CANDIDATE// 'Candidate'\n,onChange:()=>handleRadioChange(Constants.CANDIDATE)})]})})]})}),errMsgDiv&&/*#__PURE__*/_jsx(\"div\",{className:\"Register-div-for-err-msg\",children:/*#__PURE__*/_jsx(\"label\",{children:errMsg})}),sucMsgDiv&&/*#__PURE__*/_jsx(\"div\",{className:\"Register-div-for-suc-msg\",children:/*#__PURE__*/_jsx(\"label\",{children:sucMsg})}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"btn Register-breeze-button px-4\",children:\"Register\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"Register-label-already-have\",children:[\"Already have an account?\\xA0\",/*#__PURE__*/_jsx(\"a\",{href:\"./login\",className:\"Register-anchor-navigate\",children:\"Login\"})]})]})})]});}export default RegisterForm;","map":{"version":3,"names":["useState","Dropdown","Form","Constants","UserService","LoadingBar","jsx","_jsx","jsxs","_jsxs","RegisterForm","loadingBar","setLoadingBar","registerFormData","setRegisterFormData","userFirstname","userLastname","username","password","confirmPassword","userType","exponentTypeList","selectedOptions","setSelectedOptions","selectedRadio","setSelectedRadio","errMsgDiv","setErrMsgDiv","errMsg","setErrMsg","sucMsgDiv","setSucMsgDiv","sucMsg","setSucMsg","onlyLettersRegex","passwordPatternRegex","handleRegisterFormData","e","name","value","target","handleCheckboxChange","option","newSelectedOptions","selectedIndex","indexOf","push","splice","handleRadioChange","innerHtmlButton","length","join","registerFormDisplayErrMsg","errorMessage","setTimeout","SET_TIME_OUT_FOR_ERROR_MSG","registerFormDisplaySucMsg","registerSubmitForm","preventDefault","matchConfirmPassword","test","slice","includes","console","log","responseData","registerUser","localStorage","setItem","JSON","stringify","userId","window","location","href","error","handleRegisterUserError","message","errorStatus","INVALID_REQUEST_FIELD","EXISTING_USERNAME","ADDRESS_EXCEPTION","MESSAGING_EXCEPTION","BREEZE_DATABASE_EXCEPTION","className","children","onSubmit","class","type","onChange","required","pattern","title","Toggle","variant","id","Menu","Check","label","checked","TRAINER","JOB_SUPPORTER","INTERVIEW_SUPPORTER","CANDIDATE"],"sources":["C:/Users/DELL/Documents/prepswisefinalprojects/breeze (15)-frontend/breeze/src/components/register_component/RegisterForm.js"],"sourcesContent":["import './Register.css';\r\nimport { useState } from \"react\";\r\nimport { Dropdown, Form } from 'react-bootstrap';\r\nimport Constants from '../Constants';\r\nimport UserService from '../../Services/user_service/UserService';\r\nimport LoadingBar from '../loading_bar_component/LoadingBar';\r\n\r\nfunction RegisterForm() {\r\n\r\n  const [loadingBar, setLoadingBar] = useState(false);\r\n\r\n  //Register Form Data Fields\r\n  const [registerFormData, setRegisterFormData] = useState({\r\n    userFirstname: '',\r\n    userLastname: '',\r\n    username: '',\r\n    password: '',\r\n    confirmPassword: '',\r\n    userType: '',\r\n    exponentTypeList: []\r\n  });\r\n\r\n  //Fields for dropdown selection\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n  const [selectedRadio, setSelectedRadio] = useState('');\r\n\r\n  //Fields for to display err msg div and label\r\n  const [errMsgDiv, setErrMsgDiv] = useState(false);\r\n  const [errMsg, setErrMsg] = useState(\"\");\r\n\r\n  //Fields for to display success msg div and label\r\n  const [sucMsgDiv, setSucMsgDiv] = useState(false);\r\n  const [sucMsg, setSucMsg] = useState(\"\");\r\n\r\n  //Regular Expressions for form input fields\r\n  const onlyLettersRegex = /^[A-Za-z]+$/;\r\n  const passwordPatternRegex = /^(?=.*[A-Z])(?=.*[!@#$%^&*])(?=.*\\d).{8,15}$/;\r\n\r\n  //JS for it will update registerFormData with form inputs\r\n  const handleRegisterFormData = (e) => {\r\n    const { name, value } = e.target;\r\n    setRegisterFormData({\r\n      ...registerFormData,\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  //JS for multiple selection in dropdown\r\n  const handleCheckboxChange = (option) => {\r\n    const newSelectedOptions = [...selectedOptions];\r\n    const selectedIndex = newSelectedOptions.indexOf(option);\r\n    if (selectedIndex === -1) {\r\n      newSelectedOptions.push(option);\r\n    } else {\r\n      newSelectedOptions.splice(selectedIndex, 1);\r\n    }\r\n    setSelectedOptions(newSelectedOptions);\r\n    setSelectedRadio('');\r\n  };\r\n\r\n  const handleRadioChange = (option) => {\r\n    setSelectedRadio(option);\r\n    setSelectedOptions([]);\r\n  };\r\n\r\n  //JS for inserting selected options in dropdown\r\n  const innerHtmlButton = () => {\r\n    if (selectedOptions.length > 0) {\r\n      return selectedOptions.join(', ');\r\n    } else if (selectedRadio !== '') {\r\n      return selectedRadio;\r\n    } else {\r\n      return 'How would you like to Register';\r\n    }\r\n  };\r\n\r\n  //JS for to display err msg when validation for pattern fails for inputs\r\n  const registerFormDisplayErrMsg = (errorMessage) => {\r\n    setErrMsg(errorMessage);\r\n    setErrMsgDiv(true);\r\n    setTimeout(() => {\r\n      setErrMsg(\"\");\r\n      setErrMsgDiv(false);\r\n    }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n  }\r\n\r\n  //JS for to display suc msg when user registered successfully\r\n  const registerFormDisplaySucMsg = (errorMessage) => {\r\n    setSucMsg(errorMessage);\r\n    setSucMsgDiv(true);\r\n    setTimeout(() => {\r\n      setSucMsg(\"\");\r\n      setSucMsgDiv(false);\r\n    }, 1500);\r\n  }\r\n\r\n  //JS for when register form submit button is clicked then it will validate again with regular expression\r\n  //username is not validated here\r\n  const registerSubmitForm = async (e) => {\r\n    e.preventDefault();\r\n    const matchConfirmPassword = registerFormData.password === registerFormData.confirmPassword;\r\n\r\n    if (!onlyLettersRegex.test(registerFormData.userFirstname) || registerFormData.userFirstname.length < 3) {\r\n      registerFormDisplayErrMsg(\"First Name is not matching the pattern\");\r\n    } else if (!onlyLettersRegex.test(registerFormData.userLastname) || registerFormData.userLastname.length < 3) {\r\n      registerFormDisplayErrMsg(\"Last Name is not matching the pattern\");\r\n    } else if (!((registerFormData.username).slice(-4)).includes('.co')) {\r\n      registerFormDisplayErrMsg(\"Please provide valid mail address\");\r\n    } else if (!passwordPatternRegex.test(registerFormData.password)) {\r\n      registerFormDisplayErrMsg(\"Password is not matching the pattern\");\r\n    } else if (!matchConfirmPassword) {\r\n      registerFormDisplayErrMsg(\"Confirm Password is not matching given Password\");\r\n    } else if (selectedOptions.length === 0 && selectedRadio === '') {\r\n      registerFormDisplayErrMsg(\"Please check, How you want to Register\");\r\n    } else {\r\n      setLoadingBar(true);\r\n      if (selectedOptions.length > 0) {\r\n        registerFormData.exponentTypeList = [...selectedOptions];\r\n        registerFormData.userType = \"EXPONENT\";\r\n      }\r\n      if (selectedRadio !== '') {\r\n        registerFormData.exponentTypeList = [];\r\n        registerFormData.userType = \"CANDIDATE\";\r\n      }\r\n      console.log(registerFormData);\r\n\r\n      try {\r\n        const responseData = await UserService.registerUser(registerFormData);\r\n        localStorage.setItem('userId', JSON.stringify(responseData.userId));\r\n        registerFormDisplaySucMsg('Registered Successfully...');\r\n        setTimeout(() => {\r\n          window.location.href = '/verify-email';\r\n        }, 1500);\r\n      } catch (error) {\r\n        handleRegisterUserError(error.message);\r\n      } finally {\r\n        setLoadingBar(false);\r\n      }\r\n\r\n    }\r\n\r\n  };\r\n\r\n  const handleRegisterUserError = (errorStatus) => {\r\n    if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n      registerFormDisplayErrMsg(\"Please enter valid inputs fields\");\r\n    else if (Constants.EXISTING_USERNAME === errorStatus)\r\n      registerFormDisplayErrMsg(\"Mail-Id is already existed\");\r\n    else if (Constants.ADDRESS_EXCEPTION === errorStatus)\r\n      registerFormDisplayErrMsg(\"Please check, Email syntax\");\r\n    else if (Constants.MESSAGING_EXCEPTION === errorStatus)\r\n      registerFormDisplayErrMsg(\"Could not sent mail, Please try again\");\r\n    else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n      registerFormDisplayErrMsg(\"Sorry, Our service is down\");\r\n    else\r\n      registerFormDisplayErrMsg(\"Could not process your request\");\r\n  }\r\n\r\n  //need to display title properly for input password of not matching pattern\r\n  return (\r\n    <div className=\"Register-form-component\">\r\n      {loadingBar && <LoadingBar />}\r\n      <div className=\"Register-form-heading\">\r\n        <h2 className='my-3'>Registration</h2>\r\n      </div>\r\n      <div className=\"Register-form\">\r\n        <form onSubmit={registerSubmitForm} className=\"form\" >\r\n          <div class=\"Register-txt-field\">\r\n            <input type=\"text\" name=\"userFirstname\" value={registerFormData.userFirstname} onChange={handleRegisterFormData} required\r\n              pattern=\"[A-Za-z]{3,}\" title=\"Only letters are allowed and minimum length should be 3\" />\r\n            <span></span>\r\n            <label>First Name</label>\r\n          </div>\r\n          <div class=\"Register-txt-field\">\r\n            <input type=\"text\" name=\"userLastname\" value={registerFormData.userLastname} onChange={handleRegisterFormData} required\r\n              pattern=\"[A-Za-z]{3,}\" title=\"Only letters are allowed and minimum length should be 3\" />\r\n            <span></span>\r\n            <label>Last Name</label>\r\n          </div>\r\n          <div class=\"Register-txt-field\">\r\n            <input type=\"email\" name=\"username\" value={registerFormData.username} onChange={handleRegisterFormData} required />\r\n            <span></span>\r\n            <label>Mail-Id</label>\r\n          </div>\r\n          <div class=\"Register-txt-field\">\r\n            <input type=\"password\" name=\"password\" value={registerFormData.password} onChange={handleRegisterFormData} required\r\n              pattern=\"^(?=.*[A-Z])(?=.*[!@#$%^&*])(?=.*\\d).{8,15}$\" title='Password should contain 1 uppercase, 1 digit, 1 Special Character, and length between 8-15.' />\r\n            <span></span>\r\n            <label>Password</label>\r\n          </div>\r\n          <div class=\"Register-txt-field\">\r\n            <input type=\"password\" name=\"confirmPassword\" value={registerFormData.confirmPassword} onChange={handleRegisterFormData} required />\r\n            <span></span>\r\n            <label>Confirm Password</label>\r\n          </div>\r\n          <div className=\"multiSelectDropdownInRegister\">\r\n            <Dropdown>\r\n              <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\" className=\"Register-dropdown-button\">\r\n                <span className=\"Text-in-register-dropdown\">{innerHtmlButton()}</span>\r\n              </Dropdown.Toggle>\r\n\r\n              <Dropdown.Menu className=\"p-2\" >\r\n                <Form>\r\n                  <Form.Check\r\n                    type=\"checkbox\"\r\n                    id=\"Trainer\"\r\n                    label=\"Trainer\"\r\n                    checked={selectedOptions.includes(Constants.TRAINER)} //'Trainer'\r\n                    onChange={() => handleCheckboxChange(Constants.TRAINER)}\r\n                  />\r\n                  <Form.Check\r\n                    type=\"checkbox\"\r\n                    id=\"Job-Support\"\r\n                    label=\"Job-Supporter\"\r\n                    checked={selectedOptions.includes(Constants.JOB_SUPPORTER)} //'Job-Support'\r\n                    onChange={() => handleCheckboxChange(Constants.JOB_SUPPORTER)}\r\n                  />\r\n                  <Form.Check\r\n                    type=\"checkbox\"\r\n                    id=\"Interview-Support\"\r\n                    label=\"Interview-Supporter\"\r\n                    checked={selectedOptions.includes(Constants.INTERVIEW_SUPPORTER)} //'Interview-Support'\r\n                    onChange={() => handleCheckboxChange(Constants.INTERVIEW_SUPPORTER)}\r\n                  />\r\n                  <Form.Check\r\n                    type=\"radio\"\r\n                    id=\"Candidate\"\r\n                    label=\"Candidate\"\r\n                    checked={selectedRadio === Constants.CANDIDATE} // 'Candidate'\r\n                    onChange={() => handleRadioChange(Constants.CANDIDATE)}\r\n                  />\r\n                </Form>\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </div>\r\n          {errMsgDiv &&\r\n            <div className=\"Register-div-for-err-msg\">\r\n              <label>{errMsg}</label>\r\n            </div>}\r\n          {sucMsgDiv &&\r\n            <div className=\"Register-div-for-suc-msg\">\r\n              <label>{sucMsg}</label>\r\n            </div>}\r\n          <div><button type=\"submit\" className=\"btn Register-breeze-button px-4\" >Register</button></div>\r\n          <div className=\"Register-label-already-have\">\r\n            Already have an account?&nbsp;\r\n            <a href=\"./login\" className=\"Register-anchor-navigate\" >Login</a>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RegisterForm;\r\n"],"mappings":"AAAA,MAAO,gBAAgB,CACvB,OAASA,QAAQ,KAAQ,OAAO,CAChC,OAASC,QAAQ,CAAEC,IAAI,KAAQ,iBAAiB,CAChD,MAAO,CAAAC,SAAS,KAAM,cAAc,CACpC,MAAO,CAAAC,WAAW,KAAM,yCAAyC,CACjE,MAAO,CAAAC,UAAU,KAAM,qCAAqC,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAE7D,QAAS,CAAAC,YAAYA,CAAA,CAAG,CAEtB,KAAM,CAACC,UAAU,CAAEC,aAAa,CAAC,CAAGZ,QAAQ,CAAC,KAAK,CAAC,CAEnD;AACA,KAAM,CAACa,gBAAgB,CAAEC,mBAAmB,CAAC,CAAGd,QAAQ,CAAC,CACvDe,aAAa,CAAE,EAAE,CACjBC,YAAY,CAAE,EAAE,CAChBC,QAAQ,CAAE,EAAE,CACZC,QAAQ,CAAE,EAAE,CACZC,eAAe,CAAE,EAAE,CACnBC,QAAQ,CAAE,EAAE,CACZC,gBAAgB,CAAE,EACpB,CAAC,CAAC,CAEF;AACA,KAAM,CAACC,eAAe,CAAEC,kBAAkB,CAAC,CAAGvB,QAAQ,CAAC,EAAE,CAAC,CAC1D,KAAM,CAACwB,aAAa,CAAEC,gBAAgB,CAAC,CAAGzB,QAAQ,CAAC,EAAE,CAAC,CAEtD;AACA,KAAM,CAAC0B,SAAS,CAAEC,YAAY,CAAC,CAAG3B,QAAQ,CAAC,KAAK,CAAC,CACjD,KAAM,CAAC4B,MAAM,CAAEC,SAAS,CAAC,CAAG7B,QAAQ,CAAC,EAAE,CAAC,CAExC;AACA,KAAM,CAAC8B,SAAS,CAAEC,YAAY,CAAC,CAAG/B,QAAQ,CAAC,KAAK,CAAC,CACjD,KAAM,CAACgC,MAAM,CAAEC,SAAS,CAAC,CAAGjC,QAAQ,CAAC,EAAE,CAAC,CAExC;AACA,KAAM,CAAAkC,gBAAgB,CAAG,aAAa,CACtC,KAAM,CAAAC,oBAAoB,CAAG,8CAA8C,CAE3E;AACA,KAAM,CAAAC,sBAAsB,CAAIC,CAAC,EAAK,CACpC,KAAM,CAAEC,IAAI,CAAEC,KAAM,CAAC,CAAGF,CAAC,CAACG,MAAM,CAChC1B,mBAAmB,CAAC,CAClB,GAAGD,gBAAgB,CACnB,CAACyB,IAAI,EAAGC,KACV,CAAC,CAAC,CACJ,CAAC,CAED;AACA,KAAM,CAAAE,oBAAoB,CAAIC,MAAM,EAAK,CACvC,KAAM,CAAAC,kBAAkB,CAAG,CAAC,GAAGrB,eAAe,CAAC,CAC/C,KAAM,CAAAsB,aAAa,CAAGD,kBAAkB,CAACE,OAAO,CAACH,MAAM,CAAC,CACxD,GAAIE,aAAa,GAAK,CAAC,CAAC,CAAE,CACxBD,kBAAkB,CAACG,IAAI,CAACJ,MAAM,CAAC,CACjC,CAAC,IAAM,CACLC,kBAAkB,CAACI,MAAM,CAACH,aAAa,CAAE,CAAC,CAAC,CAC7C,CACArB,kBAAkB,CAACoB,kBAAkB,CAAC,CACtClB,gBAAgB,CAAC,EAAE,CAAC,CACtB,CAAC,CAED,KAAM,CAAAuB,iBAAiB,CAAIN,MAAM,EAAK,CACpCjB,gBAAgB,CAACiB,MAAM,CAAC,CACxBnB,kBAAkB,CAAC,EAAE,CAAC,CACxB,CAAC,CAED;AACA,KAAM,CAAA0B,eAAe,CAAGA,CAAA,GAAM,CAC5B,GAAI3B,eAAe,CAAC4B,MAAM,CAAG,CAAC,CAAE,CAC9B,MAAO,CAAA5B,eAAe,CAAC6B,IAAI,CAAC,IAAI,CAAC,CACnC,CAAC,IAAM,IAAI3B,aAAa,GAAK,EAAE,CAAE,CAC/B,MAAO,CAAAA,aAAa,CACtB,CAAC,IAAM,CACL,MAAO,gCAAgC,CACzC,CACF,CAAC,CAED;AACA,KAAM,CAAA4B,yBAAyB,CAAIC,YAAY,EAAK,CAClDxB,SAAS,CAACwB,YAAY,CAAC,CACvB1B,YAAY,CAAC,IAAI,CAAC,CAClB2B,UAAU,CAAC,IAAM,CACfzB,SAAS,CAAC,EAAE,CAAC,CACbF,YAAY,CAAC,KAAK,CAAC,CACrB,CAAC,CAAExB,SAAS,CAACoD,0BAA0B,CAAC,CAC1C,CAAC,CAED;AACA,KAAM,CAAAC,yBAAyB,CAAIH,YAAY,EAAK,CAClDpB,SAAS,CAACoB,YAAY,CAAC,CACvBtB,YAAY,CAAC,IAAI,CAAC,CAClBuB,UAAU,CAAC,IAAM,CACfrB,SAAS,CAAC,EAAE,CAAC,CACbF,YAAY,CAAC,KAAK,CAAC,CACrB,CAAC,CAAE,IAAI,CAAC,CACV,CAAC,CAED;AACA;AACA,KAAM,CAAA0B,kBAAkB,CAAG,KAAO,CAAApB,CAAC,EAAK,CACtCA,CAAC,CAACqB,cAAc,CAAC,CAAC,CAClB,KAAM,CAAAC,oBAAoB,CAAG9C,gBAAgB,CAACK,QAAQ,GAAKL,gBAAgB,CAACM,eAAe,CAE3F,GAAI,CAACe,gBAAgB,CAAC0B,IAAI,CAAC/C,gBAAgB,CAACE,aAAa,CAAC,EAAIF,gBAAgB,CAACE,aAAa,CAACmC,MAAM,CAAG,CAAC,CAAE,CACvGE,yBAAyB,CAAC,wCAAwC,CAAC,CACrE,CAAC,IAAM,IAAI,CAAClB,gBAAgB,CAAC0B,IAAI,CAAC/C,gBAAgB,CAACG,YAAY,CAAC,EAAIH,gBAAgB,CAACG,YAAY,CAACkC,MAAM,CAAG,CAAC,CAAE,CAC5GE,yBAAyB,CAAC,uCAAuC,CAAC,CACpE,CAAC,IAAM,IAAI,CAAGvC,gBAAgB,CAACI,QAAQ,CAAE4C,KAAK,CAAC,CAAC,CAAC,CAAC,CAAEC,QAAQ,CAAC,KAAK,CAAC,CAAE,CACnEV,yBAAyB,CAAC,mCAAmC,CAAC,CAChE,CAAC,IAAM,IAAI,CAACjB,oBAAoB,CAACyB,IAAI,CAAC/C,gBAAgB,CAACK,QAAQ,CAAC,CAAE,CAChEkC,yBAAyB,CAAC,sCAAsC,CAAC,CACnE,CAAC,IAAM,IAAI,CAACO,oBAAoB,CAAE,CAChCP,yBAAyB,CAAC,iDAAiD,CAAC,CAC9E,CAAC,IAAM,IAAI9B,eAAe,CAAC4B,MAAM,GAAK,CAAC,EAAI1B,aAAa,GAAK,EAAE,CAAE,CAC/D4B,yBAAyB,CAAC,wCAAwC,CAAC,CACrE,CAAC,IAAM,CACLxC,aAAa,CAAC,IAAI,CAAC,CACnB,GAAIU,eAAe,CAAC4B,MAAM,CAAG,CAAC,CAAE,CAC9BrC,gBAAgB,CAACQ,gBAAgB,CAAG,CAAC,GAAGC,eAAe,CAAC,CACxDT,gBAAgB,CAACO,QAAQ,CAAG,UAAU,CACxC,CACA,GAAII,aAAa,GAAK,EAAE,CAAE,CACxBX,gBAAgB,CAACQ,gBAAgB,CAAG,EAAE,CACtCR,gBAAgB,CAACO,QAAQ,CAAG,WAAW,CACzC,CACA2C,OAAO,CAACC,GAAG,CAACnD,gBAAgB,CAAC,CAE7B,GAAI,CACF,KAAM,CAAAoD,YAAY,CAAG,KAAM,CAAA7D,WAAW,CAAC8D,YAAY,CAACrD,gBAAgB,CAAC,CACrEsD,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAEC,IAAI,CAACC,SAAS,CAACL,YAAY,CAACM,MAAM,CAAC,CAAC,CACnEf,yBAAyB,CAAC,4BAA4B,CAAC,CACvDF,UAAU,CAAC,IAAM,CACfkB,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAG,eAAe,CACxC,CAAC,CAAE,IAAI,CAAC,CACV,CAAE,MAAOC,KAAK,CAAE,CACdC,uBAAuB,CAACD,KAAK,CAACE,OAAO,CAAC,CACxC,CAAC,OAAS,CACRjE,aAAa,CAAC,KAAK,CAAC,CACtB,CAEF,CAEF,CAAC,CAED,KAAM,CAAAgE,uBAAuB,CAAIE,WAAW,EAAK,CAC/C,GAAI3E,SAAS,CAAC4E,qBAAqB,GAAKD,WAAW,CACjD1B,yBAAyB,CAAC,kCAAkC,CAAC,CAAC,IAC3D,IAAIjD,SAAS,CAAC6E,iBAAiB,GAAKF,WAAW,CAClD1B,yBAAyB,CAAC,4BAA4B,CAAC,CAAC,IACrD,IAAIjD,SAAS,CAAC8E,iBAAiB,GAAKH,WAAW,CAClD1B,yBAAyB,CAAC,4BAA4B,CAAC,CAAC,IACrD,IAAIjD,SAAS,CAAC+E,mBAAmB,GAAKJ,WAAW,CACpD1B,yBAAyB,CAAC,uCAAuC,CAAC,CAAC,IAChE,IAAIjD,SAAS,CAACgF,yBAAyB,GAAKL,WAAW,CAC1D1B,yBAAyB,CAAC,4BAA4B,CAAC,CAAC,IAExD,CAAAA,yBAAyB,CAAC,gCAAgC,CAAC,CAC/D,CAAC,CAED;AACA,mBACE3C,KAAA,QAAK2E,SAAS,CAAC,yBAAyB,CAAAC,QAAA,EACrC1E,UAAU,eAAIJ,IAAA,CAACF,UAAU,GAAE,CAAC,cAC7BE,IAAA,QAAK6E,SAAS,CAAC,uBAAuB,CAAAC,QAAA,cACpC9E,IAAA,OAAI6E,SAAS,CAAC,MAAM,CAAAC,QAAA,CAAC,cAAY,CAAI,CAAC,CACnC,CAAC,cACN9E,IAAA,QAAK6E,SAAS,CAAC,eAAe,CAAAC,QAAA,cAC5B5E,KAAA,SAAM6E,QAAQ,CAAE7B,kBAAmB,CAAC2B,SAAS,CAAC,MAAM,CAAAC,QAAA,eAClD5E,KAAA,QAAK8E,KAAK,CAAC,oBAAoB,CAAAF,QAAA,eAC7B9E,IAAA,UAAOiF,IAAI,CAAC,MAAM,CAAClD,IAAI,CAAC,eAAe,CAACC,KAAK,CAAE1B,gBAAgB,CAACE,aAAc,CAAC0E,QAAQ,CAAErD,sBAAuB,CAACsD,QAAQ,MACvHC,OAAO,CAAC,cAAc,CAACC,KAAK,CAAC,yDAAyD,CAAE,CAAC,cAC3FrF,IAAA,UAAY,CAAC,cACbA,IAAA,UAAA8E,QAAA,CAAO,YAAU,CAAO,CAAC,EACtB,CAAC,cACN5E,KAAA,QAAK8E,KAAK,CAAC,oBAAoB,CAAAF,QAAA,eAC7B9E,IAAA,UAAOiF,IAAI,CAAC,MAAM,CAAClD,IAAI,CAAC,cAAc,CAACC,KAAK,CAAE1B,gBAAgB,CAACG,YAAa,CAACyE,QAAQ,CAAErD,sBAAuB,CAACsD,QAAQ,MACrHC,OAAO,CAAC,cAAc,CAACC,KAAK,CAAC,yDAAyD,CAAE,CAAC,cAC3FrF,IAAA,UAAY,CAAC,cACbA,IAAA,UAAA8E,QAAA,CAAO,WAAS,CAAO,CAAC,EACrB,CAAC,cACN5E,KAAA,QAAK8E,KAAK,CAAC,oBAAoB,CAAAF,QAAA,eAC7B9E,IAAA,UAAOiF,IAAI,CAAC,OAAO,CAAClD,IAAI,CAAC,UAAU,CAACC,KAAK,CAAE1B,gBAAgB,CAACI,QAAS,CAACwE,QAAQ,CAAErD,sBAAuB,CAACsD,QAAQ,MAAE,CAAC,cACnHnF,IAAA,UAAY,CAAC,cACbA,IAAA,UAAA8E,QAAA,CAAO,SAAO,CAAO,CAAC,EACnB,CAAC,cACN5E,KAAA,QAAK8E,KAAK,CAAC,oBAAoB,CAAAF,QAAA,eAC7B9E,IAAA,UAAOiF,IAAI,CAAC,UAAU,CAAClD,IAAI,CAAC,UAAU,CAACC,KAAK,CAAE1B,gBAAgB,CAACK,QAAS,CAACuE,QAAQ,CAAErD,sBAAuB,CAACsD,QAAQ,MACjHC,OAAO,CAAC,+CAA8C,CAACC,KAAK,CAAC,6FAA6F,CAAE,CAAC,cAC/JrF,IAAA,UAAY,CAAC,cACbA,IAAA,UAAA8E,QAAA,CAAO,UAAQ,CAAO,CAAC,EACpB,CAAC,cACN5E,KAAA,QAAK8E,KAAK,CAAC,oBAAoB,CAAAF,QAAA,eAC7B9E,IAAA,UAAOiF,IAAI,CAAC,UAAU,CAAClD,IAAI,CAAC,iBAAiB,CAACC,KAAK,CAAE1B,gBAAgB,CAACM,eAAgB,CAACsE,QAAQ,CAAErD,sBAAuB,CAACsD,QAAQ,MAAE,CAAC,cACpInF,IAAA,UAAY,CAAC,cACbA,IAAA,UAAA8E,QAAA,CAAO,kBAAgB,CAAO,CAAC,EAC5B,CAAC,cACN9E,IAAA,QAAK6E,SAAS,CAAC,+BAA+B,CAAAC,QAAA,cAC5C5E,KAAA,CAACR,QAAQ,EAAAoF,QAAA,eACP9E,IAAA,CAACN,QAAQ,CAAC4F,MAAM,EAACC,OAAO,CAAC,SAAS,CAACC,EAAE,CAAC,gBAAgB,CAACX,SAAS,CAAC,0BAA0B,CAAAC,QAAA,cACzF9E,IAAA,SAAM6E,SAAS,CAAC,2BAA2B,CAAAC,QAAA,CAAEpC,eAAe,CAAC,CAAC,CAAO,CAAC,CACvD,CAAC,cAElB1C,IAAA,CAACN,QAAQ,CAAC+F,IAAI,EAACZ,SAAS,CAAC,KAAK,CAAAC,QAAA,cAC5B5E,KAAA,CAACP,IAAI,EAAAmF,QAAA,eACH9E,IAAA,CAACL,IAAI,CAAC+F,KAAK,EACTT,IAAI,CAAC,UAAU,CACfO,EAAE,CAAC,SAAS,CACZG,KAAK,CAAC,SAAS,CACfC,OAAO,CAAE7E,eAAe,CAACwC,QAAQ,CAAC3D,SAAS,CAACiG,OAAO,CAAG;AAAA,CACtDX,QAAQ,CAAEA,CAAA,GAAMhD,oBAAoB,CAACtC,SAAS,CAACiG,OAAO,CAAE,CACzD,CAAC,cACF7F,IAAA,CAACL,IAAI,CAAC+F,KAAK,EACTT,IAAI,CAAC,UAAU,CACfO,EAAE,CAAC,aAAa,CAChBG,KAAK,CAAC,eAAe,CACrBC,OAAO,CAAE7E,eAAe,CAACwC,QAAQ,CAAC3D,SAAS,CAACkG,aAAa,CAAG;AAAA,CAC5DZ,QAAQ,CAAEA,CAAA,GAAMhD,oBAAoB,CAACtC,SAAS,CAACkG,aAAa,CAAE,CAC/D,CAAC,cACF9F,IAAA,CAACL,IAAI,CAAC+F,KAAK,EACTT,IAAI,CAAC,UAAU,CACfO,EAAE,CAAC,mBAAmB,CACtBG,KAAK,CAAC,qBAAqB,CAC3BC,OAAO,CAAE7E,eAAe,CAACwC,QAAQ,CAAC3D,SAAS,CAACmG,mBAAmB,CAAG;AAAA,CAClEb,QAAQ,CAAEA,CAAA,GAAMhD,oBAAoB,CAACtC,SAAS,CAACmG,mBAAmB,CAAE,CACrE,CAAC,cACF/F,IAAA,CAACL,IAAI,CAAC+F,KAAK,EACTT,IAAI,CAAC,OAAO,CACZO,EAAE,CAAC,WAAW,CACdG,KAAK,CAAC,WAAW,CACjBC,OAAO,CAAE3E,aAAa,GAAKrB,SAAS,CAACoG,SAAW;AAAA,CAChDd,QAAQ,CAAEA,CAAA,GAAMzC,iBAAiB,CAAC7C,SAAS,CAACoG,SAAS,CAAE,CACxD,CAAC,EACE,CAAC,CACM,CAAC,EACR,CAAC,CACR,CAAC,CACL7E,SAAS,eACRnB,IAAA,QAAK6E,SAAS,CAAC,0BAA0B,CAAAC,QAAA,cACvC9E,IAAA,UAAA8E,QAAA,CAAQzD,MAAM,CAAQ,CAAC,CACpB,CAAC,CACPE,SAAS,eACRvB,IAAA,QAAK6E,SAAS,CAAC,0BAA0B,CAAAC,QAAA,cACvC9E,IAAA,UAAA8E,QAAA,CAAQrD,MAAM,CAAQ,CAAC,CACpB,CAAC,cACRzB,IAAA,QAAA8E,QAAA,cAAK9E,IAAA,WAAQiF,IAAI,CAAC,QAAQ,CAACJ,SAAS,CAAC,iCAAiC,CAAAC,QAAA,CAAE,UAAQ,CAAQ,CAAC,CAAK,CAAC,cAC/F5E,KAAA,QAAK2E,SAAS,CAAC,6BAA6B,CAAAC,QAAA,EAAC,8BAE3C,cAAA9E,IAAA,MAAGmE,IAAI,CAAC,SAAS,CAACU,SAAS,CAAC,0BAA0B,CAAAC,QAAA,CAAE,OAAK,CAAG,CAAC,EAC9D,CAAC,EACF,CAAC,CACJ,CAAC,EACH,CAAC,CAEV,CAEA,cAAe,CAAA3E,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}