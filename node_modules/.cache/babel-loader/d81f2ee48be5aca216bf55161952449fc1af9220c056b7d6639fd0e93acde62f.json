{"ast":null,"code":"import{useEffect,useState}from'react';import'./TrainerRejectedTrainings.css';import TrainerService from'../../../../../../Services/exponent_service/TrainerService';import{Button,Card,Container,Modal}from'react-bootstrap';import GlobalService from'../../../../../../Services/global_service/GlobalService';import Constants from'../../../../../Constants';import Select from'react-select';import Multiselect from'multiselect-react-dropdown';import Datetime from'react-datetime';import\"react-datetime/css/react-datetime.css\";import LoadingBar from'../../../../../loading_bar_component/LoadingBar';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function TrainerRejectedTrainings(){const[loadingBar,setLoadingBar]=useState(false);const[rejectedTrainings,setRejectedTrainings]=useState([]);const userId=localStorage.getItem(\"breezeUserId\");const getRejectedTrainingByExponentId=async()=>{setLoadingBar(true);const request={exponentId:userId};try{const responseData=await TrainerService.getRejectedTrainingByExponentId(request);console.log(responseData);if(responseData.length===0){rejectedTrainingsDisplayErrMsg('Rejected Trainings are not Available');}else{setRejectedTrainings(responseData);}}catch(error){console.log(error.message);handleTrainerRejectedTrainingsErrors(error.message);}finally{setLoadingBar(false);}};useEffect(()=>{getRejectedTrainingByExponentId();// eslint-disable-next-line react-hooks/exhaustive-deps\n},[]);const handleTrainerRejectedTrainingsErrors=errorStatus=>{if(Constants.INVALID_REQUEST_FIELD===errorStatus)rejectedTrainingsDisplayErrMsg(\"Trainer Id is invalid\");else if(Constants.BREEZE_DATABASE_EXCEPTION===errorStatus)rejectedTrainingsDisplayErrMsg(\"Sorry, Our service is down\");else rejectedTrainingsDisplayErrMsg(\"Could not process your request\");};//Fields for to display err msg div and label\nconst[messageColor,setMessageColor]=useState(Constants.MESSAGE_COLOR);const[errMsgDiv,setErrMsgDiv]=useState(false);const[errMsg,setErrMsg]=useState(\"\");//JS for to display err msg\nconst rejectedTrainingsDisplayErrMsg=errorMessage=>{setErrMsg(errorMessage);setErrMsgDiv(true);// setTimeout(() => {\n//     setErrMsg(\"\");\n//     setErrMsgDiv(false);\n// }, 3000);\n};const customCssForMsg={fontSize:'medium',fontWeight:'700',color:messageColor};const[courseContentUrl,setCourseContentUrl]=useState('');useEffect(()=>{if(courseContentUrl){window.open(courseContentUrl,'_blank');}},[courseContentUrl]);const handleOpenCourseContent=async(path,trainingId)=>{setLoadingBar(true);console.log(path);try{const courseContentRequest={courseContent:path};const courseContentResponse=await GlobalService.getCourseContentByPath(courseContentRequest);console.log(courseContentResponse);const courseContentFile=new Blob([courseContentResponse.data],{type:courseContentResponse.headers['content-type']});const courseContentFileUrl=URL.createObjectURL(courseContentFile);setCourseContentUrl(courseContentFileUrl);}catch(error){console.error('Error fetching data for path:',path,error);handleCourseContentErrors(error.message,trainingId);}finally{setLoadingBar(false);}};const handleCourseContentErrors=(errorStatus,trainingId)=>{if(Constants.INVALID_REQUEST_FIELD===errorStatus)handleOpenFilesErrMsg(\"Course Content Path is invalid\",trainingId);else if(Constants.FILES_NOT_FOUND===errorStatus)handleOpenFilesErrMsg(\"File Not Found\",trainingId);else handleOpenFilesErrMsg(\"Could not process your request\",trainingId);};const[showIntroVideoModal,setShowIntroVideoModal]=useState(false);const handleIntroVideoModalClose=()=>{setShowIntroVideoModal(false);setIntroVideoUrl('');};const[introVideoUrl,setIntroVideoUrl]=useState('');useEffect(()=>{if(introVideoUrl){setShowIntroVideoModal(true);}},[introVideoUrl]);const handleOpenIntroVideo=async(path,trainingId)=>{setLoadingBar(true);console.log(path);try{const introVideoRequest={introVideo:path};const introVideoResponse=await GlobalService.getIntroVideoByPath(introVideoRequest);console.log(introVideoResponse);const introVideoFileUrl=URL.createObjectURL(introVideoResponse.data);setIntroVideoUrl(introVideoFileUrl);}catch(error){console.error('Error fetching data for path:',path,error);handleIntroVideoErrors(error.message,trainingId);}finally{setLoadingBar(false);}};const handleIntroVideoErrors=(errorStatus,trainingId)=>{if(Constants.INVALID_REQUEST_FIELD===errorStatus)handleOpenFilesErrMsg(\"Intro Video Path is invalid\",trainingId);else if(Constants.FILES_NOT_FOUND===errorStatus)handleOpenFilesErrMsg(\"File Not Found\",trainingId);else handleOpenFilesErrMsg(\"Could not process your request\",trainingId);};const[fileClicked,setFileClicked]=useState(0);const[openFilesErr,setOpenFilesErr]=useState('');const handleOpenFilesErrMsg=(errorMessage,trainingId)=>{setOpenFilesErr(errorMessage);setFileClicked(trainingId);setTimeout(()=>{setOpenFilesErr('');setFileClicked(0);},Constants.SET_TIME_OUT_FOR_ERROR_MSG);};//update button clicked code\nconst childColor=getComputedStyle(document.documentElement).getPropertyValue('--child-color');const[showUpdateTrainingModal,setShowUpdateTrainingModal]=useState(false);const handleUpdateTrainingModalClose=()=>{setShowUpdateTrainingModal(false);setTrainingId(0);setTechnologies([]);setCourseContent(null);setIntroVideo(null);setTechnologiesList([]);setDefaultCourse([]);setDefaultTechnologyList([]);setCourseDuration(0);setCourseStartDateAndTime(null);};// course code\nconst[defaultCourse,setDefaultCourse]=useState([]);// technology code\nconst[trainingId,setTrainingId]=useState(0);const[technologies,setTechnologies]=useState([]);const[technologiesList,setTechnologiesList]=useState([]);const[defaultTechnologyList,setDefaultTechnologyList]=useState([]);const onSelectTechnology=(selectedList,selectedItem)=>{console.log(selectedList);setTechnologies([...selectedList]);console.log(technologies);};const onRemoveTechnology=(selectedList,removedItem)=>{setTechnologies([...selectedList]);console.log(technologies);};// corse duration\nconst[courseDuration,setCourseDuration]=useState(0);const handleCourseDurationChange=event=>{setCourseDuration(event.target.value);};// date and time\nconst[courseStartDateAndTime,setCourseStartDateAndTime]=useState(null);const minDate=new Date();minDate.setDate(minDate.getDate()+3);const maxDate=new Date();maxDate.setDate(maxDate.getDate()+17);const isValidDate=current=>{return current.isAfter(minDate)&&current.isBefore(maxDate);};const handleCourseStartDateChange=date=>{setCourseStartDateAndTime(date);};// updated course content and intro video file\nconst[courseContent,setCourseContent]=useState(null);const handleCourseContentFile=event=>{const file=event.target.files[0];if(file&&(file.type==='application/pdf'||file.type==='application/msword'||file.type==='application/vnd.openxmlformats-officedocument.wordprocessingml.document')){setCourseContent(file);}else{alert('Please select a PDF or Word document');event.target.value='';// Clear the file input\nsetCourseContent(null);}};const[introVideo,setIntroVideo]=useState(null);const handleIntroVideoFile=event=>{const file=event.target.files[0];if(file&&file.type.startsWith('video/')){setIntroVideo(file);}else{alert('Please select a video file');event.target.value='';// Clear the file input\nsetIntroVideo(null);}};// update button onclick\nconst handleUpdateTrainingBtnClick=async training=>{setLoadingBar(true);setTrainingId(training.trainingId);setDefaultCourse({courseName:training.courseName});// setDefaultTechnologyList(training.technologyList);\n// setTechnologies(training.technologyList);\nconst techStackRequest={userId:training.exponentId};try{const responseData=await GlobalService.getTechStackByExponentId(techStackRequest);console.log(responseData);const jsonResponseData=responseData.map((item,index)=>{return{technologyName:item};});console.log(jsonResponseData);setTechnologiesList(jsonResponseData);if(technologiesList){// setCourseDuration(training.courseDuration);\nsetShowUpdateTrainingModal(true);}}catch(error){console.log(error.message);handleTechnicalStackErrors(error.message,training.trainingId);}finally{setLoadingBar(false);}console.log(training.technologyList);};const handleTechnicalStackErrors=(errorStatus,trainingId)=>{if(Constants.INVALID_REQUEST_FIELD===errorStatus)handleOpenFilesErrMsg(\"Trainer Id is invalid\",trainingId);else if(Constants.ENTITY_NOT_FOUND===errorStatus)handleOpenFilesErrMsg(\"Entity Not Found\",trainingId);else handleOpenFilesErrMsg(\"Could not process your request\",trainingId);};const handleUpdateTraining=async()=>{console.log(trainingId);console.log(technologies);console.log(technologies.map(tech=>tech.technologyName));console.log(courseDuration);console.log(courseStartDateAndTime);console.log(!courseContent);console.log(!introVideo);if(courseDuration!==0&&(courseDuration>120||courseDuration<30)){updateTrainingDisplayErrMsg('Please give course duration between 30 to 120 (in days)');}else if(courseContent&&courseContent.size>5*1024*1024){updateTrainingDisplayErrMsg('Course content file size exceeds the maximum limit of 5MB');}else if(introVideo&&introVideo.size>5*1024*1024){updateTrainingDisplayErrMsg('Intro video file size exceeds the maximum limit of 5MB');}else if((technologies===null||technologies.length===0)&&courseDuration===0&&courseStartDateAndTime===null&&!courseContent&&!introVideo){updateTrainingDisplayErrMsg('Please select any field to update');}else{setLoadingBar(true);// Update FormData object \nconst formData=new FormData();formData.append('trainingId',trainingId);formData.append('technologyList',technologies.map(tech=>tech.technologyName));formData.append('courseContentFile',courseContent);formData.append('introVideoFile',introVideo);formData.append('courseDuration',courseDuration);formData.append('courseStartDateAndTime',courseStartDateAndTime);formData.append('sessionDuration',Constants.SESSION_DURATION);console.log(formData);try{const responseData=await TrainerService.updateTrainingByTrainingId(formData);console.log(responseData);updateTrainingDisplaySucMsg('Training Updated Successfully');}catch(error){handleUpdateTrianingErrors(error.message);}finally{setLoadingBar(false);}}};const handleUpdateTrianingErrors=errorStatus=>{if(Constants.INVALID_REQUEST_FIELD===errorStatus)updateTrainingDisplayErrMsg(\"Trainer Id is invalid\",trainingId);else if(Constants.ENTITY_NOT_FOUND===errorStatus)updateTrainingDisplayErrMsg(\"Entity Not Found\",trainingId);else if(Constants.BREEZE_DATABASE_EXCEPTION===errorStatus)updateTrainingDisplayErrMsg(\"Sorry, Our service is down\");else if(Constants.FILES_NOT_UPLOADED===errorStatus)updateTrainingDisplayErrMsg(\"Files not uploaded, please try again\");else updateTrainingDisplayErrMsg(\"Could not process your request\",trainingId);};const[updateTraingErrMsgDiv,setUpdateTraingErrMsgDiv]=useState(false);const[updateTraingErrMsg,setUpdateTraingErrMsg]=useState(\"\");//JS for to display err msg\nconst updateTrainingDisplayErrMsg=errorMessage=>{setUpdateTraingErrMsg(errorMessage);setUpdateTraingErrMsgDiv(true);setTimeout(()=>{setUpdateTraingErrMsg(\"\");setUpdateTraingErrMsgDiv(false);},Constants.SET_TIME_OUT_FOR_ERROR_MSG);};const updateTrainingDisplaySucMsg=errorMessage=>{setMessageColor('green');setUpdateTraingErrMsg(errorMessage);setUpdateTraingErrMsgDiv(true);setTimeout(()=>{setUpdateTraingErrMsg(\"\");setUpdateTraingErrMsgDiv(false);setMessageColor(Constants.MESSAGE_COLOR);handleUpdateTrainingModalClose();window.location.reload();},Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);};return/*#__PURE__*/_jsxs(\"div\",{className:\"trainer-rejected-trainings\",style:{fontSize:'13px'},children:[loadingBar&&/*#__PURE__*/_jsx(LoadingBar,{}),/*#__PURE__*/_jsxs(\"div\",{className:\"mt-4\",style:{display:'flex',flexWrap:'wrap',maxHeight:'80vh',overflow:'auto'},children:[rejectedTrainings.map((item,index)=>/*#__PURE__*/_jsxs(Card,{style:{width:'22rem',margin:'0.5rem'},className:\"card\",children:[/*#__PURE__*/_jsx(Card.Body,{children:/*#__PURE__*/_jsxs(Card.Text,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"rejected-training\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex\",children:[/*#__PURE__*/_jsx(\"label\",{style:{textDecoration:'underline',fontSize:'15px'},children:item.courseName+' Training'}),/*#__PURE__*/_jsx(\"button\",{style:{float:'right'},className:\"update-button\",onClick:()=>handleUpdateTrainingBtnClick(item),children:\"Update\"})]}),/*#__PURE__*/_jsx(\"label\",{children:\"Course : \"}),\" \",/*#__PURE__*/_jsx(\"span\",{children:item.courseName}),\" \",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"label\",{children:\"Technical-Stack : \"}),\" \",/*#__PURE__*/_jsx(\"span\",{children:item.technologyList.map(tech=>tech.technologyName).join(', ')}),\" \",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',justifyContent:'space-between'},children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Course Duration : \"}),\" \",/*#__PURE__*/_jsx(\"span\",{children:item.courseDuration+\" days\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Start Date : \"}),\" \",/*#__PURE__*/_jsx(\"span\",{children:Constants.convertUserTimezoneDateTime(item.courseStartDateAndTime).date})]})]}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',justifyContent:'space-between'},children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Session Duration : \"}),\" \",/*#__PURE__*/_jsx(\"span\",{children:item.sessionDuration})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Start Time : \"}),\" \",/*#__PURE__*/_jsx(\"span\",{children:Constants.formatTime(Constants.convertUserTimezoneDateTime(item.courseStartDateAndTime).time)})]})]}),/*#__PURE__*/_jsx(\"label\",{children:\"Course Content : \"}),/*#__PURE__*/_jsx(\"span\",{children:/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleOpenCourseContent(item.courseContent,item.trainingId),style:{border:'none',background:'none',padding:'0',color:'#1b4962',textDecoration:'underline',cursor:'pointer'},children:\"Open Course Content\"})}),\" \",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"label\",{children:\"Intro Video : \"}),/*#__PURE__*/_jsx(\"span\",{children:/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleOpenIntroVideo(item.introVideo,item.trainingId),style:{border:'none',background:'none',padding:'0',color:'#1b4962',textDecoration:'underline',cursor:'pointer'},children:\"Play Intro Video\"})})]}),/*#__PURE__*/_jsx(\"div\",{children:fileClicked===item.trainingId&&/*#__PURE__*/_jsx(\"div\",{style:customCssForMsg,children:/*#__PURE__*/_jsx(\"label\",{children:openFilesErr})})})]})}),/*#__PURE__*/_jsx(Card.Footer,{children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Status : \"}),\" \",/*#__PURE__*/_jsx(\"span\",{children:/*#__PURE__*/_jsx(\"strong\",{children:item.adminStatus})}),\" \",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"label\",{children:\"Reason : \"}),\" \",/*#__PURE__*/_jsx(\"span\",{children:/*#__PURE__*/_jsx(\"strong\",{children:item.description})})]})})]},index)),/*#__PURE__*/_jsx(\"div\",{children:errMsgDiv&&/*#__PURE__*/_jsx(\"div\",{style:customCssForMsg,children:/*#__PURE__*/_jsx(\"label\",{children:errMsg})})})]}),showIntroVideoModal&&/*#__PURE__*/_jsx(Modal,{className:\"intro-video-modal\",size:\"md\",show:showIntroVideoModal,onHide:handleIntroVideoModalClose,centered:true,backdrop:\"static\",children:/*#__PURE__*/_jsxs(Container,{className:\"px-5\",children:[/*#__PURE__*/_jsx(Modal.Header,{closeButton:true,children:/*#__PURE__*/_jsx(Modal.Title,{style:{fontSize:'18px'},children:\"Intro Video\"})}),/*#__PURE__*/_jsx(Modal.Body,{children:/*#__PURE__*/_jsx(\"div\",{className:\"row\",children:/*#__PURE__*/_jsx(\"div\",{className:\"col\",children:introVideoUrl&&/*#__PURE__*/_jsx(\"div\",{className:\"intro-video-container\",children:/*#__PURE__*/_jsx(\"div\",{style:{maxWidth:'100%',height:'auto',position:'relative',overflow:'hidden',paddingTop:'56.25%'},children:/*#__PURE__*/_jsx(\"video\",{src:introVideoUrl,style:{position:'absolute',top:0,left:0,width:'100%',height:'100%'},controls:true,autoPlay:true,muted:true})})})})})})]})}),showUpdateTrainingModal&&/*#__PURE__*/_jsx(Modal,{className:\"update-training-modal\",size:\"lg\",show:showUpdateTrainingModal,onHide:handleUpdateTrainingModalClose,centered:true,backdrop:\"static\",children:/*#__PURE__*/_jsxs(Container,{children:[/*#__PURE__*/_jsx(Modal.Header,{closeButton:true,children:/*#__PURE__*/_jsx(Modal.Title,{children:\"Update Training\"})}),/*#__PURE__*/_jsx(Modal.Body,{children:/*#__PURE__*/_jsx(\"div\",{className:\"update-training\",style:{fontSize:'14px'},children:/*#__PURE__*/_jsx(\"div\",{className:\"training-form\",children:/*#__PURE__*/_jsxs(\"form\",{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"course\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Selected Course\"}),/*#__PURE__*/_jsx(Select,{getOptionLabel:options=>{return options[\"courseName\"];},getOptionValue:options=>{return options[\"courseName\"];},value:defaultCourse,isDisabled:true})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"technology-multiselect mt-3\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Update Technical Stack\"}),/*#__PURE__*/_jsx(Multiselect,{id:\"technology\",options:technologiesList// selectedValues={defaultTechnologyList}\n,onSelect:onSelectTechnology,onRemove:onRemoveTechnology,displayValue:\"technologyName\"//technologyName\n,placeholder:\"Your Technical Stack\",avoidHighlightFirstOption:true,style:{chips:{background:childColor}}})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"course-duration mt-3\",children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"Course Duration \",/*#__PURE__*/_jsx(\"strong\",{children:\"(Number of days)\"})]}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",min:30,max:120,className:\"form-control\",placeholder:\"Duration\",value:courseDuration,onChange:handleCourseDurationChange})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"date-time mt-3\",children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"Select Training Start Date and Time \",/*#__PURE__*/_jsx(\"strong\",{children:\"(You can select after 3 days to current date)\"})]}),/*#__PURE__*/_jsx(Datetime,{value:courseStartDateAndTime,onChange:handleCourseStartDateChange,isValidDate:isValidDate,inputProps:{placeholder:'Select Date and Time',readOnly:true}})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"course-content-file mt-3\",children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"Upload Course Content \",/*#__PURE__*/_jsx(\"strong\",{children:\"(max size is 5MB)\"})]}),/*#__PURE__*/_jsx(\"input\",{type:\"file\",className:\"form-control\",id:\"courseContentFile\",accept:\".pdf,.doc,.docx\",onChange:handleCourseContentFile})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"intro-video-file mt-3\",children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"Upload Your Intro Video \",/*#__PURE__*/_jsx(\"strong\",{children:\"(1 minute) (max size is 5MB)\"})]}),/*#__PURE__*/_jsx(\"input\",{type:\"file\",className:\"form-control\",id:\"introVideoFile\",accept:\"video/*\",onChange:handleIntroVideoFile})]}),/*#__PURE__*/_jsx(\"div\",{className:\"mt-2\",children:updateTraingErrMsgDiv&&/*#__PURE__*/_jsx(\"div\",{style:customCssForMsg,children:/*#__PURE__*/_jsx(\"label\",{children:updateTraingErrMsg})})})]})})})}),/*#__PURE__*/_jsx(Modal.Footer,{children:/*#__PURE__*/_jsx(\"div\",{className:\"update-training-button\",children:/*#__PURE__*/_jsx(Button,{className:\"dashboard-button\",onClick:handleUpdateTraining,children:\"Update\"})})})]})})]});}export default TrainerRejectedTrainings;/**==================================================================================================== */ /**\r\n * import { useEffect, useState } from 'react';\r\nimport './TrainerRejectedTrainings.css';\r\nimport TrainerService from '../../../../../../Services/exponent_service/TrainerService';\r\nimport { Button, Card, Container, Modal } from 'react-bootstrap';\r\nimport GlobalService from '../../../../../../Services/global_service/GlobalService';\r\nimport Constants from '../../../../../Constants';\r\nimport Select from 'react-select';\r\nimport Multiselect from 'multiselect-react-dropdown';\r\nimport Datetime from 'react-datetime';\r\nimport \"react-datetime/css/react-datetime.css\";\r\nimport LoadingBar from '../../../../../loading_bar_component/LoadingBar';\r\n\r\nfunction TrainerRejectedTrainings() {\r\n\r\n    const [loadingBar, setLoadingBar] = useState(false);\r\n\r\n    const [rejectedTrainings, setRejectedTrainings] = useState([]);\r\n    const userId = localStorage.getItem(\"breezeUserId\");\r\n    const getRejectedTrainingByExponentId = async () => {\r\n        setLoadingBar(true);\r\n        const request = {\r\n            exponentId: userId,\r\n        }\r\n        try {\r\n            const responseData = await TrainerService.getRejectedTrainingByExponentId(request);\r\n            console.log(responseData);\r\n            if (responseData.length === 0) {\r\n                rejectedTrainingsDisplayErrMsg('Rejected Trainings are not Available');\r\n            } else {\r\n                setRejectedTrainings(responseData);\r\n            }\r\n        } catch (error) {\r\n            console.log(error.message);\r\n            handleTrainerRejectedTrainingsErrors(error.message);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        getRejectedTrainingByExponentId();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const handleTrainerRejectedTrainingsErrors = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            rejectedTrainingsDisplayErrMsg(\"Trainer Id is invalid\");\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            rejectedTrainingsDisplayErrMsg(\"Sorry, Our service is down\");\r\n        else\r\n            rejectedTrainingsDisplayErrMsg(\"Could not process your request\");\r\n    }\r\n\r\n    //Fields for to display err msg div and label\r\n    const [messageColor, setMessageColor] = useState(Constants.MESSAGE_COLOR);\r\n    const [errMsgDiv, setErrMsgDiv] = useState(false);\r\n    const [errMsg, setErrMsg] = useState(\"\");\r\n    //JS for to display err msg\r\n    const rejectedTrainingsDisplayErrMsg = (errorMessage) => {\r\n        setErrMsg(errorMessage);\r\n        setErrMsgDiv(true);\r\n        // setTimeout(() => {\r\n        //     setErrMsg(\"\");\r\n        //     setErrMsgDiv(false);\r\n        // }, 3000);\r\n    }\r\n\r\n    const customCssForMsg = {\r\n        fontSize: 'medium',\r\n        fontWeight: '700',\r\n        color: messageColor,\r\n    }\r\n\r\n    const [courseContentUrl, setCourseContentUrl] = useState('');\r\n    useEffect(() => {\r\n        if (courseContentUrl) {\r\n            window.open(courseContentUrl, '_blank');\r\n        }\r\n    }, [courseContentUrl]);\r\n    const handleOpenCourseContent = async (path, trainingId) => {\r\n        setLoadingBar(true);\r\n        console.log(path);\r\n        try {\r\n            const courseContentRequest = {\r\n                courseContent: path,\r\n            }\r\n            const courseContentResponse = await GlobalService.getCourseContentByPath(courseContentRequest);\r\n            console.log(courseContentResponse);\r\n            const courseContentFile = new Blob([courseContentResponse.data], { type: courseContentResponse.headers['content-type'] });\r\n            const courseContentFileUrl = URL.createObjectURL(courseContentFile);\r\n            setCourseContentUrl(courseContentFileUrl);\r\n        } catch (error) {\r\n            console.error('Error fetching data for path:', path, error);\r\n            handleCourseContentErrors(error.message, trainingId);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    };\r\n    const handleCourseContentErrors = (errorStatus, trainingId) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            handleOpenFilesErrMsg(\"Course Content Path is invalid\", trainingId);\r\n        else if (Constants.FILES_NOT_FOUND === errorStatus)\r\n            handleOpenFilesErrMsg(\"File Not Found\", trainingId);\r\n        else\r\n            handleOpenFilesErrMsg(\"Could not process your request\", trainingId);\r\n    }\r\n\r\n    const [showIntroVideoModal, setShowIntroVideoModal] = useState(false);\r\n    const handleIntroVideoModalClose = () => {\r\n        setShowIntroVideoModal(false);\r\n        setIntroVideoUrl('');\r\n    };\r\n    const [introVideoUrl, setIntroVideoUrl] = useState('');\r\n    useEffect(() => {\r\n        if (introVideoUrl) {\r\n            setShowIntroVideoModal(true);\r\n        }\r\n    }, [introVideoUrl]);\r\n    const handleOpenIntroVideo = async (path, trainingId) => {\r\n        setLoadingBar(true);\r\n        console.log(path);\r\n        try {\r\n            const introVideoRequest = {\r\n                introVideo: path,\r\n            }\r\n            const introVideoResponse = await GlobalService.getIntroVideoByPath(introVideoRequest);\r\n            console.log(introVideoResponse);\r\n            const introVideoFileUrl = URL.createObjectURL(introVideoResponse.data);\r\n            setIntroVideoUrl(introVideoFileUrl);\r\n        } catch (error) {\r\n            console.error('Error fetching data for path:', path, error);\r\n            handleIntroVideoErrors(error.message, trainingId);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    };\r\n    const handleIntroVideoErrors = (errorStatus, trainingId) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            handleOpenFilesErrMsg(\"Intro Video Path is invalid\", trainingId);\r\n        else if (Constants.FILES_NOT_FOUND === errorStatus)\r\n            handleOpenFilesErrMsg(\"File Not Found\", trainingId);\r\n        else\r\n            handleOpenFilesErrMsg(\"Could not process your request\", trainingId);\r\n    }\r\n\r\n    const [fileClicked, setFileClicked] = useState(0);\r\n    const [openFilesErr, setOpenFilesErr] = useState('');\r\n    const handleOpenFilesErrMsg = (errorMessage, trainingId) => {\r\n        setOpenFilesErr(errorMessage);\r\n        setFileClicked(trainingId);\r\n        setTimeout(() => {\r\n            setOpenFilesErr('');\r\n            setFileClicked(0);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n\r\n    //update button clicked code\r\n    const childColor = getComputedStyle(document.documentElement).getPropertyValue('--child-color');\r\n\r\n    const [showUpdateTrainingModal, setShowUpdateTrainingModal] = useState(false);\r\n    const handleUpdateTrainingModalClose = () => {\r\n        setShowUpdateTrainingModal(false);\r\n        setTrainingId(0);\r\n        setTechnologies([]);\r\n        setCourseContent(null);\r\n        setIntroVideo(null);\r\n        setTechnologiesList([]);\r\n        setDefaultCourse([]);\r\n        setDefaultTechnologyList([]);\r\n        setCourseDuration(0);\r\n        setCourseStartDateAndTime(null);\r\n    }\r\n    // course code\r\n    const [defaultCourse, setDefaultCourse] = useState([]);\r\n    // technology code\r\n    const [trainingId, setTrainingId] = useState(0);\r\n    const [technologies, setTechnologies] = useState([]);\r\n    const [technologiesList, setTechnologiesList] = useState([]);\r\n    const [defaultTechnologyList, setDefaultTechnologyList] = useState([]);\r\n    const onSelectTechnology = (selectedList, selectedItem) => {\r\n        console.log(selectedList);\r\n        setTechnologies([...selectedList]);\r\n        console.log(technologies);\r\n    }\r\n    const onRemoveTechnology = (selectedList, removedItem) => {\r\n        setTechnologies([...selectedList]);\r\n        console.log(technologies);\r\n    }\r\n    // corse duration\r\n    const [courseDuration, setCourseDuration] = useState(0);\r\n    const handleCourseDurationChange = (event) => {\r\n        setCourseDuration(event.target.value);\r\n    }\r\n\r\n    // date and time\r\n    const [courseStartDateAndTime, setCourseStartDateAndTime] = useState(null);\r\n    const minDate = new Date();\r\n    minDate.setDate(minDate.getDate() + 3);\r\n    const maxDate = new Date();\r\n    maxDate.setDate(maxDate.getDate() + 17);\r\n    const isValidDate = (current) => {\r\n        return current.isAfter(minDate) && current.isBefore(maxDate);\r\n    };\r\n    const handleCourseStartDateChange = (date) => {\r\n        setCourseStartDateAndTime(date);\r\n    };\r\n    // updated course content and intro video file\r\n    const [courseContent, setCourseContent] = useState(null);\r\n    const handleCourseContentFile = (event) => {\r\n        const file = event.target.files[0];\r\n        if (file && (file.type === 'application/pdf' || file.type === 'application/msword' || file.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document')) {\r\n            setCourseContent(file);\r\n        } else {\r\n            alert('Please select a PDF or Word document');\r\n            event.target.value = ''; // Clear the file input\r\n            setCourseContent(null);\r\n        }\r\n    };\r\n    const [introVideo, setIntroVideo] = useState(null);\r\n    const handleIntroVideoFile = (event) => {\r\n        const file = event.target.files[0];\r\n        if (file && file.type.startsWith('video/')) {\r\n            setIntroVideo(file);\r\n        } else {\r\n            alert('Please select a video file');\r\n            event.target.value = ''; // Clear the file input\r\n            setIntroVideo(null);\r\n        }\r\n    };\r\n    // update button onclick\r\n    const handleUpdateTrainingBtnClick = async (training) => {\r\n        setLoadingBar(true);\r\n        setTrainingId(training.trainingId);\r\n        setDefaultCourse({ courseName: training.courseName });\r\n        setDefaultTechnologyList(training.technologyList);\r\n        setTechnologies(training.technologyList);\r\n\r\n        const techStackRequest = {\r\n            userId: training.exponentId,\r\n        }\r\n\r\n        try {\r\n            const responseData = await GlobalService.getTechStackByExponentId(techStackRequest);\r\n            console.log(responseData);\r\n            const jsonResponseData = responseData.map((item, index) => {\r\n                return { technologyName: item }\r\n            });\r\n            console.log(jsonResponseData);\r\n            setTechnologiesList(jsonResponseData);\r\n            if (technologiesList) {\r\n                setCourseDuration(training.courseDuration);\r\n                setShowUpdateTrainingModal(true);\r\n            }\r\n        } catch (error) {\r\n            console.log(error.message);\r\n            handleTechnicalStackErrors(error.message, training.trainingId);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n        console.log(training.technologyList);\r\n    }\r\n    const handleTechnicalStackErrors = (errorStatus, trainingId) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            handleOpenFilesErrMsg(\"Trainer Id is invalid\", trainingId);\r\n        else if (Constants.ENTITY_NOT_FOUND === errorStatus)\r\n            handleOpenFilesErrMsg(\"Entity Not Found\", trainingId);\r\n        else\r\n            handleOpenFilesErrMsg(\"Could not process your request\", trainingId);\r\n    }\r\n\r\n    const handleUpdateTraining = async () => {\r\n        console.log(trainingId);\r\n        console.log(technologies);\r\n        console.log(technologies.map(tech => tech.technologyName));\r\n        console.log(courseDuration);\r\n        console.log(courseStartDateAndTime);\r\n\r\n        if (technologies === null || technologies.length === 0) { // need to set default technologyList to technologies\r\n            updateTrainingDisplayErrMsg('Please select technologies to train from your technical stack');\r\n        } else if (courseDuration > 120 || courseDuration < 30) {\r\n            updateTrainingDisplayErrMsg('Please give course duration between 30 to 120 (in days)');\r\n        } else if (courseStartDateAndTime === null) {\r\n            updateTrainingDisplayErrMsg('Please select start date and time');\r\n        } else if (!courseContent) {\r\n            updateTrainingDisplayErrMsg('Please upload course content');\r\n        } else if (!introVideo) {\r\n            updateTrainingDisplayErrMsg('Please upload your 1 minute intro video');\r\n        } else if (courseContent.size > 5 * 1024 * 1024) { \r\n            updateTrainingDisplayErrMsg('Course content file size exceeds the maximum limit of 5MB');\r\n        } else if (introVideo.size > 5 * 1024 * 1024) { \r\n            updateTrainingDisplayErrMsg('Intro video file size exceeds the maximum limit of 5MB');\r\n        } else {\r\n            setLoadingBar(true);\r\n            // Update FormData object \r\n            const formData = new FormData();\r\n            formData.append('trainingId', trainingId);\r\n            formData.append('technologyList', (technologies.map(tech => tech.technologyName)));\r\n            formData.append('courseContentFile', courseContent);\r\n            formData.append('introVideoFile', introVideo);\r\n            formData.append('courseDuration', courseDuration);\r\n            formData.append('courseStartDateAndTime', courseStartDateAndTime);\r\n            formData.append('sessionDuration', Constants.SESSION_DURATION);\r\n            console.log(formData);\r\n            try {\r\n                const responseData = await TrainerService.updateTrainingByTrainingId(formData);\r\n                console.log(responseData);\r\n                updateTrainingDisplaySucMsg('Training Updated Successfully');\r\n            } catch (error) {\r\n                handleUpdateTrianingErrors(error.message);\r\n            } finally {\r\n                setLoadingBar(false);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const handleUpdateTrianingErrors = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            updateTrainingDisplayErrMsg(\"Trainer Id is invalid\", trainingId);\r\n        else if (Constants.ENTITY_NOT_FOUND === errorStatus)\r\n            updateTrainingDisplayErrMsg(\"Entity Not Found\", trainingId);\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            updateTrainingDisplayErrMsg(\"Sorry, Our service is down\");\r\n        else if (Constants.FILES_NOT_UPLOADED === errorStatus)\r\n            updateTrainingDisplayErrMsg(\"Files not uploaded, please try again\");\r\n        else\r\n            updateTrainingDisplayErrMsg(\"Could not process your request\", trainingId);\r\n    }\r\n\r\n    const [updateTraingErrMsgDiv, setUpdateTraingErrMsgDiv] = useState(false);\r\n    const [updateTraingErrMsg, setUpdateTraingErrMsg] = useState(\"\");\r\n    //JS for to display err msg\r\n    const updateTrainingDisplayErrMsg = (errorMessage) => {\r\n        setUpdateTraingErrMsg(errorMessage);\r\n        setUpdateTraingErrMsgDiv(true);\r\n        setTimeout(() => {\r\n            setUpdateTraingErrMsg(\"\");\r\n            setUpdateTraingErrMsgDiv(false);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n    const updateTrainingDisplaySucMsg = (errorMessage) => {\r\n        setMessageColor('green');\r\n        setUpdateTraingErrMsg(errorMessage);\r\n        setUpdateTraingErrMsgDiv(true);\r\n        setTimeout(() => {\r\n            setUpdateTraingErrMsg(\"\");\r\n            setUpdateTraingErrMsgDiv(false);\r\n            setMessageColor(Constants.MESSAGE_COLOR);\r\n            handleUpdateTrainingModalClose();\r\n            window.location.reload();\r\n        }, Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);\r\n    }\r\n\r\n    return (\r\n        <div className=\"trainer-rejected-trainings\" style={{ fontSize: '13px' }}>\r\n            { loadingBar && <LoadingBar /> }\r\n            <div className='mt-4' style={{ display: 'flex', flexWrap: 'wrap', maxHeight: '80vh', overflow: 'auto' }}>\r\n                {rejectedTrainings.map((item, index) => (\r\n                    <Card key={index} style={{ width: '22rem', margin: '0.5rem' }} className=\"card\">\r\n                        <Card.Body>\r\n                            <Card.Text>\r\n                                <div className='rejected-training'>\r\n                                    <div className='flex'>\r\n                                        <label style={{ textDecoration: 'underline', fontSize: '15px' }}>{item.courseName + ' Training'}</label>\r\n                                        <button\r\n                                            style={{ float: 'right' }}\r\n                                            className='update-button'\r\n                                            onClick={() => handleUpdateTrainingBtnClick(item)}\r\n                                        >\r\n                                            Update\r\n                                        </button>\r\n                                    </div>\r\n                                    <label>Course : </label> <span>{item.courseName}</span> <br />\r\n                                    <label>Technical-Stack : </label> <span>{item.technologyList.map(tech => tech.technologyName).join(', ')}</span> <br />\r\n                                    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                                        <div>\r\n                                            <label>Course Duration : </label> <span>{item.courseDuration + \" days\"}</span>\r\n                                        </div>\r\n                                        <div>\r\n                                            <label>Start Date : </label> <span>{(Constants.convertUserTimezoneDateTime(item.courseStartDateAndTime)).date}</span>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                                        <div>\r\n                                            <label>Session Duration : </label> <span>{item.sessionDuration}</span>\r\n                                        </div>\r\n                                        <div>\r\n                                            <label>Start Time : </label> <span>{Constants.formatTime((Constants.convertUserTimezoneDateTime(item.courseStartDateAndTime)).time)}</span>\r\n                                        </div>\r\n                                    </div>\r\n                                    <label>Course Content : </label>\r\n                                    <span>\r\n                                        <button\r\n                                            onClick={() => handleOpenCourseContent(item.courseContent, item.trainingId)}\r\n                                            style={{\r\n                                                border: 'none',\r\n                                                background: 'none',\r\n                                                padding: '0',\r\n                                                color: '#1b4962',\r\n                                                textDecoration: 'underline',\r\n                                                cursor: 'pointer',\r\n                                            }}\r\n                                        >\r\n                                            Open Course Content\r\n                                        </button>\r\n                                    </span> <br />\r\n                                    <label>Intro Video : </label>\r\n                                    <span>\r\n                                        <button\r\n                                            onClick={() => handleOpenIntroVideo(item.introVideo, item.trainingId)}\r\n                                            style={{\r\n                                                border: 'none',\r\n                                                background: 'none',\r\n                                                padding: '0',\r\n                                                color: '#1b4962',\r\n                                                textDecoration: 'underline',\r\n                                                cursor: 'pointer',\r\n                                            }}\r\n                                        >\r\n                                            Play Intro Video\r\n                                        </button>\r\n                                    </span>\r\n                                </div>\r\n                                <div>\r\n                                    {fileClicked === item.trainingId && (\r\n                                        <div style={customCssForMsg}>\r\n                                            <label>{openFilesErr}</label>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </Card.Text>\r\n                        </Card.Body>\r\n                        <Card.Footer>\r\n                            <div>\r\n                                <label>Status : </label> <span><strong>{item.adminStatus}</strong></span> <br />\r\n                                <label>Reason : </label> <span><strong>{item.description}</strong></span>\r\n                            </div>\r\n                        </Card.Footer>\r\n                    </Card>\r\n                ))}\r\n                <div>\r\n                    {errMsgDiv &&\r\n                        <div style={customCssForMsg}>\r\n                            <label>{errMsg}</label>\r\n                        </div>}\r\n                </div>\r\n            </div>\r\n            {showIntroVideoModal && (\r\n                <Modal className='intro-video-modal' size='md' show={showIntroVideoModal} onHide={handleIntroVideoModalClose} centered backdrop=\"static\">\r\n                    <Container className='px-5'>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title style={{ fontSize: '18px' }}>\r\n                                Intro Video\r\n                            </Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <div className=\"row\">\r\n                                <div className=\"col\">\r\n                                    {introVideoUrl && (\r\n                                        <div className=\"intro-video-container\">\r\n                                            <div style={{ maxWidth: '100%', height: 'auto', position: 'relative', overflow: 'hidden', paddingTop: '56.25%' }}>\r\n                                                <video src={introVideoUrl} style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }} controls autoPlay muted />\r\n                                            </div>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </Modal.Body>\r\n                    </Container>\r\n                </Modal>\r\n            )}\r\n            {showUpdateTrainingModal && (\r\n                <Modal className='update-training-modal' size='lg' show={showUpdateTrainingModal} onHide={handleUpdateTrainingModalClose} centered backdrop=\"static\">\r\n                    <Container>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title>Update Training</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <div className=\"update-training\" style={{ fontSize: '14px' }}>\r\n                                <div className=\"training-form\">\r\n                                    <form>\r\n                                        <div className='course'>\r\n                                            <label>Selected Course</label>\r\n                                            <Select\r\n                                                getOptionLabel={(options) => {\r\n                                                    return options[\"courseName\"];\r\n                                                }}\r\n                                                getOptionValue={(options) => {\r\n                                                    return options[\"courseName\"];\r\n                                                }}\r\n                                                value={defaultCourse}\r\n                                                isDisabled={true}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='technology-multiselect mt-3'>\r\n                                            <label>Update Technical Stack</label>\r\n                                            <Multiselect\r\n                                                id='technology'\r\n                                                options={technologiesList}\r\n                                                selectedValues={defaultTechnologyList}\r\n                                                onSelect={onSelectTechnology}\r\n                                                onRemove={onRemoveTechnology}\r\n                                                displayValue=\"technologyName\" //technologyName\r\n                                                placeholder=\"Your Technical Stack\"\r\n                                                avoidHighlightFirstOption={true}\r\n                                                style={{\r\n                                                    chips: {\r\n                                                        background: childColor,\r\n                                                    },\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='course-duration mt-3'>\r\n                                            <label>Course Duration <strong>(Number of days)</strong></label>\r\n                                            <input\r\n                                                type='number'\r\n                                                min={30}\r\n                                                max={120}\r\n                                                className='form-control'\r\n                                                placeholder='Duration'\r\n                                                value={courseDuration}\r\n                                                onChange={handleCourseDurationChange}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='date-time mt-3'>\r\n                                            <label>Select Training Start Date and Time <strong>(You can select after 3 days to current date)</strong></label>\r\n                                            <Datetime\r\n                                                value={courseStartDateAndTime}\r\n                                                onChange={handleCourseStartDateChange}\r\n                                                isValidDate={isValidDate}\r\n                                                inputProps={{ \r\n                                                    placeholder: 'Select Date and Time',\r\n                                                    readOnly: true,\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"course-content-file mt-3\">\r\n                                            <label>Upload Course Content <strong>(max size is 5MB)</strong></label>\r\n                                            <input\r\n                                                type=\"file\"\r\n                                                className=\"form-control\"\r\n                                                id=\"courseContentFile\"\r\n                                                accept=\".pdf,.doc,.docx\"\r\n                                                onChange={handleCourseContentFile}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='intro-video-file mt-3'>\r\n                                            <label>Upload Your Intro Video <strong>(1 minute) (max size is 5MB)</strong></label>\r\n                                            <input\r\n                                                type=\"file\"\r\n                                                className=\"form-control\"\r\n                                                id=\"introVideoFile\"\r\n                                                accept=\"video/*\"\r\n                                                onChange={handleIntroVideoFile}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='mt-2'>\r\n                                            {updateTraingErrMsgDiv &&\r\n                                                <div style={customCssForMsg}>\r\n                                                    <label>{updateTraingErrMsg}</label>\r\n                                                </div>}\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            <div className='update-training-button'>\r\n                                <Button\r\n                                    className='dashboard-button'\r\n                                    onClick={handleUpdateTraining}\r\n                                >\r\n                                    Update\r\n                                </Button>\r\n                            </div>\r\n                        </Modal.Footer>\r\n                    </Container>\r\n                </Modal>\r\n            )}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default TrainerRejectedTrainings;\r\n */","map":{"version":3,"names":["useEffect","useState","TrainerService","Button","Card","Container","Modal","GlobalService","Constants","Select","Multiselect","Datetime","LoadingBar","jsx","_jsx","jsxs","_jsxs","TrainerRejectedTrainings","loadingBar","setLoadingBar","rejectedTrainings","setRejectedTrainings","userId","localStorage","getItem","getRejectedTrainingByExponentId","request","exponentId","responseData","console","log","length","rejectedTrainingsDisplayErrMsg","error","message","handleTrainerRejectedTrainingsErrors","errorStatus","INVALID_REQUEST_FIELD","BREEZE_DATABASE_EXCEPTION","messageColor","setMessageColor","MESSAGE_COLOR","errMsgDiv","setErrMsgDiv","errMsg","setErrMsg","errorMessage","customCssForMsg","fontSize","fontWeight","color","courseContentUrl","setCourseContentUrl","window","open","handleOpenCourseContent","path","trainingId","courseContentRequest","courseContent","courseContentResponse","getCourseContentByPath","courseContentFile","Blob","data","type","headers","courseContentFileUrl","URL","createObjectURL","handleCourseContentErrors","handleOpenFilesErrMsg","FILES_NOT_FOUND","showIntroVideoModal","setShowIntroVideoModal","handleIntroVideoModalClose","setIntroVideoUrl","introVideoUrl","handleOpenIntroVideo","introVideoRequest","introVideo","introVideoResponse","getIntroVideoByPath","introVideoFileUrl","handleIntroVideoErrors","fileClicked","setFileClicked","openFilesErr","setOpenFilesErr","setTimeout","SET_TIME_OUT_FOR_ERROR_MSG","childColor","getComputedStyle","document","documentElement","getPropertyValue","showUpdateTrainingModal","setShowUpdateTrainingModal","handleUpdateTrainingModalClose","setTrainingId","setTechnologies","setCourseContent","setIntroVideo","setTechnologiesList","setDefaultCourse","setDefaultTechnologyList","setCourseDuration","setCourseStartDateAndTime","defaultCourse","technologies","technologiesList","defaultTechnologyList","onSelectTechnology","selectedList","selectedItem","onRemoveTechnology","removedItem","courseDuration","handleCourseDurationChange","event","target","value","courseStartDateAndTime","minDate","Date","setDate","getDate","maxDate","isValidDate","current","isAfter","isBefore","handleCourseStartDateChange","date","handleCourseContentFile","file","files","alert","handleIntroVideoFile","startsWith","handleUpdateTrainingBtnClick","training","courseName","techStackRequest","getTechStackByExponentId","jsonResponseData","map","item","index","technologyName","handleTechnicalStackErrors","technologyList","ENTITY_NOT_FOUND","handleUpdateTraining","tech","updateTrainingDisplayErrMsg","size","formData","FormData","append","SESSION_DURATION","updateTrainingByTrainingId","updateTrainingDisplaySucMsg","handleUpdateTrianingErrors","FILES_NOT_UPLOADED","updateTraingErrMsgDiv","setUpdateTraingErrMsgDiv","updateTraingErrMsg","setUpdateTraingErrMsg","location","reload","SET_TIME_OUT_FOR_SUCCESS_MSG","className","style","children","display","flexWrap","maxHeight","overflow","width","margin","Body","Text","textDecoration","float","onClick","join","justifyContent","convertUserTimezoneDateTime","sessionDuration","formatTime","time","border","background","padding","cursor","Footer","adminStatus","description","show","onHide","centered","backdrop","Header","closeButton","Title","maxWidth","height","position","paddingTop","src","top","left","controls","autoPlay","muted","getOptionLabel","options","getOptionValue","isDisabled","id","onSelect","onRemove","displayValue","placeholder","avoidHighlightFirstOption","chips","min","max","onChange","inputProps","readOnly","accept"],"sources":["C:/Users/DELL/Documents/prepswisefinalprojects/breeze(15)-frontend/breeze/src/components/dashboard_component/feature_component/exponent_feature_component/trainer_feature_component/trainer_rejected_trainings_component/TrainerRejectedTrainings.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport './TrainerRejectedTrainings.css';\r\nimport TrainerService from '../../../../../../Services/exponent_service/TrainerService';\r\nimport { Button, Card, Container, Modal } from 'react-bootstrap';\r\nimport GlobalService from '../../../../../../Services/global_service/GlobalService';\r\nimport Constants from '../../../../../Constants';\r\nimport Select from 'react-select';\r\nimport Multiselect from 'multiselect-react-dropdown';\r\nimport Datetime from 'react-datetime';\r\nimport \"react-datetime/css/react-datetime.css\";\r\nimport LoadingBar from '../../../../../loading_bar_component/LoadingBar';\r\n\r\nfunction TrainerRejectedTrainings() {\r\n\r\n    const [loadingBar, setLoadingBar] = useState(false);\r\n\r\n    const [rejectedTrainings, setRejectedTrainings] = useState([]);\r\n    const userId = localStorage.getItem(\"breezeUserId\");\r\n    const getRejectedTrainingByExponentId = async () => {\r\n        setLoadingBar(true);\r\n        const request = {\r\n            exponentId: userId,\r\n        }\r\n        try {\r\n            const responseData = await TrainerService.getRejectedTrainingByExponentId(request);\r\n            console.log(responseData);\r\n            if (responseData.length === 0) {\r\n                rejectedTrainingsDisplayErrMsg('Rejected Trainings are not Available');\r\n            } else {\r\n                setRejectedTrainings(responseData);\r\n            }\r\n        } catch (error) {\r\n            console.log(error.message);\r\n            handleTrainerRejectedTrainingsErrors(error.message);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        getRejectedTrainingByExponentId();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const handleTrainerRejectedTrainingsErrors = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            rejectedTrainingsDisplayErrMsg(\"Trainer Id is invalid\");\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            rejectedTrainingsDisplayErrMsg(\"Sorry, Our service is down\");\r\n        else\r\n            rejectedTrainingsDisplayErrMsg(\"Could not process your request\");\r\n    }\r\n\r\n    //Fields for to display err msg div and label\r\n    const [messageColor, setMessageColor] = useState(Constants.MESSAGE_COLOR);\r\n    const [errMsgDiv, setErrMsgDiv] = useState(false);\r\n    const [errMsg, setErrMsg] = useState(\"\");\r\n    //JS for to display err msg\r\n    const rejectedTrainingsDisplayErrMsg = (errorMessage) => {\r\n        setErrMsg(errorMessage);\r\n        setErrMsgDiv(true);\r\n        // setTimeout(() => {\r\n        //     setErrMsg(\"\");\r\n        //     setErrMsgDiv(false);\r\n        // }, 3000);\r\n    }\r\n\r\n    const customCssForMsg = {\r\n        fontSize: 'medium',\r\n        fontWeight: '700',\r\n        color: messageColor,\r\n    }\r\n\r\n    const [courseContentUrl, setCourseContentUrl] = useState('');\r\n    useEffect(() => {\r\n        if (courseContentUrl) {\r\n            window.open(courseContentUrl, '_blank');\r\n        }\r\n    }, [courseContentUrl]);\r\n    const handleOpenCourseContent = async (path, trainingId) => {\r\n        setLoadingBar(true);\r\n        console.log(path);\r\n        try {\r\n            const courseContentRequest = {\r\n                courseContent: path,\r\n            }\r\n            const courseContentResponse = await GlobalService.getCourseContentByPath(courseContentRequest);\r\n            console.log(courseContentResponse);\r\n            const courseContentFile = new Blob([courseContentResponse.data], { type: courseContentResponse.headers['content-type'] });\r\n            const courseContentFileUrl = URL.createObjectURL(courseContentFile);\r\n            setCourseContentUrl(courseContentFileUrl);\r\n        } catch (error) {\r\n            console.error('Error fetching data for path:', path, error);\r\n            handleCourseContentErrors(error.message, trainingId);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    };\r\n    const handleCourseContentErrors = (errorStatus, trainingId) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            handleOpenFilesErrMsg(\"Course Content Path is invalid\", trainingId);\r\n        else if (Constants.FILES_NOT_FOUND === errorStatus)\r\n            handleOpenFilesErrMsg(\"File Not Found\", trainingId);\r\n        else\r\n            handleOpenFilesErrMsg(\"Could not process your request\", trainingId);\r\n    }\r\n\r\n    const [showIntroVideoModal, setShowIntroVideoModal] = useState(false);\r\n    const handleIntroVideoModalClose = () => {\r\n        setShowIntroVideoModal(false);\r\n        setIntroVideoUrl('');\r\n    };\r\n    const [introVideoUrl, setIntroVideoUrl] = useState('');\r\n    useEffect(() => {\r\n        if (introVideoUrl) {\r\n            setShowIntroVideoModal(true);\r\n        }\r\n    }, [introVideoUrl]);\r\n    const handleOpenIntroVideo = async (path, trainingId) => {\r\n        setLoadingBar(true);\r\n        console.log(path);\r\n        try {\r\n            const introVideoRequest = {\r\n                introVideo: path,\r\n            }\r\n            const introVideoResponse = await GlobalService.getIntroVideoByPath(introVideoRequest);\r\n            console.log(introVideoResponse);\r\n            const introVideoFileUrl = URL.createObjectURL(introVideoResponse.data);\r\n            setIntroVideoUrl(introVideoFileUrl);\r\n        } catch (error) {\r\n            console.error('Error fetching data for path:', path, error);\r\n            handleIntroVideoErrors(error.message, trainingId);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    };\r\n    const handleIntroVideoErrors = (errorStatus, trainingId) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            handleOpenFilesErrMsg(\"Intro Video Path is invalid\", trainingId);\r\n        else if (Constants.FILES_NOT_FOUND === errorStatus)\r\n            handleOpenFilesErrMsg(\"File Not Found\", trainingId);\r\n        else\r\n            handleOpenFilesErrMsg(\"Could not process your request\", trainingId);\r\n    }\r\n\r\n    const [fileClicked, setFileClicked] = useState(0);\r\n    const [openFilesErr, setOpenFilesErr] = useState('');\r\n    const handleOpenFilesErrMsg = (errorMessage, trainingId) => {\r\n        setOpenFilesErr(errorMessage);\r\n        setFileClicked(trainingId);\r\n        setTimeout(() => {\r\n            setOpenFilesErr('');\r\n            setFileClicked(0);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n\r\n    //update button clicked code\r\n    const childColor = getComputedStyle(document.documentElement).getPropertyValue('--child-color');\r\n\r\n    const [showUpdateTrainingModal, setShowUpdateTrainingModal] = useState(false);\r\n    const handleUpdateTrainingModalClose = () => {\r\n        setShowUpdateTrainingModal(false);\r\n        setTrainingId(0);\r\n        setTechnologies([]);\r\n        setCourseContent(null);\r\n        setIntroVideo(null);\r\n        setTechnologiesList([]);\r\n        setDefaultCourse([]);\r\n        setDefaultTechnologyList([]);\r\n        setCourseDuration(0);\r\n        setCourseStartDateAndTime(null);\r\n    }\r\n    // course code\r\n    const [defaultCourse, setDefaultCourse] = useState([]);\r\n    // technology code\r\n    const [trainingId, setTrainingId] = useState(0);\r\n    const [technologies, setTechnologies] = useState([]);\r\n    const [technologiesList, setTechnologiesList] = useState([]);\r\n    const [defaultTechnologyList, setDefaultTechnologyList] = useState([]);\r\n    const onSelectTechnology = (selectedList, selectedItem) => {\r\n        console.log(selectedList);\r\n        setTechnologies([...selectedList]);\r\n        console.log(technologies);\r\n    }\r\n    const onRemoveTechnology = (selectedList, removedItem) => {\r\n        setTechnologies([...selectedList]);\r\n        console.log(technologies);\r\n    }\r\n    // corse duration\r\n    const [courseDuration, setCourseDuration] = useState(0);\r\n    const handleCourseDurationChange = (event) => {\r\n        setCourseDuration(event.target.value);\r\n    }\r\n\r\n    // date and time\r\n    const [courseStartDateAndTime, setCourseStartDateAndTime] = useState(null);\r\n    const minDate = new Date();\r\n    minDate.setDate(minDate.getDate() + 3);\r\n    const maxDate = new Date();\r\n    maxDate.setDate(maxDate.getDate() + 17);\r\n    const isValidDate = (current) => {\r\n        return current.isAfter(minDate) && current.isBefore(maxDate);\r\n    };\r\n    const handleCourseStartDateChange = (date) => {\r\n        setCourseStartDateAndTime(date);\r\n    };\r\n    // updated course content and intro video file\r\n    const [courseContent, setCourseContent] = useState(null);\r\n    const handleCourseContentFile = (event) => {\r\n        const file = event.target.files[0];\r\n        if (file && (file.type === 'application/pdf' || file.type === 'application/msword' || file.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document')) {\r\n            setCourseContent(file);\r\n        } else {\r\n            alert('Please select a PDF or Word document');\r\n            event.target.value = ''; // Clear the file input\r\n            setCourseContent(null);\r\n        }\r\n    };\r\n    const [introVideo, setIntroVideo] = useState(null);\r\n    const handleIntroVideoFile = (event) => {\r\n        const file = event.target.files[0];\r\n        if (file && file.type.startsWith('video/')) {\r\n            setIntroVideo(file);\r\n        } else {\r\n            alert('Please select a video file');\r\n            event.target.value = ''; // Clear the file input\r\n            setIntroVideo(null);\r\n        }\r\n    };\r\n    // update button onclick\r\n    const handleUpdateTrainingBtnClick = async (training) => {\r\n        setLoadingBar(true);\r\n        setTrainingId(training.trainingId);\r\n        setDefaultCourse({ courseName: training.courseName });\r\n        // setDefaultTechnologyList(training.technologyList);\r\n        // setTechnologies(training.technologyList);\r\n\r\n        const techStackRequest = {\r\n            userId: training.exponentId,\r\n        }\r\n\r\n        try {\r\n            const responseData = await GlobalService.getTechStackByExponentId(techStackRequest);\r\n            console.log(responseData);\r\n            const jsonResponseData = responseData.map((item, index) => {\r\n                return { technologyName: item }\r\n            });\r\n            console.log(jsonResponseData);\r\n            setTechnologiesList(jsonResponseData);\r\n            if (technologiesList) {\r\n                // setCourseDuration(training.courseDuration);\r\n                setShowUpdateTrainingModal(true);\r\n            }\r\n        } catch (error) {\r\n            console.log(error.message);\r\n            handleTechnicalStackErrors(error.message, training.trainingId);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n        console.log(training.technologyList);\r\n    }\r\n    const handleTechnicalStackErrors = (errorStatus, trainingId) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            handleOpenFilesErrMsg(\"Trainer Id is invalid\", trainingId);\r\n        else if (Constants.ENTITY_NOT_FOUND === errorStatus)\r\n            handleOpenFilesErrMsg(\"Entity Not Found\", trainingId);\r\n        else\r\n            handleOpenFilesErrMsg(\"Could not process your request\", trainingId);\r\n    }\r\n\r\n    const handleUpdateTraining = async () => {\r\n        console.log(trainingId);\r\n        console.log(technologies);\r\n        console.log(technologies.map(tech => tech.technologyName));\r\n        console.log(courseDuration);\r\n        console.log(courseStartDateAndTime);\r\n        console.log(!courseContent);\r\n        console.log(!introVideo);\r\n\r\n        if (courseDuration !== 0 && (courseDuration > 120 || courseDuration < 30)) {\r\n            updateTrainingDisplayErrMsg('Please give course duration between 30 to 120 (in days)');\r\n        } else if (courseContent && courseContent.size > 5 * 1024 * 1024) { \r\n            updateTrainingDisplayErrMsg('Course content file size exceeds the maximum limit of 5MB');\r\n        } else if (introVideo && introVideo.size > 5 * 1024 * 1024) { \r\n            updateTrainingDisplayErrMsg('Intro video file size exceeds the maximum limit of 5MB');\r\n        } else if ((technologies === null || technologies.length === 0) && courseDuration === 0 && courseStartDateAndTime === null && !courseContent && !introVideo) { \r\n            updateTrainingDisplayErrMsg('Please select any field to update');\r\n        } else {\r\n            setLoadingBar(true);\r\n            // Update FormData object \r\n            const formData = new FormData();\r\n            formData.append('trainingId', trainingId);\r\n            formData.append('technologyList', (technologies.map(tech => tech.technologyName)));\r\n            formData.append('courseContentFile', courseContent);\r\n            formData.append('introVideoFile', introVideo);\r\n            formData.append('courseDuration', courseDuration);\r\n            formData.append('courseStartDateAndTime', courseStartDateAndTime);\r\n            formData.append('sessionDuration', Constants.SESSION_DURATION);\r\n            console.log(formData);\r\n            try {\r\n                const responseData = await TrainerService.updateTrainingByTrainingId(formData);\r\n                console.log(responseData);\r\n                updateTrainingDisplaySucMsg('Training Updated Successfully');\r\n            } catch (error) {\r\n                handleUpdateTrianingErrors(error.message);\r\n            } finally {\r\n                setLoadingBar(false);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const handleUpdateTrianingErrors = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            updateTrainingDisplayErrMsg(\"Trainer Id is invalid\", trainingId);\r\n        else if (Constants.ENTITY_NOT_FOUND === errorStatus)\r\n            updateTrainingDisplayErrMsg(\"Entity Not Found\", trainingId);\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            updateTrainingDisplayErrMsg(\"Sorry, Our service is down\");\r\n        else if (Constants.FILES_NOT_UPLOADED === errorStatus)\r\n            updateTrainingDisplayErrMsg(\"Files not uploaded, please try again\");\r\n        else\r\n            updateTrainingDisplayErrMsg(\"Could not process your request\", trainingId);\r\n    }\r\n\r\n    const [updateTraingErrMsgDiv, setUpdateTraingErrMsgDiv] = useState(false);\r\n    const [updateTraingErrMsg, setUpdateTraingErrMsg] = useState(\"\");\r\n    //JS for to display err msg\r\n    const updateTrainingDisplayErrMsg = (errorMessage) => {\r\n        setUpdateTraingErrMsg(errorMessage);\r\n        setUpdateTraingErrMsgDiv(true);\r\n        setTimeout(() => {\r\n            setUpdateTraingErrMsg(\"\");\r\n            setUpdateTraingErrMsgDiv(false);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n    const updateTrainingDisplaySucMsg = (errorMessage) => {\r\n        setMessageColor('green');\r\n        setUpdateTraingErrMsg(errorMessage);\r\n        setUpdateTraingErrMsgDiv(true);\r\n        setTimeout(() => {\r\n            setUpdateTraingErrMsg(\"\");\r\n            setUpdateTraingErrMsgDiv(false);\r\n            setMessageColor(Constants.MESSAGE_COLOR);\r\n            handleUpdateTrainingModalClose();\r\n            window.location.reload();\r\n        }, Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);\r\n    }\r\n\r\n    return (\r\n        <div className=\"trainer-rejected-trainings\" style={{ fontSize: '13px' }}>\r\n            { loadingBar && <LoadingBar /> }\r\n            <div className='mt-4' style={{ display: 'flex', flexWrap: 'wrap', maxHeight: '80vh', overflow: 'auto' }}>\r\n                {rejectedTrainings.map((item, index) => (\r\n                    <Card key={index} style={{ width: '22rem', margin: '0.5rem' }} className=\"card\">\r\n                        <Card.Body>\r\n                            <Card.Text>\r\n                                <div className='rejected-training'>\r\n                                    <div className='flex'>\r\n                                        <label style={{ textDecoration: 'underline', fontSize: '15px' }}>{item.courseName + ' Training'}</label>\r\n                                        <button\r\n                                            style={{ float: 'right' }}\r\n                                            className='update-button'\r\n                                            onClick={() => handleUpdateTrainingBtnClick(item)}\r\n                                        >\r\n                                            Update\r\n                                        </button>\r\n                                    </div>\r\n                                    <label>Course : </label> <span>{item.courseName}</span> <br />\r\n                                    <label>Technical-Stack : </label> <span>{item.technologyList.map(tech => tech.technologyName).join(', ')}</span> <br />\r\n                                    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                                        <div>\r\n                                            <label>Course Duration : </label> <span>{item.courseDuration + \" days\"}</span>\r\n                                        </div>\r\n                                        <div>\r\n                                            <label>Start Date : </label> <span>{(Constants.convertUserTimezoneDateTime(item.courseStartDateAndTime)).date}</span>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                                        <div>\r\n                                            <label>Session Duration : </label> <span>{item.sessionDuration}</span>\r\n                                        </div>\r\n                                        <div>\r\n                                            <label>Start Time : </label> <span>{Constants.formatTime((Constants.convertUserTimezoneDateTime(item.courseStartDateAndTime)).time)}</span>\r\n                                        </div>\r\n                                    </div>\r\n                                    <label>Course Content : </label>\r\n                                    <span>\r\n                                        <button\r\n                                            onClick={() => handleOpenCourseContent(item.courseContent, item.trainingId)}\r\n                                            style={{\r\n                                                border: 'none',\r\n                                                background: 'none',\r\n                                                padding: '0',\r\n                                                color: '#1b4962',\r\n                                                textDecoration: 'underline',\r\n                                                cursor: 'pointer',\r\n                                            }}\r\n                                        >\r\n                                            Open Course Content\r\n                                        </button>\r\n                                    </span> <br />\r\n                                    <label>Intro Video : </label>\r\n                                    <span>\r\n                                        <button\r\n                                            onClick={() => handleOpenIntroVideo(item.introVideo, item.trainingId)}\r\n                                            style={{\r\n                                                border: 'none',\r\n                                                background: 'none',\r\n                                                padding: '0',\r\n                                                color: '#1b4962',\r\n                                                textDecoration: 'underline',\r\n                                                cursor: 'pointer',\r\n                                            }}\r\n                                        >\r\n                                            Play Intro Video\r\n                                        </button>\r\n                                    </span>\r\n                                </div>\r\n                                <div>\r\n                                    {fileClicked === item.trainingId && (\r\n                                        <div style={customCssForMsg}>\r\n                                            <label>{openFilesErr}</label>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </Card.Text>\r\n                        </Card.Body>\r\n                        <Card.Footer>\r\n                            <div>\r\n                                <label>Status : </label> <span><strong>{item.adminStatus}</strong></span> <br />\r\n                                <label>Reason : </label> <span><strong>{item.description}</strong></span>\r\n                            </div>\r\n                        </Card.Footer>\r\n                    </Card>\r\n                ))}\r\n                <div>\r\n                    {errMsgDiv &&\r\n                        <div style={customCssForMsg}>\r\n                            <label>{errMsg}</label>\r\n                        </div>}\r\n                </div>\r\n            </div>\r\n            {showIntroVideoModal && (\r\n                <Modal className='intro-video-modal' size='md' show={showIntroVideoModal} onHide={handleIntroVideoModalClose} centered backdrop=\"static\">\r\n                    <Container className='px-5'>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title style={{ fontSize: '18px' }}>\r\n                                Intro Video\r\n                            </Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <div className=\"row\">\r\n                                <div className=\"col\">\r\n                                    {introVideoUrl && (\r\n                                        <div className=\"intro-video-container\">\r\n                                            <div style={{ maxWidth: '100%', height: 'auto', position: 'relative', overflow: 'hidden', paddingTop: '56.25%' }}>\r\n                                                <video src={introVideoUrl} style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }} controls autoPlay muted />\r\n                                            </div>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </Modal.Body>\r\n                    </Container>\r\n                </Modal>\r\n            )}\r\n            {showUpdateTrainingModal && (\r\n                <Modal className='update-training-modal' size='lg' show={showUpdateTrainingModal} onHide={handleUpdateTrainingModalClose} centered backdrop=\"static\">\r\n                    <Container>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title>Update Training</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <div className=\"update-training\" style={{ fontSize: '14px' }}>\r\n                                <div className=\"training-form\">\r\n                                    <form>\r\n                                        <div className='course'>\r\n                                            <label>Selected Course</label>\r\n                                            <Select\r\n                                                getOptionLabel={(options) => {\r\n                                                    return options[\"courseName\"];\r\n                                                }}\r\n                                                getOptionValue={(options) => {\r\n                                                    return options[\"courseName\"];\r\n                                                }}\r\n                                                value={defaultCourse}\r\n                                                isDisabled={true}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='technology-multiselect mt-3'>\r\n                                            <label>Update Technical Stack</label>\r\n                                            <Multiselect\r\n                                                id='technology'\r\n                                                options={technologiesList}\r\n                                                // selectedValues={defaultTechnologyList}\r\n                                                onSelect={onSelectTechnology}\r\n                                                onRemove={onRemoveTechnology}\r\n                                                displayValue=\"technologyName\" //technologyName\r\n                                                placeholder=\"Your Technical Stack\"\r\n                                                avoidHighlightFirstOption={true}\r\n                                                style={{\r\n                                                    chips: {\r\n                                                        background: childColor,\r\n                                                    },\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='course-duration mt-3'>\r\n                                            <label>Course Duration <strong>(Number of days)</strong></label>\r\n                                            <input\r\n                                                type='number'\r\n                                                min={30}\r\n                                                max={120}\r\n                                                className='form-control'\r\n                                                placeholder='Duration'\r\n                                                value={courseDuration}\r\n                                                onChange={handleCourseDurationChange}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='date-time mt-3'>\r\n                                            <label>Select Training Start Date and Time <strong>(You can select after 3 days to current date)</strong></label>\r\n                                            <Datetime\r\n                                                value={courseStartDateAndTime}\r\n                                                onChange={handleCourseStartDateChange}\r\n                                                isValidDate={isValidDate}\r\n                                                inputProps={{ \r\n                                                    placeholder: 'Select Date and Time',\r\n                                                    readOnly: true,\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"course-content-file mt-3\">\r\n                                            <label>Upload Course Content <strong>(max size is 5MB)</strong></label>\r\n                                            <input\r\n                                                type=\"file\"\r\n                                                className=\"form-control\"\r\n                                                id=\"courseContentFile\"\r\n                                                accept=\".pdf,.doc,.docx\"\r\n                                                onChange={handleCourseContentFile}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='intro-video-file mt-3'>\r\n                                            <label>Upload Your Intro Video <strong>(1 minute) (max size is 5MB)</strong></label>\r\n                                            <input\r\n                                                type=\"file\"\r\n                                                className=\"form-control\"\r\n                                                id=\"introVideoFile\"\r\n                                                accept=\"video/*\"\r\n                                                onChange={handleIntroVideoFile}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='mt-2'>\r\n                                            {updateTraingErrMsgDiv &&\r\n                                                <div style={customCssForMsg}>\r\n                                                    <label>{updateTraingErrMsg}</label>\r\n                                                </div>}\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            <div className='update-training-button'>\r\n                                <Button\r\n                                    className='dashboard-button'\r\n                                    onClick={handleUpdateTraining}\r\n                                >\r\n                                    Update\r\n                                </Button>\r\n                            </div>\r\n                        </Modal.Footer>\r\n                    </Container>\r\n                </Modal>\r\n            )}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default TrainerRejectedTrainings;\r\n\r\n\r\n/**==================================================================================================== */\r\n\r\n/**\r\n * import { useEffect, useState } from 'react';\r\nimport './TrainerRejectedTrainings.css';\r\nimport TrainerService from '../../../../../../Services/exponent_service/TrainerService';\r\nimport { Button, Card, Container, Modal } from 'react-bootstrap';\r\nimport GlobalService from '../../../../../../Services/global_service/GlobalService';\r\nimport Constants from '../../../../../Constants';\r\nimport Select from 'react-select';\r\nimport Multiselect from 'multiselect-react-dropdown';\r\nimport Datetime from 'react-datetime';\r\nimport \"react-datetime/css/react-datetime.css\";\r\nimport LoadingBar from '../../../../../loading_bar_component/LoadingBar';\r\n\r\nfunction TrainerRejectedTrainings() {\r\n\r\n    const [loadingBar, setLoadingBar] = useState(false);\r\n\r\n    const [rejectedTrainings, setRejectedTrainings] = useState([]);\r\n    const userId = localStorage.getItem(\"breezeUserId\");\r\n    const getRejectedTrainingByExponentId = async () => {\r\n        setLoadingBar(true);\r\n        const request = {\r\n            exponentId: userId,\r\n        }\r\n        try {\r\n            const responseData = await TrainerService.getRejectedTrainingByExponentId(request);\r\n            console.log(responseData);\r\n            if (responseData.length === 0) {\r\n                rejectedTrainingsDisplayErrMsg('Rejected Trainings are not Available');\r\n            } else {\r\n                setRejectedTrainings(responseData);\r\n            }\r\n        } catch (error) {\r\n            console.log(error.message);\r\n            handleTrainerRejectedTrainingsErrors(error.message);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        getRejectedTrainingByExponentId();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const handleTrainerRejectedTrainingsErrors = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            rejectedTrainingsDisplayErrMsg(\"Trainer Id is invalid\");\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            rejectedTrainingsDisplayErrMsg(\"Sorry, Our service is down\");\r\n        else\r\n            rejectedTrainingsDisplayErrMsg(\"Could not process your request\");\r\n    }\r\n\r\n    //Fields for to display err msg div and label\r\n    const [messageColor, setMessageColor] = useState(Constants.MESSAGE_COLOR);\r\n    const [errMsgDiv, setErrMsgDiv] = useState(false);\r\n    const [errMsg, setErrMsg] = useState(\"\");\r\n    //JS for to display err msg\r\n    const rejectedTrainingsDisplayErrMsg = (errorMessage) => {\r\n        setErrMsg(errorMessage);\r\n        setErrMsgDiv(true);\r\n        // setTimeout(() => {\r\n        //     setErrMsg(\"\");\r\n        //     setErrMsgDiv(false);\r\n        // }, 3000);\r\n    }\r\n\r\n    const customCssForMsg = {\r\n        fontSize: 'medium',\r\n        fontWeight: '700',\r\n        color: messageColor,\r\n    }\r\n\r\n    const [courseContentUrl, setCourseContentUrl] = useState('');\r\n    useEffect(() => {\r\n        if (courseContentUrl) {\r\n            window.open(courseContentUrl, '_blank');\r\n        }\r\n    }, [courseContentUrl]);\r\n    const handleOpenCourseContent = async (path, trainingId) => {\r\n        setLoadingBar(true);\r\n        console.log(path);\r\n        try {\r\n            const courseContentRequest = {\r\n                courseContent: path,\r\n            }\r\n            const courseContentResponse = await GlobalService.getCourseContentByPath(courseContentRequest);\r\n            console.log(courseContentResponse);\r\n            const courseContentFile = new Blob([courseContentResponse.data], { type: courseContentResponse.headers['content-type'] });\r\n            const courseContentFileUrl = URL.createObjectURL(courseContentFile);\r\n            setCourseContentUrl(courseContentFileUrl);\r\n        } catch (error) {\r\n            console.error('Error fetching data for path:', path, error);\r\n            handleCourseContentErrors(error.message, trainingId);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    };\r\n    const handleCourseContentErrors = (errorStatus, trainingId) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            handleOpenFilesErrMsg(\"Course Content Path is invalid\", trainingId);\r\n        else if (Constants.FILES_NOT_FOUND === errorStatus)\r\n            handleOpenFilesErrMsg(\"File Not Found\", trainingId);\r\n        else\r\n            handleOpenFilesErrMsg(\"Could not process your request\", trainingId);\r\n    }\r\n\r\n    const [showIntroVideoModal, setShowIntroVideoModal] = useState(false);\r\n    const handleIntroVideoModalClose = () => {\r\n        setShowIntroVideoModal(false);\r\n        setIntroVideoUrl('');\r\n    };\r\n    const [introVideoUrl, setIntroVideoUrl] = useState('');\r\n    useEffect(() => {\r\n        if (introVideoUrl) {\r\n            setShowIntroVideoModal(true);\r\n        }\r\n    }, [introVideoUrl]);\r\n    const handleOpenIntroVideo = async (path, trainingId) => {\r\n        setLoadingBar(true);\r\n        console.log(path);\r\n        try {\r\n            const introVideoRequest = {\r\n                introVideo: path,\r\n            }\r\n            const introVideoResponse = await GlobalService.getIntroVideoByPath(introVideoRequest);\r\n            console.log(introVideoResponse);\r\n            const introVideoFileUrl = URL.createObjectURL(introVideoResponse.data);\r\n            setIntroVideoUrl(introVideoFileUrl);\r\n        } catch (error) {\r\n            console.error('Error fetching data for path:', path, error);\r\n            handleIntroVideoErrors(error.message, trainingId);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    };\r\n    const handleIntroVideoErrors = (errorStatus, trainingId) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            handleOpenFilesErrMsg(\"Intro Video Path is invalid\", trainingId);\r\n        else if (Constants.FILES_NOT_FOUND === errorStatus)\r\n            handleOpenFilesErrMsg(\"File Not Found\", trainingId);\r\n        else\r\n            handleOpenFilesErrMsg(\"Could not process your request\", trainingId);\r\n    }\r\n\r\n    const [fileClicked, setFileClicked] = useState(0);\r\n    const [openFilesErr, setOpenFilesErr] = useState('');\r\n    const handleOpenFilesErrMsg = (errorMessage, trainingId) => {\r\n        setOpenFilesErr(errorMessage);\r\n        setFileClicked(trainingId);\r\n        setTimeout(() => {\r\n            setOpenFilesErr('');\r\n            setFileClicked(0);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n\r\n    //update button clicked code\r\n    const childColor = getComputedStyle(document.documentElement).getPropertyValue('--child-color');\r\n\r\n    const [showUpdateTrainingModal, setShowUpdateTrainingModal] = useState(false);\r\n    const handleUpdateTrainingModalClose = () => {\r\n        setShowUpdateTrainingModal(false);\r\n        setTrainingId(0);\r\n        setTechnologies([]);\r\n        setCourseContent(null);\r\n        setIntroVideo(null);\r\n        setTechnologiesList([]);\r\n        setDefaultCourse([]);\r\n        setDefaultTechnologyList([]);\r\n        setCourseDuration(0);\r\n        setCourseStartDateAndTime(null);\r\n    }\r\n    // course code\r\n    const [defaultCourse, setDefaultCourse] = useState([]);\r\n    // technology code\r\n    const [trainingId, setTrainingId] = useState(0);\r\n    const [technologies, setTechnologies] = useState([]);\r\n    const [technologiesList, setTechnologiesList] = useState([]);\r\n    const [defaultTechnologyList, setDefaultTechnologyList] = useState([]);\r\n    const onSelectTechnology = (selectedList, selectedItem) => {\r\n        console.log(selectedList);\r\n        setTechnologies([...selectedList]);\r\n        console.log(technologies);\r\n    }\r\n    const onRemoveTechnology = (selectedList, removedItem) => {\r\n        setTechnologies([...selectedList]);\r\n        console.log(technologies);\r\n    }\r\n    // corse duration\r\n    const [courseDuration, setCourseDuration] = useState(0);\r\n    const handleCourseDurationChange = (event) => {\r\n        setCourseDuration(event.target.value);\r\n    }\r\n\r\n    // date and time\r\n    const [courseStartDateAndTime, setCourseStartDateAndTime] = useState(null);\r\n    const minDate = new Date();\r\n    minDate.setDate(minDate.getDate() + 3);\r\n    const maxDate = new Date();\r\n    maxDate.setDate(maxDate.getDate() + 17);\r\n    const isValidDate = (current) => {\r\n        return current.isAfter(minDate) && current.isBefore(maxDate);\r\n    };\r\n    const handleCourseStartDateChange = (date) => {\r\n        setCourseStartDateAndTime(date);\r\n    };\r\n    // updated course content and intro video file\r\n    const [courseContent, setCourseContent] = useState(null);\r\n    const handleCourseContentFile = (event) => {\r\n        const file = event.target.files[0];\r\n        if (file && (file.type === 'application/pdf' || file.type === 'application/msword' || file.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document')) {\r\n            setCourseContent(file);\r\n        } else {\r\n            alert('Please select a PDF or Word document');\r\n            event.target.value = ''; // Clear the file input\r\n            setCourseContent(null);\r\n        }\r\n    };\r\n    const [introVideo, setIntroVideo] = useState(null);\r\n    const handleIntroVideoFile = (event) => {\r\n        const file = event.target.files[0];\r\n        if (file && file.type.startsWith('video/')) {\r\n            setIntroVideo(file);\r\n        } else {\r\n            alert('Please select a video file');\r\n            event.target.value = ''; // Clear the file input\r\n            setIntroVideo(null);\r\n        }\r\n    };\r\n    // update button onclick\r\n    const handleUpdateTrainingBtnClick = async (training) => {\r\n        setLoadingBar(true);\r\n        setTrainingId(training.trainingId);\r\n        setDefaultCourse({ courseName: training.courseName });\r\n        setDefaultTechnologyList(training.technologyList);\r\n        setTechnologies(training.technologyList);\r\n\r\n        const techStackRequest = {\r\n            userId: training.exponentId,\r\n        }\r\n\r\n        try {\r\n            const responseData = await GlobalService.getTechStackByExponentId(techStackRequest);\r\n            console.log(responseData);\r\n            const jsonResponseData = responseData.map((item, index) => {\r\n                return { technologyName: item }\r\n            });\r\n            console.log(jsonResponseData);\r\n            setTechnologiesList(jsonResponseData);\r\n            if (technologiesList) {\r\n                setCourseDuration(training.courseDuration);\r\n                setShowUpdateTrainingModal(true);\r\n            }\r\n        } catch (error) {\r\n            console.log(error.message);\r\n            handleTechnicalStackErrors(error.message, training.trainingId);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n        console.log(training.technologyList);\r\n    }\r\n    const handleTechnicalStackErrors = (errorStatus, trainingId) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            handleOpenFilesErrMsg(\"Trainer Id is invalid\", trainingId);\r\n        else if (Constants.ENTITY_NOT_FOUND === errorStatus)\r\n            handleOpenFilesErrMsg(\"Entity Not Found\", trainingId);\r\n        else\r\n            handleOpenFilesErrMsg(\"Could not process your request\", trainingId);\r\n    }\r\n\r\n    const handleUpdateTraining = async () => {\r\n        console.log(trainingId);\r\n        console.log(technologies);\r\n        console.log(technologies.map(tech => tech.technologyName));\r\n        console.log(courseDuration);\r\n        console.log(courseStartDateAndTime);\r\n\r\n        if (technologies === null || technologies.length === 0) { // need to set default technologyList to technologies\r\n            updateTrainingDisplayErrMsg('Please select technologies to train from your technical stack');\r\n        } else if (courseDuration > 120 || courseDuration < 30) {\r\n            updateTrainingDisplayErrMsg('Please give course duration between 30 to 120 (in days)');\r\n        } else if (courseStartDateAndTime === null) {\r\n            updateTrainingDisplayErrMsg('Please select start date and time');\r\n        } else if (!courseContent) {\r\n            updateTrainingDisplayErrMsg('Please upload course content');\r\n        } else if (!introVideo) {\r\n            updateTrainingDisplayErrMsg('Please upload your 1 minute intro video');\r\n        } else if (courseContent.size > 5 * 1024 * 1024) { \r\n            updateTrainingDisplayErrMsg('Course content file size exceeds the maximum limit of 5MB');\r\n        } else if (introVideo.size > 5 * 1024 * 1024) { \r\n            updateTrainingDisplayErrMsg('Intro video file size exceeds the maximum limit of 5MB');\r\n        } else {\r\n            setLoadingBar(true);\r\n            // Update FormData object \r\n            const formData = new FormData();\r\n            formData.append('trainingId', trainingId);\r\n            formData.append('technologyList', (technologies.map(tech => tech.technologyName)));\r\n            formData.append('courseContentFile', courseContent);\r\n            formData.append('introVideoFile', introVideo);\r\n            formData.append('courseDuration', courseDuration);\r\n            formData.append('courseStartDateAndTime', courseStartDateAndTime);\r\n            formData.append('sessionDuration', Constants.SESSION_DURATION);\r\n            console.log(formData);\r\n            try {\r\n                const responseData = await TrainerService.updateTrainingByTrainingId(formData);\r\n                console.log(responseData);\r\n                updateTrainingDisplaySucMsg('Training Updated Successfully');\r\n            } catch (error) {\r\n                handleUpdateTrianingErrors(error.message);\r\n            } finally {\r\n                setLoadingBar(false);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const handleUpdateTrianingErrors = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            updateTrainingDisplayErrMsg(\"Trainer Id is invalid\", trainingId);\r\n        else if (Constants.ENTITY_NOT_FOUND === errorStatus)\r\n            updateTrainingDisplayErrMsg(\"Entity Not Found\", trainingId);\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            updateTrainingDisplayErrMsg(\"Sorry, Our service is down\");\r\n        else if (Constants.FILES_NOT_UPLOADED === errorStatus)\r\n            updateTrainingDisplayErrMsg(\"Files not uploaded, please try again\");\r\n        else\r\n            updateTrainingDisplayErrMsg(\"Could not process your request\", trainingId);\r\n    }\r\n\r\n    const [updateTraingErrMsgDiv, setUpdateTraingErrMsgDiv] = useState(false);\r\n    const [updateTraingErrMsg, setUpdateTraingErrMsg] = useState(\"\");\r\n    //JS for to display err msg\r\n    const updateTrainingDisplayErrMsg = (errorMessage) => {\r\n        setUpdateTraingErrMsg(errorMessage);\r\n        setUpdateTraingErrMsgDiv(true);\r\n        setTimeout(() => {\r\n            setUpdateTraingErrMsg(\"\");\r\n            setUpdateTraingErrMsgDiv(false);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n    const updateTrainingDisplaySucMsg = (errorMessage) => {\r\n        setMessageColor('green');\r\n        setUpdateTraingErrMsg(errorMessage);\r\n        setUpdateTraingErrMsgDiv(true);\r\n        setTimeout(() => {\r\n            setUpdateTraingErrMsg(\"\");\r\n            setUpdateTraingErrMsgDiv(false);\r\n            setMessageColor(Constants.MESSAGE_COLOR);\r\n            handleUpdateTrainingModalClose();\r\n            window.location.reload();\r\n        }, Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);\r\n    }\r\n\r\n    return (\r\n        <div className=\"trainer-rejected-trainings\" style={{ fontSize: '13px' }}>\r\n            { loadingBar && <LoadingBar /> }\r\n            <div className='mt-4' style={{ display: 'flex', flexWrap: 'wrap', maxHeight: '80vh', overflow: 'auto' }}>\r\n                {rejectedTrainings.map((item, index) => (\r\n                    <Card key={index} style={{ width: '22rem', margin: '0.5rem' }} className=\"card\">\r\n                        <Card.Body>\r\n                            <Card.Text>\r\n                                <div className='rejected-training'>\r\n                                    <div className='flex'>\r\n                                        <label style={{ textDecoration: 'underline', fontSize: '15px' }}>{item.courseName + ' Training'}</label>\r\n                                        <button\r\n                                            style={{ float: 'right' }}\r\n                                            className='update-button'\r\n                                            onClick={() => handleUpdateTrainingBtnClick(item)}\r\n                                        >\r\n                                            Update\r\n                                        </button>\r\n                                    </div>\r\n                                    <label>Course : </label> <span>{item.courseName}</span> <br />\r\n                                    <label>Technical-Stack : </label> <span>{item.technologyList.map(tech => tech.technologyName).join(', ')}</span> <br />\r\n                                    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                                        <div>\r\n                                            <label>Course Duration : </label> <span>{item.courseDuration + \" days\"}</span>\r\n                                        </div>\r\n                                        <div>\r\n                                            <label>Start Date : </label> <span>{(Constants.convertUserTimezoneDateTime(item.courseStartDateAndTime)).date}</span>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                                        <div>\r\n                                            <label>Session Duration : </label> <span>{item.sessionDuration}</span>\r\n                                        </div>\r\n                                        <div>\r\n                                            <label>Start Time : </label> <span>{Constants.formatTime((Constants.convertUserTimezoneDateTime(item.courseStartDateAndTime)).time)}</span>\r\n                                        </div>\r\n                                    </div>\r\n                                    <label>Course Content : </label>\r\n                                    <span>\r\n                                        <button\r\n                                            onClick={() => handleOpenCourseContent(item.courseContent, item.trainingId)}\r\n                                            style={{\r\n                                                border: 'none',\r\n                                                background: 'none',\r\n                                                padding: '0',\r\n                                                color: '#1b4962',\r\n                                                textDecoration: 'underline',\r\n                                                cursor: 'pointer',\r\n                                            }}\r\n                                        >\r\n                                            Open Course Content\r\n                                        </button>\r\n                                    </span> <br />\r\n                                    <label>Intro Video : </label>\r\n                                    <span>\r\n                                        <button\r\n                                            onClick={() => handleOpenIntroVideo(item.introVideo, item.trainingId)}\r\n                                            style={{\r\n                                                border: 'none',\r\n                                                background: 'none',\r\n                                                padding: '0',\r\n                                                color: '#1b4962',\r\n                                                textDecoration: 'underline',\r\n                                                cursor: 'pointer',\r\n                                            }}\r\n                                        >\r\n                                            Play Intro Video\r\n                                        </button>\r\n                                    </span>\r\n                                </div>\r\n                                <div>\r\n                                    {fileClicked === item.trainingId && (\r\n                                        <div style={customCssForMsg}>\r\n                                            <label>{openFilesErr}</label>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </Card.Text>\r\n                        </Card.Body>\r\n                        <Card.Footer>\r\n                            <div>\r\n                                <label>Status : </label> <span><strong>{item.adminStatus}</strong></span> <br />\r\n                                <label>Reason : </label> <span><strong>{item.description}</strong></span>\r\n                            </div>\r\n                        </Card.Footer>\r\n                    </Card>\r\n                ))}\r\n                <div>\r\n                    {errMsgDiv &&\r\n                        <div style={customCssForMsg}>\r\n                            <label>{errMsg}</label>\r\n                        </div>}\r\n                </div>\r\n            </div>\r\n            {showIntroVideoModal && (\r\n                <Modal className='intro-video-modal' size='md' show={showIntroVideoModal} onHide={handleIntroVideoModalClose} centered backdrop=\"static\">\r\n                    <Container className='px-5'>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title style={{ fontSize: '18px' }}>\r\n                                Intro Video\r\n                            </Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <div className=\"row\">\r\n                                <div className=\"col\">\r\n                                    {introVideoUrl && (\r\n                                        <div className=\"intro-video-container\">\r\n                                            <div style={{ maxWidth: '100%', height: 'auto', position: 'relative', overflow: 'hidden', paddingTop: '56.25%' }}>\r\n                                                <video src={introVideoUrl} style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }} controls autoPlay muted />\r\n                                            </div>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </Modal.Body>\r\n                    </Container>\r\n                </Modal>\r\n            )}\r\n            {showUpdateTrainingModal && (\r\n                <Modal className='update-training-modal' size='lg' show={showUpdateTrainingModal} onHide={handleUpdateTrainingModalClose} centered backdrop=\"static\">\r\n                    <Container>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title>Update Training</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <div className=\"update-training\" style={{ fontSize: '14px' }}>\r\n                                <div className=\"training-form\">\r\n                                    <form>\r\n                                        <div className='course'>\r\n                                            <label>Selected Course</label>\r\n                                            <Select\r\n                                                getOptionLabel={(options) => {\r\n                                                    return options[\"courseName\"];\r\n                                                }}\r\n                                                getOptionValue={(options) => {\r\n                                                    return options[\"courseName\"];\r\n                                                }}\r\n                                                value={defaultCourse}\r\n                                                isDisabled={true}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='technology-multiselect mt-3'>\r\n                                            <label>Update Technical Stack</label>\r\n                                            <Multiselect\r\n                                                id='technology'\r\n                                                options={technologiesList}\r\n                                                selectedValues={defaultTechnologyList}\r\n                                                onSelect={onSelectTechnology}\r\n                                                onRemove={onRemoveTechnology}\r\n                                                displayValue=\"technologyName\" //technologyName\r\n                                                placeholder=\"Your Technical Stack\"\r\n                                                avoidHighlightFirstOption={true}\r\n                                                style={{\r\n                                                    chips: {\r\n                                                        background: childColor,\r\n                                                    },\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='course-duration mt-3'>\r\n                                            <label>Course Duration <strong>(Number of days)</strong></label>\r\n                                            <input\r\n                                                type='number'\r\n                                                min={30}\r\n                                                max={120}\r\n                                                className='form-control'\r\n                                                placeholder='Duration'\r\n                                                value={courseDuration}\r\n                                                onChange={handleCourseDurationChange}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='date-time mt-3'>\r\n                                            <label>Select Training Start Date and Time <strong>(You can select after 3 days to current date)</strong></label>\r\n                                            <Datetime\r\n                                                value={courseStartDateAndTime}\r\n                                                onChange={handleCourseStartDateChange}\r\n                                                isValidDate={isValidDate}\r\n                                                inputProps={{ \r\n                                                    placeholder: 'Select Date and Time',\r\n                                                    readOnly: true,\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"course-content-file mt-3\">\r\n                                            <label>Upload Course Content <strong>(max size is 5MB)</strong></label>\r\n                                            <input\r\n                                                type=\"file\"\r\n                                                className=\"form-control\"\r\n                                                id=\"courseContentFile\"\r\n                                                accept=\".pdf,.doc,.docx\"\r\n                                                onChange={handleCourseContentFile}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='intro-video-file mt-3'>\r\n                                            <label>Upload Your Intro Video <strong>(1 minute) (max size is 5MB)</strong></label>\r\n                                            <input\r\n                                                type=\"file\"\r\n                                                className=\"form-control\"\r\n                                                id=\"introVideoFile\"\r\n                                                accept=\"video/*\"\r\n                                                onChange={handleIntroVideoFile}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='mt-2'>\r\n                                            {updateTraingErrMsgDiv &&\r\n                                                <div style={customCssForMsg}>\r\n                                                    <label>{updateTraingErrMsg}</label>\r\n                                                </div>}\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            <div className='update-training-button'>\r\n                                <Button\r\n                                    className='dashboard-button'\r\n                                    onClick={handleUpdateTraining}\r\n                                >\r\n                                    Update\r\n                                </Button>\r\n                            </div>\r\n                        </Modal.Footer>\r\n                    </Container>\r\n                </Modal>\r\n            )}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default TrainerRejectedTrainings;\r\n */"],"mappings":"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":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}