{"ast":null,"code":"import{useEffect,useState}from'react';import AdminService from'../../../../../Services/admin_service/AdminService';import'./Technology.css';import Select from'react-select';import Constants from'../../../../Constants';import GlobalService from'../../../../../Services/global_service/GlobalService';import LoadingBar from'../../../../loading_bar_component/LoadingBar';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Technology(){const[loadingBar,setLoadingBar]=useState(false);const[messageColor,setMessageColor]=useState(Constants.MESSAGE_COLOR);const[technologyName,setTechnologyName]=useState('');const handleTechnologyName=e=>setTechnologyName(e.target.value);const[technologyList,setTechnologyList]=useState([]);useEffect(()=>{const getAllTechnology=async()=>{setLoadingBar(true);try{const responseData=await GlobalService.getAllTechnology();console.log(responseData);setTechnologyList(responseData);}catch(error){console.log(error.message);}finally{setLoadingBar(false);}};getAllTechnology();},[]);//Fields for to display err msg div and label\nconst[errMsgDiv,setErrMsgDiv]=useState(false);const[errMsg,setErrMsg]=useState(\"\");//JS for to display err msg when validation for pattern fails for inputs\nconst addTechnologyDisplayErrMsg=errorMessage=>{setErrMsg(errorMessage);setErrMsgDiv(true);setTimeout(()=>{setErrMsg(\"\");setErrMsgDiv(false);},Constants.SET_TIME_OUT_FOR_ERROR_MSG);};//JS for to display success msg\nconst addTechnologyDisplaySucMsg=errorMessage=>{setMessageColor('green');setErrMsg(errorMessage);setErrMsgDiv(true);setTimeout(()=>{setErrMsg(\"\");setErrMsgDiv(false);setMessageColor(Constants.MESSAGE_COLOR);},Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);};const handleAddTechnology=async()=>{if(technologyName===null||technologyName===''){addTechnologyDisplayErrMsg('Technical Stack should not be null or empty');}else{setLoadingBar(true);const request={technologyName:technologyName};try{const responseData=await AdminService.addTechnology(request);console.log(responseData);addTechnologyDisplaySucMsg('Technical Stack Added Succesfully');}catch(error){handleAddTechnologyError(error.message);}finally{setLoadingBar(false);}}};const handleAddTechnologyError=errorStatus=>{if(Constants.INVALID_REQUEST_FIELD===errorStatus)addTechnologyDisplayErrMsg(\"Please enter valid inputs fields\");else if(Constants.EXISTING_TECHNOLOGY===errorStatus)addTechnologyDisplayErrMsg(\"Technical Stack already existed\");else if(Constants.BREEZE_DATABASE_EXCEPTION===errorStatus)addTechnologyDisplayErrMsg(\"Sorry, Our service is down\");else addTechnologyDisplayErrMsg(\"Could not process your request\");};const childColor=getComputedStyle(document.documentElement).getPropertyValue('--child-color');const whiteColor=getComputedStyle(document.documentElement).getPropertyValue('--white-color');// custom css for technology input fields for Select component from react-select\nconst customCssForTechnologyFlds={option:(provided,state)=>({...provided,backgroundColor:state.isFocused?childColor:'',color:state.isFocused?whiteColor:'',':hover':{backgroundColor:childColor,color:whiteColor}}),control:(provided,state)=>({...provided,maxWidth:'400px'}),menu:(provided,state)=>({...provided,maxWidth:'400px'})};const customCssForMsg={fontSize:'medium',fontWeight:'700',color:messageColor};return/*#__PURE__*/_jsxs(\"div\",{className:\"technology\",children:[loadingBar&&/*#__PURE__*/_jsx(LoadingBar,{}),/*#__PURE__*/_jsxs(\"div\",{className:\"add-technology\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Enter New Technical Stack\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",className:\"add-technology-input\",value:technologyName,onChange:handleTechnologyName}),errMsgDiv&&/*#__PURE__*/_jsx(\"div\",{style:customCssForMsg,children:/*#__PURE__*/_jsx(\"label\",{children:errMsg})}),/*#__PURE__*/_jsx(\"button\",{className:\"dashboard-button\",onClick:handleAddTechnology,children:\"Add\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"view-technology mt-5\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"View Technical Stack\"}),/*#__PURE__*/_jsx(Select,{options:technologyList,getOptionLabel:options=>{return options[\"technologyName\"];},getOptionValue:options=>{return options[\"technologyName\"];},placeholder:\"Present Technical Stack\",styles:customCssForTechnologyFlds})]})]});}export default Technology;","map":{"version":3,"names":["useEffect","useState","AdminService","Select","Constants","GlobalService","LoadingBar","jsx","_jsx","jsxs","_jsxs","Technology","loadingBar","setLoadingBar","messageColor","setMessageColor","MESSAGE_COLOR","technologyName","setTechnologyName","handleTechnologyName","e","target","value","technologyList","setTechnologyList","getAllTechnology","responseData","console","log","error","message","errMsgDiv","setErrMsgDiv","errMsg","setErrMsg","addTechnologyDisplayErrMsg","errorMessage","setTimeout","SET_TIME_OUT_FOR_ERROR_MSG","addTechnologyDisplaySucMsg","SET_TIME_OUT_FOR_SUCCESS_MSG","handleAddTechnology","request","addTechnology","handleAddTechnologyError","errorStatus","INVALID_REQUEST_FIELD","EXISTING_TECHNOLOGY","BREEZE_DATABASE_EXCEPTION","childColor","getComputedStyle","document","documentElement","getPropertyValue","whiteColor","customCssForTechnologyFlds","option","provided","state","backgroundColor","isFocused","color","control","maxWidth","menu","customCssForMsg","fontSize","fontWeight","className","children","type","onChange","style","onClick","options","getOptionLabel","getOptionValue","placeholder","styles"],"sources":["C:/Users/DELL/Documents/prepswisefinalprojects/breeze(15)-frontend/breeze/src/components/dashboard_component/feature_component/admin_feature_component/technology_component/Technology.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport AdminService from '../../../../../Services/admin_service/AdminService';\r\nimport './Technology.css';\r\nimport Select from 'react-select';\r\nimport Constants from '../../../../Constants';\r\nimport GlobalService from '../../../../../Services/global_service/GlobalService';\r\nimport LoadingBar from '../../../../loading_bar_component/LoadingBar';\r\n\r\nfunction Technology() {\r\n\r\n    const [loadingBar, setLoadingBar] = useState(false);\r\n\r\n    const [messageColor, setMessageColor] = useState(Constants.MESSAGE_COLOR);\r\n\r\n    const [technologyName, setTechnologyName] = useState('');\r\n    const handleTechnologyName = (e) => setTechnologyName(e.target.value);\r\n\r\n    const [technologyList, setTechnologyList] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const getAllTechnology = async () => {\r\n            setLoadingBar(true);\r\n            try {\r\n                const responseData = await GlobalService.getAllTechnology();\r\n                console.log(responseData);\r\n                setTechnologyList(responseData);\r\n            } catch (error) {\r\n                console.log(error.message);\r\n            } finally {\r\n                setLoadingBar(false);\r\n            }\r\n        };\r\n        getAllTechnology();\r\n    }, []);\r\n\r\n    //Fields for to display err msg div and label\r\n    const [errMsgDiv, setErrMsgDiv] = useState(false);\r\n    const [errMsg, setErrMsg] = useState(\"\");\r\n\r\n    //JS for to display err msg when validation for pattern fails for inputs\r\n    const addTechnologyDisplayErrMsg = (errorMessage) => {\r\n        setErrMsg(errorMessage);\r\n        setErrMsgDiv(true);\r\n        setTimeout(() => {\r\n            setErrMsg(\"\");\r\n            setErrMsgDiv(false);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n\r\n    //JS for to display success msg\r\n    const addTechnologyDisplaySucMsg = (errorMessage) => {\r\n        setMessageColor('green');\r\n        setErrMsg(errorMessage);\r\n        setErrMsgDiv(true);\r\n        setTimeout(() => {\r\n            setErrMsg(\"\");\r\n            setErrMsgDiv(false);\r\n            setMessageColor(Constants.MESSAGE_COLOR);\r\n        }, Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);\r\n    }\r\n\r\n    const handleAddTechnology = async () => {\r\n        if (technologyName === null || technologyName === '') {\r\n            addTechnologyDisplayErrMsg('Technical Stack should not be null or empty');\r\n        } else {\r\n            setLoadingBar(true);\r\n            const request = {\r\n                technologyName: technologyName,\r\n            }\r\n            try {\r\n                const responseData = await AdminService.addTechnology(request);\r\n                console.log(responseData);\r\n                addTechnologyDisplaySucMsg('Technical Stack Added Succesfully');\r\n            } catch (error) {\r\n                handleAddTechnologyError(error.message);\r\n            } finally {\r\n                setLoadingBar(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleAddTechnologyError = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            addTechnologyDisplayErrMsg(\"Please enter valid inputs fields\");\r\n        else if (Constants.EXISTING_TECHNOLOGY === errorStatus)\r\n            addTechnologyDisplayErrMsg(\"Technical Stack already existed\");\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            addTechnologyDisplayErrMsg(\"Sorry, Our service is down\");\r\n        else\r\n            addTechnologyDisplayErrMsg(\"Could not process your request\");\r\n    }\r\n\r\n    const childColor = getComputedStyle(document.documentElement).getPropertyValue('--child-color');\r\n    const whiteColor = getComputedStyle(document.documentElement).getPropertyValue('--white-color');\r\n\r\n    // custom css for technology input fields for Select component from react-select\r\n    const customCssForTechnologyFlds = {\r\n        option: (provided, state) => ({\r\n            ...provided,\r\n            backgroundColor: state.isFocused ? childColor : '',\r\n            color: state.isFocused ? whiteColor : '',\r\n            ':hover': {\r\n                backgroundColor: childColor,\r\n                color: whiteColor,\r\n            },\r\n        }),\r\n        control: (provided, state) => ({\r\n            ...provided,\r\n            maxWidth: '400px',\r\n        }),\r\n        menu: (provided, state) => ({\r\n            ...provided,\r\n            maxWidth: '400px',\r\n        }),\r\n    };\r\n\r\n    const customCssForMsg = {\r\n        fontSize: 'medium',\r\n        fontWeight: '700',\r\n        color: messageColor,\r\n    }\r\n\r\n    return (\r\n        <div className='technology'>\r\n            { loadingBar && <LoadingBar /> }\r\n            <div className=\"add-technology\">\r\n                <label>Enter New Technical Stack</label>\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"add-technology-input\"\r\n                    value={technologyName}\r\n                    onChange={handleTechnologyName}\r\n                />\r\n                {errMsgDiv &&\r\n                    <div style={customCssForMsg}>\r\n                        <label>{errMsg}</label>\r\n                    </div>}\r\n                <button\r\n                    className='dashboard-button'\r\n                    onClick={handleAddTechnology}\r\n                >\r\n                    Add\r\n                </button>\r\n            </div>\r\n            <div className='view-technology mt-5'>\r\n                <label>View Technical Stack</label>\r\n                <Select\r\n                    options={technologyList}\r\n                    getOptionLabel={(options) => {\r\n                        return options[\"technologyName\"];\r\n                    }}\r\n                    getOptionValue={(options) => {\r\n                        return options[\"technologyName\"];\r\n                    }}\r\n                    placeholder='Present Technical Stack'\r\n                    styles={customCssForTechnologyFlds}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Technology;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}