{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Documents\\\\prepswisefinalprojects\\\\breeze (15)-frontend\\\\breeze\\\\src\\\\components\\\\dashboard_component\\\\feature_component\\\\exponent_feature_component\\\\interview_supporter_feature_component\\\\approved_interview_support_component\\\\ExponentApprovedInterviewSupport.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport LoadingBar from '../../../../../loading_bar_component/LoadingBar';\nimport './ExponentApprovedInterviewSupport.css';\nimport Constants from '../../../../../Constants';\nimport InterviewSupporterService from '../../../../../../Services/exponent_service/InterviewSupporterService';\nimport { Button, Card, Container, Modal } from 'react-bootstrap';\nimport GlobalService from '../../../../../../Services/global_service/GlobalService';\nimport Multiselect from 'multiselect-react-dropdown';\nimport { FaRedo } from 'react-icons/fa';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ExponentApprovedInterviewSupport() {\n  _s();\n  const [loadingBar, setLoadingBar] = useState(false);\n  const [approvedInterviewSupport, setApprovedInterviewSupport] = useState(null);\n  const userId = localStorage.getItem(\"breezeUserId\");\n  const getApprovedInterviewSupportByExponentId = async () => {\n    setLoadingBar(true);\n    const request = {\n      exponentId: userId\n    };\n    try {\n      const responseData = await InterviewSupporterService.exponentApprovedInterviewSupport(request);\n      console.log(responseData);\n      setApprovedInterviewSupport(responseData);\n    } catch (error) {\n      console.log(error.message);\n      handleExponentApprovedInterviewSupportErrors(error.message);\n    } finally {\n      setLoadingBar(false);\n    }\n  };\n  useEffect(() => {\n    getApprovedInterviewSupportByExponentId();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const handleExponentApprovedInterviewSupportErrors = errorStatus => {\n    if (Constants.INVALID_REQUEST_FIELD === errorStatus) approvedInterviewSupportDisplayErrMsg(\"Interview Supporter Id is invalid\");else if (Constants.ENTITY_NOT_FOUND === errorStatus) approvedInterviewSupportDisplayErrMsg(\"You Have No Approved Interview Support\");else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus) approvedInterviewSupportDisplayErrMsg(\"Sorry, Our service is down\");else approvedInterviewSupportDisplayErrMsg(\"Could not process your request\");\n  };\n\n  //Fields for to display err msg div and label\n  const [messageColor, setMessageColor] = useState(Constants.MESSAGE_COLOR);\n  const [errMsgDiv, setErrMsgDiv] = useState(false);\n  const [errMsg, setErrMsg] = useState(\"\");\n  //JS for to display err msg\n  const approvedInterviewSupportDisplayErrMsg = errorMessage => {\n    setErrMsg(errorMessage);\n    setErrMsgDiv(true);\n    // setTimeout(() => {\n    //     setErrMsg(\"\");\n    //     setErrMsgDiv(false);\n    // }, 3000);\n  };\n  const [showUpdateApprovedInterviewSupportModal, setShowUpdateApprovedInterviewSupportModal] = useState(false);\n  const handleUpdateApprovedInterviewSupportModalClose = () => {\n    setShowUpdateApprovedInterviewSupportModal(false);\n    setTechnologies([]);\n    setTechnologiesList([]);\n    setTimeSlotList([]);\n    setSelectedSlots([]);\n    setDefaultTechnologyList([]);\n  };\n\n  // technology code\n  const [technologies, setTechnologies] = useState([]);\n  const [technologiesList, setTechnologiesList] = useState([]);\n  const [defaultTechnologyList, setDefaultTechnologyList] = useState([]);\n  const onSelectTechnology = (selectedList, selectedItem) => {\n    setTechnologies([...selectedList]);\n    console.log(technologies);\n  };\n  const onRemoveTechnology = (selectedList, removedItem) => {\n    setTechnologies([...selectedList]);\n    console.log(technologies);\n  };\n\n  // time slot code\n  const [timeSlotList, setTimeSlotList] = useState([]);\n  const [selectedSlots, setSelectedSlots] = useState([]);\n  const handleTimeSlotClick = slot => {\n    if (selectedSlots.includes(slot)) {\n      setSelectedSlots(selectedSlots.filter(s => s !== slot));\n    } else {\n      setSelectedSlots([...selectedSlots, slot]);\n    }\n    console.log(selectedSlots);\n  };\n  const handleTimeSlotReload = () => {\n    setSelectedSlots(timeSlotList.filter(slot => slot.isBooked));\n  };\n  const handleUpdateApprovedInterviewSupport = () => {\n    const request = {\n      userId: userId\n    };\n    const getTechStackByExponentId = async () => {\n      setLoadingBar(true);\n      try {\n        const responseData = await GlobalService.getTechStackByExponentId(request);\n        console.log(responseData);\n        const jsonResponseData = responseData.map((item, index) => {\n          return {\n            technologyName: item\n          };\n        });\n        console.log(jsonResponseData);\n        setDefaultTechnologyList(approvedInterviewSupport.technologyList);\n        setTechnologies(approvedInterviewSupport.technologyList);\n        setTechnologiesList(jsonResponseData);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setLoadingBar(false);\n      }\n    };\n    getTechStackByExponentId();\n    const getAllTimeSlot = async () => {\n      setLoadingBar(true);\n      try {\n        const responseData = await GlobalService.getAllTimeSlot();\n        console.log(responseData);\n        const updatedResponseData = responseData.map(slot => {\n          const isBooked = approvedInterviewSupport.timeSlotList.some(approvedSlot => approvedSlot.timeSlotId === slot.timeSlotId);\n          return {\n            ...slot,\n            isBooked: isBooked ? true : slot.isBooked\n          };\n        });\n        console.log(updatedResponseData);\n        setSelectedSlots(updatedResponseData.filter(slot => slot.isBooked));\n        setTimeSlotList(updatedResponseData);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setLoadingBar(false);\n      }\n    };\n    getAllTimeSlot();\n    setShowUpdateApprovedInterviewSupportModal(true);\n  };\n  const handleApprovedUpdateInterviewSupport = async () => {\n    console.log(technologies);\n    console.log(selectedSlots);\n    if (technologies === null || technologies.length === 0) {\n      updateApprovedInterviewSupportDisplayErrMsg('Please select technical stack to give interview support from your technical stack');\n    } else if (selectedSlots === null || selectedSlots.length === 0) {\n      updateApprovedInterviewSupportDisplayErrMsg('Please select Your Available Time Slots');\n    } else {\n      setLoadingBar(true);\n      const request = {\n        interviewSupportId: approvedInterviewSupport.interviewSupportId,\n        technologyList: technologies,\n        timeSlotList: selectedSlots\n      };\n      try {\n        const responseData = await InterviewSupporterService.updateApprovedInterviewSupport(request);\n        console.log(responseData);\n        updateApprovedInterviewSupportDisplaySucMsg('Interview Support Updated Successfully, Our backend team will verify shortly...');\n      } catch (error) {\n        handleUpdateApprovedInterviewSupportErrors(error.message);\n      } finally {\n        setLoadingBar(false);\n      }\n    }\n  };\n  const handleUpdateApprovedInterviewSupportErrors = errorStatus => {\n    if (Constants.INVALID_REQUEST_FIELD === errorStatus) updateApprovedInterviewSupportDisplayErrMsg(\"Inputs are invalid\");else if (Constants.EXISTING_BOOKINGS === errorStatus) updateApprovedInterviewSupportDisplayErrMsg(\"Your Interview Support having bookings, you can't update now\");else if (Constants.ENTITY_NOT_FOUND === errorStatus) updateApprovedInterviewSupportDisplayErrMsg(\"Your Interview Support is not found\");else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus) updateApprovedInterviewSupportDisplayErrMsg(\"Sorry, Our service is down\");else updateApprovedInterviewSupportDisplayErrMsg(\"Could not process your request\");\n  };\n  const [updateApprovedInterviewSupportErrMsgDiv, setUpdateApprovedInterviewSupportErrMsgDiv] = useState(false);\n  const [updateApprovedInterviewSupportErrMsg, setUpdateApprovedInterviewSupportErrMsg] = useState(\"\");\n  //JS for to display err msg\n  const updateApprovedInterviewSupportDisplayErrMsg = errorMessage => {\n    setUpdateApprovedInterviewSupportErrMsg(errorMessage);\n    setUpdateApprovedInterviewSupportErrMsgDiv(true);\n    setTimeout(() => {\n      setUpdateApprovedInterviewSupportErrMsg(\"\");\n      setUpdateApprovedInterviewSupportErrMsgDiv(false);\n    }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\n  };\n  const updateApprovedInterviewSupportDisplaySucMsg = errorMessage => {\n    setMessageColor('green');\n    setUpdateApprovedInterviewSupportErrMsg(errorMessage);\n    setUpdateApprovedInterviewSupportErrMsgDiv(true);\n    setTimeout(() => {\n      setUpdateApprovedInterviewSupportErrMsg(\"\");\n      setUpdateApprovedInterviewSupportErrMsgDiv(false);\n      setMessageColor(Constants.MESSAGE_COLOR);\n      handleUpdateApprovedInterviewSupportModalClose();\n      window.location.reload();\n    }, Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);\n  };\n  const childColor = getComputedStyle(document.documentElement).getPropertyValue('--child-color');\n  const customCssForMsg = {\n    fontSize: 'medium',\n    fontWeight: '700',\n    color: messageColor\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"exponent-approved-interview-support\",\n    children: [loadingBar && /*#__PURE__*/_jsxDEV(LoadingBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 28\n    }, this), approvedInterviewSupport && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"approved-interview-support\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(Card.Body, {\n          children: /*#__PURE__*/_jsxDEV(Card.Text, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"approved-interview-support-data\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  style: {\n                    textDecoration: 'underline',\n                    fontSize: '15px'\n                  },\n                  children: 'Your Interview Support'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 233,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  style: {\n                    float: 'right'\n                  },\n                  className: \"update-button\",\n                  onClick: () => handleUpdateApprovedInterviewSupport(),\n                  children: \"Update\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 234,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Technical-Stack : \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 37\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                children: approvedInterviewSupport.technologyList.map(tech => tech.technologyName).join(', ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 71\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 170\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"time-slots\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"Available Slots : \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 244,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"time-slot-container\",\n                  children: approvedInterviewSupport.timeSlotList.map((item, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    className: \"time-slot-button\",\n                    children: Constants.formatTime(Constants.convertUserTimezoneTime(item.slotStartTime)) + ' - ' + Constants.formatTime(Constants.convertUserTimezoneTime(item.slotEndTime))\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 247,\n                    columnNumber: 49\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 245,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 243,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 25\n        }, this), approvedInterviewSupport.updateStatus && /*#__PURE__*/_jsxDEV(Card.Footer, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Updated Status : \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 37\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              children: approvedInterviewSupport.updateStatus\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 70\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 122\n            }, this), approvedInterviewSupport.updateStatus === Constants.HOLD && /*#__PURE__*/_jsxDEV(\"label\", {\n              style: {\n                fontSize: '13px'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  color: 'red'\n                },\n                children: \"* \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 265,\n                columnNumber: 74\n              }, this), \"Since Your Updated Status is on Hold, Candidates cannot Search Your Interview Support.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 41\n            }, this), approvedInterviewSupport.updateStatus === Constants.REJECTED && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Reason : \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 269,\n                columnNumber: 45\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                children: approvedInterviewSupport.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 269,\n                columnNumber: 70\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 269,\n                columnNumber: 121\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                style: {\n                  fontSize: '13px'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    color: 'red'\n                  },\n                  children: \"* \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 270,\n                  columnNumber: 78\n                }, this), \"Since Your Updated Status is on Rejected, Candidates can Search Your previous Interview Support Technical Stack and Available Slots.\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: errMsgDiv && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: customCssForMsg,\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: errMsg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 13\n    }, this), showUpdateApprovedInterviewSupportModal && /*#__PURE__*/_jsxDEV(Modal, {\n      className: \"update-approved-interview-support-modal\",\n      size: \"xl\",\n      show: showUpdateApprovedInterviewSupportModal,\n      onHide: handleUpdateApprovedInterviewSupportModalClose,\n      centered: true,\n      backdrop: \"static\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n          closeButton: true,\n          children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n            children: \"Update Interview Support\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"update-interview-support\",\n            style: {\n              fontSize: '14px'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"interview-support-form\",\n              children: /*#__PURE__*/_jsxDEV(\"form\", {\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"technology-multiselect mt-3\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Add Technical Stack\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 296,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Multiselect, {\n                    id: \"technology\",\n                    options: technologiesList,\n                    selectedValues: defaultTechnologyList,\n                    disablePreSelectedValues: true,\n                    onSelect: onSelectTechnology,\n                    onRemove: onRemoveTechnology,\n                    displayValue: \"technologyName\" //technologyName\n                    ,\n                    placeholder: \"Your Technical Stack\",\n                    avoidHighlightFirstOption: true,\n                    style: {\n                      chips: {\n                        background: childColor\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 297,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 295,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"time-slots mt-3\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"label-container\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Select Your Available Time Slots for a day\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 316,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"reload-container\",\n                      onClick: handleTimeSlotReload,\n                      children: [/*#__PURE__*/_jsxDEV(FaRedo, {\n                        className: \"reload-icon\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 318,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"reload-text\",\n                        children: \"Uncheck All Slots\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 319,\n                        columnNumber: 53\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 317,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 315,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"time-slot-container\",\n                    children: timeSlotList.map((item, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n                      type: \"button\",\n                      className: `time-slot-button ${selectedSlots.includes(item) ? 'selected' : ''}`,\n                      onClick: () => handleTimeSlotClick(item),\n                      disabled: item.isBooked ? true : false,\n                      children: Constants.formatTime(Constants.convertUserTimezoneTime(item.slotStartTime)) + ' - ' + Constants.formatTime(Constants.convertUserTimezoneTime(item.slotEndTime))\n                    }, index, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 324,\n                      columnNumber: 53\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 322,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 314,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mt-2\",\n                  children: updateApprovedInterviewSupportErrMsgDiv && /*#__PURE__*/_jsxDEV(\"div\", {\n                    style: customCssForMsg,\n                    children: /*#__PURE__*/_jsxDEV(\"label\", {\n                      children: updateApprovedInterviewSupportErrMsg\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 339,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 338,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 336,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 294,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"update-interview-support-button\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              className: \"dashboard-button\",\n              onClick: handleApprovedUpdateInterviewSupport,\n              children: \"Update\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 348,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 9\n  }, this);\n}\n_s(ExponentApprovedInterviewSupport, \"g+EO8k5TAr6kPZ9OW9EEvjdT/2U=\");\n_c = ExponentApprovedInterviewSupport;\nexport default ExponentApprovedInterviewSupport;\n\n/**======================================================================== */\n\n/**\r\n * import { useEffect, useState } from 'react';\r\nimport LoadingBar from '../../../../../loading_bar_component/LoadingBar';\r\nimport './ExponentApprovedInterviewSupport.css';\r\nimport Constants from '../../../../../Constants';\r\nimport InterviewSupporterService from '../../../../../../Services/exponent_service/InterviewSupporterService';\r\nimport { Button, Card, Container, Modal } from 'react-bootstrap';\r\nimport GlobalService from '../../../../../../Services/global_service/GlobalService';\r\nimport Multiselect from 'multiselect-react-dropdown';\r\nimport { FaRedo } from 'react-icons/fa';\r\n\r\nfunction ExponentApprovedInterviewSupport() {\r\n\r\n    const [loadingBar, setLoadingBar] = useState(false);\r\n\r\n    const [approvedInterviewSupport, setApprovedInterviewSupport] = useState(null);\r\n    const userId = localStorage.getItem(\"breezeUserId\");\r\n    const getApprovedInterviewSupportByExponentId = async () => {\r\n        setLoadingBar(true);\r\n        const request = {\r\n            exponentId: userId,\r\n        }\r\n        try {\r\n            const responseData = await InterviewSupporterService.exponentApprovedInterviewSupport(request);\r\n            console.log(responseData);\r\n            setApprovedInterviewSupport(responseData);\r\n        } catch (error) {\r\n            console.log(error.message);\r\n            handleExponentApprovedInterviewSupportErrors(error.message);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        getApprovedInterviewSupportByExponentId();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const handleExponentApprovedInterviewSupportErrors = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            approvedInterviewSupportDisplayErrMsg(\"Interview Supporter Id is invalid\");\r\n        else if (Constants.ENTITY_NOT_FOUND === errorStatus)\r\n            approvedInterviewSupportDisplayErrMsg(\"You Have No Approved Interview Support\");\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            approvedInterviewSupportDisplayErrMsg(\"Sorry, Our service is down\");\r\n        else\r\n            approvedInterviewSupportDisplayErrMsg(\"Could not process your request\");\r\n    }\r\n\r\n    //Fields for to display err msg div and label\r\n    const [messageColor, setMessageColor] = useState(Constants.MESSAGE_COLOR);\r\n    const [errMsgDiv, setErrMsgDiv] = useState(false);\r\n    const [errMsg, setErrMsg] = useState(\"\");\r\n    //JS for to display err msg\r\n    const approvedInterviewSupportDisplayErrMsg = (errorMessage) => {\r\n        setErrMsg(errorMessage);\r\n        setErrMsgDiv(true);\r\n        // setTimeout(() => {\r\n        //     setErrMsg(\"\");\r\n        //     setErrMsgDiv(false);\r\n        // }, 3000);\r\n    }\r\n\r\n    const [showUpdateApprovedInterviewSupportModal, setShowUpdateApprovedInterviewSupportModal] = useState(false);\r\n    const handleUpdateApprovedInterviewSupportModalClose = () => {\r\n        setShowUpdateApprovedInterviewSupportModal(false);\r\n        setTechnologies([]);\r\n        setTechnologiesList([]);\r\n        setTimeSlotList([]);\r\n        setSelectedSlots([]); \r\n    }\r\n\r\n    // technology code\r\n    const [technologies, setTechnologies] = useState([]);\r\n    const [technologiesList, setTechnologiesList] = useState([]);\r\n    const onSelectTechnology = (selectedList, selectedItem) => {\r\n        setTechnologies([...selectedList]);\r\n        console.log(technologies);\r\n    }\r\n    const onRemoveTechnology = (selectedList, removedItem) => {\r\n        setTechnologies([...selectedList]);\r\n        console.log(technologies);\r\n    }\r\n\r\n    // time slot code\r\n    const [timeSlotList, setTimeSlotList] = useState([]);\r\n    const [selectedSlots, setSelectedSlots] = useState([]);\r\n    const handleTimeSlotClick = (slot) => {\r\n        if (selectedSlots.includes(slot)) {\r\n            setSelectedSlots(selectedSlots.filter(s => s !== slot));\r\n        } else {\r\n            setSelectedSlots([...selectedSlots, slot]);\r\n        }\r\n        console.log(selectedSlots);\r\n    };\r\n    const handleTimeSlotReload = () => {\r\n        setSelectedSlots([]);\r\n    };\r\n\r\n    const handleUpdateApprovedInterviewSupport = () => {\r\n\r\n        const request = {\r\n            userId: userId,\r\n        }\r\n\r\n        const getTechStackByExponentId = async () => {\r\n            setLoadingBar(true);\r\n            try {\r\n                const responseData = await GlobalService.getTechStackByExponentId(request);\r\n                console.log(responseData);\r\n                const jsonResponseData = responseData.map((item, index) => {\r\n                    return { technologyName: item }\r\n                });\r\n                console.log(jsonResponseData);\r\n                setTechnologiesList(jsonResponseData);\r\n            } catch (error) {\r\n                console.log(error.message);\r\n            } finally {\r\n                setLoadingBar(false);\r\n            }\r\n        };\r\n        getTechStackByExponentId();\r\n\r\n        const getAllTimeSlot = async () => {\r\n            setLoadingBar(true);\r\n            try {\r\n                const responseData = await GlobalService.getAllTimeSlot();\r\n                console.log(responseData);\r\n                setTimeSlotList(responseData);\r\n            } catch (error) {\r\n                console.log(error.message);\r\n            } finally {\r\n                setLoadingBar(false);\r\n            }\r\n        };\r\n        getAllTimeSlot();\r\n        setShowUpdateApprovedInterviewSupportModal(true);\r\n    }\r\n\r\n    const handleApprovedUpdateInterviewSupport = async () => {\r\n        console.log(technologies);\r\n        console.log(selectedSlots);\r\n\r\n        if (technologies === null || technologies.length === 0) {\r\n            updateApprovedInterviewSupportDisplayErrMsg('Please select technologies to give interview support from your technical stack');\r\n        } else if (selectedSlots === null || selectedSlots.length === 0) {\r\n            updateApprovedInterviewSupportDisplayErrMsg('Please select Your Available Time Slots');\r\n        } else {\r\n            setLoadingBar(true);\r\n            const request = {\r\n                interviewSupportId: approvedInterviewSupport.interviewSupportId,\r\n                technologyList: technologies,\r\n                timeSlotList: selectedSlots,\r\n            }\r\n            try {\r\n                const responseData = await InterviewSupporterService.updateApprovedInterviewSupport(request);\r\n                console.log(responseData);\r\n                updateApprovedInterviewSupportDisplaySucMsg('Interview Support Updated Successfully, Our backend team will verify shortly...');\r\n            } catch (error) {\r\n                handleUpdateApprovedInterviewSupportErrors(error.message);\r\n            } finally {\r\n                setLoadingBar(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleUpdateApprovedInterviewSupportErrors = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            updateApprovedInterviewSupportDisplayErrMsg(\"Inputs are invalid\");\r\n        else if (Constants.EXISTING_BOOKINGS === errorStatus)\r\n            updateApprovedInterviewSupportDisplayErrMsg(\"You Interview Support having bookings, you can't update now\");\r\n        else if (Constants.ENTITY_NOT_FOUND === errorStatus)\r\n            updateApprovedInterviewSupportDisplayErrMsg(\"You Interview Support is not found\");\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            updateApprovedInterviewSupportDisplayErrMsg(\"Sorry, Our service is down\");\r\n        else\r\n            updateApprovedInterviewSupportDisplayErrMsg(\"Could not process your request\");\r\n    }\r\n\r\n    const [updateApprovedInterviewSupportErrMsgDiv, setUpdateApprovedInterviewSupportErrMsgDiv] = useState(false);\r\n    const [updateApprovedInterviewSupportErrMsg, setUpdateApprovedInterviewSupportErrMsg] = useState(\"\");\r\n    //JS for to display err msg\r\n    const updateApprovedInterviewSupportDisplayErrMsg = (errorMessage) => {\r\n        setUpdateApprovedInterviewSupportErrMsg(errorMessage);\r\n        setUpdateApprovedInterviewSupportErrMsgDiv(true);\r\n        setTimeout(() => {\r\n            setUpdateApprovedInterviewSupportErrMsg(\"\");\r\n            setUpdateApprovedInterviewSupportErrMsgDiv(false);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n    const updateApprovedInterviewSupportDisplaySucMsg = (errorMessage) => {\r\n        setMessageColor('green');\r\n        setUpdateApprovedInterviewSupportErrMsg(errorMessage);\r\n        setUpdateApprovedInterviewSupportErrMsgDiv(true);\r\n        setTimeout(() => {\r\n            setUpdateApprovedInterviewSupportErrMsg(\"\");\r\n            setUpdateApprovedInterviewSupportErrMsgDiv(false);\r\n            setMessageColor(Constants.MESSAGE_COLOR);\r\n            handleUpdateApprovedInterviewSupportModalClose();\r\n            window.location.reload();\r\n        }, Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);\r\n    }\r\n\r\n    const childColor = getComputedStyle(document.documentElement).getPropertyValue('--child-color');\r\n\r\n    const customCssForMsg = {\r\n        fontSize: 'medium',\r\n        fontWeight: '700',\r\n        color: messageColor,\r\n    }\r\n\r\n    return (\r\n        <div className='exponent-approved-interview-support'>\r\n            {loadingBar && <LoadingBar />}\r\n            {approvedInterviewSupport && (\r\n                <div className='approved-interview-support'>\r\n                    <Card className='card'>\r\n                        <Card.Body>\r\n                            <Card.Text>\r\n                                <div className='approved-interview-support-data'>\r\n                                    <div>\r\n                                        <label style={{ textDecoration: 'underline', fontSize: '15px' }}>{'Your Interview Support'}</label>\r\n                                        <button\r\n                                            style={{ float: 'right' }}\r\n                                            className='update-button'\r\n                                            onClick={() => handleUpdateApprovedInterviewSupport()}\r\n                                        >\r\n                                            Update\r\n                                        </button>\r\n                                    </div>\r\n                                    <label>Technical-Stack : </label> <span>{approvedInterviewSupport.technologyList.map(tech => tech.technologyName).join(', ')}</span> <br />\r\n                                    <div className='time-slots'>\r\n                                        <label>Available Slots : </label>\r\n                                        <div className='time-slot-container'>\r\n                                            {approvedInterviewSupport.timeSlotList.map((item, index) => (\r\n                                                <button\r\n                                                    key={index}\r\n                                                    type='button'\r\n                                                    className='time-slot-button'\r\n                                                >\r\n                                                    {Constants.formatTime(Constants.convertUserTimezoneTime(item.slotStartTime)) + ' - ' + Constants.formatTime(Constants.convertUserTimezoneTime(item.slotEndTime))}\r\n                                                </button>\r\n                                            ))}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </Card.Text>\r\n                        </Card.Body>\r\n                        { approvedInterviewSupport.updateStatus && (\r\n                            <Card.Footer>\r\n                                <div>\r\n                                    <label>Updated Status : </label> <span>{approvedInterviewSupport.updateStatus}</span><br />\r\n                                    { approvedInterviewSupport.updateStatus === Constants.HOLD && (\r\n                                        <label style={{fontSize:'13px'}}><span style={{color:'red'}}>* </span>Since Your Updated Status is on Hold, Candidates cannot Search Your Interview Support.</label>\r\n                                    )}\r\n                                    { approvedInterviewSupport.updateStatus === Constants.REJECTED && (\r\n                                        <div>\r\n                                            <label>Reason : </label> <span>{approvedInterviewSupport.description}</span><br />\r\n                                            <label style={{fontSize:'13px'}}><span style={{color:'red'}}>* </span>Since Your Updated Status is on Rejected, Candidates can Search Your previous Interview Support Technical Stack and Available Slots.</label>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </Card.Footer>\r\n                        )}\r\n                    </Card>\r\n                </div>\r\n            )}\r\n            <div>\r\n                {errMsgDiv &&\r\n                    <div style={customCssForMsg}>\r\n                        <label>{errMsg}</label>\r\n                    </div>}\r\n            </div>\r\n            {showUpdateApprovedInterviewSupportModal && (\r\n                <Modal className='update-approved-interview-support-modal' size='xl' show={showUpdateApprovedInterviewSupportModal} onHide={handleUpdateApprovedInterviewSupportModalClose} centered backdrop=\"static\">\r\n                    <Container>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title>Update Interview Support</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <div className=\"update-interview-support\" style={{ fontSize: '14px' }}>\r\n                                <div className=\"interview-support-form\">\r\n                                    <form>\r\n                                        <div className='technology-multiselect mt-3'>\r\n                                            <label>Add Technical Stack</label>\r\n                                            <Multiselect\r\n                                                id='technology'\r\n                                                options={technologiesList}\r\n                                                onSelect={onSelectTechnology}\r\n                                                onRemove={onRemoveTechnology}\r\n                                                displayValue=\"technologyName\" //technologyName\r\n                                                placeholder=\"Your Technical Stack\"\r\n                                                avoidHighlightFirstOption={true}\r\n                                                style={{\r\n                                                    chips: {\r\n                                                        background: childColor,\r\n                                                    },\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='time-slots mt-3'>\r\n                                            <div className=\"label-container\">\r\n                                                <label>Select Your Available Time Slots for a day</label>\r\n                                                <div className=\"reload-container\" onClick={handleTimeSlotReload}>\r\n                                                    <FaRedo className=\"reload-icon\" />\r\n                                                    <span className=\"reload-text\">Uncheck All Slots</span>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"time-slot-container\" >\r\n                                                {timeSlotList.map((item, index) => (\r\n                                                    <button\r\n                                                        key={index}\r\n                                                        type='button'\r\n                                                        className={`time-slot-button ${selectedSlots.includes(item) ? 'selected' : ''}`}\r\n                                                        onClick={() => handleTimeSlotClick(item)}\r\n                                                    >\r\n                                                        {Constants.formatTime(Constants.convertUserTimezoneTime(item.slotStartTime)) + ' - ' + Constants.formatTime(Constants.convertUserTimezoneTime(item.slotEndTime))}\r\n                                                    </button>\r\n                                                ))}\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className='mt-2'>\r\n                                            {updateApprovedInterviewSupportErrMsgDiv &&\r\n                                                <div style={customCssForMsg}>\r\n                                                    <label>{updateApprovedInterviewSupportErrMsg}</label>\r\n                                                </div>}\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            <div className='update-interview-support-button'>\r\n                                <Button\r\n                                    className='dashboard-button'\r\n                                    onClick={handleApprovedUpdateInterviewSupport}\r\n                                >\r\n                                    Update\r\n                                </Button>\r\n                            </div>\r\n                        </Modal.Footer>\r\n                    </Container>\r\n                </Modal>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ExponentApprovedInterviewSupport;\r\n */\nvar _c;\n$RefreshReg$(_c, \"ExponentApprovedInterviewSupport\");","map":{"version":3,"names":["useEffect","useState","LoadingBar","Constants","InterviewSupporterService","Button","Card","Container","Modal","GlobalService","Multiselect","FaRedo","jsxDEV","_jsxDEV","ExponentApprovedInterviewSupport","_s","loadingBar","setLoadingBar","approvedInterviewSupport","setApprovedInterviewSupport","userId","localStorage","getItem","getApprovedInterviewSupportByExponentId","request","exponentId","responseData","exponentApprovedInterviewSupport","console","log","error","message","handleExponentApprovedInterviewSupportErrors","errorStatus","INVALID_REQUEST_FIELD","approvedInterviewSupportDisplayErrMsg","ENTITY_NOT_FOUND","BREEZE_DATABASE_EXCEPTION","messageColor","setMessageColor","MESSAGE_COLOR","errMsgDiv","setErrMsgDiv","errMsg","setErrMsg","errorMessage","showUpdateApprovedInterviewSupportModal","setShowUpdateApprovedInterviewSupportModal","handleUpdateApprovedInterviewSupportModalClose","setTechnologies","setTechnologiesList","setTimeSlotList","setSelectedSlots","setDefaultTechnologyList","technologies","technologiesList","defaultTechnologyList","onSelectTechnology","selectedList","selectedItem","onRemoveTechnology","removedItem","timeSlotList","selectedSlots","handleTimeSlotClick","slot","includes","filter","s","handleTimeSlotReload","isBooked","handleUpdateApprovedInterviewSupport","getTechStackByExponentId","jsonResponseData","map","item","index","technologyName","technologyList","getAllTimeSlot","updatedResponseData","some","approvedSlot","timeSlotId","handleApprovedUpdateInterviewSupport","length","updateApprovedInterviewSupportDisplayErrMsg","interviewSupportId","updateApprovedInterviewSupport","updateApprovedInterviewSupportDisplaySucMsg","handleUpdateApprovedInterviewSupportErrors","EXISTING_BOOKINGS","updateApprovedInterviewSupportErrMsgDiv","setUpdateApprovedInterviewSupportErrMsgDiv","updateApprovedInterviewSupportErrMsg","setUpdateApprovedInterviewSupportErrMsg","setTimeout","SET_TIME_OUT_FOR_ERROR_MSG","window","location","reload","SET_TIME_OUT_FOR_SUCCESS_MSG","childColor","getComputedStyle","document","documentElement","getPropertyValue","customCssForMsg","fontSize","fontWeight","color","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Body","Text","style","textDecoration","float","onClick","tech","join","type","formatTime","convertUserTimezoneTime","slotStartTime","slotEndTime","updateStatus","Footer","HOLD","REJECTED","description","size","show","onHide","centered","backdrop","Header","closeButton","Title","id","options","selectedValues","disablePreSelectedValues","onSelect","onRemove","displayValue","placeholder","avoidHighlightFirstOption","chips","background","disabled","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Documents/prepswisefinalprojects/breeze (15)-frontend/breeze/src/components/dashboard_component/feature_component/exponent_feature_component/interview_supporter_feature_component/approved_interview_support_component/ExponentApprovedInterviewSupport.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport LoadingBar from '../../../../../loading_bar_component/LoadingBar';\r\nimport './ExponentApprovedInterviewSupport.css';\r\nimport Constants from '../../../../../Constants';\r\nimport InterviewSupporterService from '../../../../../../Services/exponent_service/InterviewSupporterService';\r\nimport { Button, Card, Container, Modal } from 'react-bootstrap';\r\nimport GlobalService from '../../../../../../Services/global_service/GlobalService';\r\nimport Multiselect from 'multiselect-react-dropdown';\r\nimport { FaRedo } from 'react-icons/fa';\r\n\r\nfunction ExponentApprovedInterviewSupport() {\r\n\r\n    const [loadingBar, setLoadingBar] = useState(false);\r\n\r\n    const [approvedInterviewSupport, setApprovedInterviewSupport] = useState(null);\r\n    const userId = localStorage.getItem(\"breezeUserId\");\r\n    const getApprovedInterviewSupportByExponentId = async () => {\r\n        setLoadingBar(true);\r\n        const request = {\r\n            exponentId: userId,\r\n        }\r\n        try {\r\n            const responseData = await InterviewSupporterService.exponentApprovedInterviewSupport(request);\r\n            console.log(responseData);\r\n            setApprovedInterviewSupport(responseData);\r\n        } catch (error) {\r\n            console.log(error.message);\r\n            handleExponentApprovedInterviewSupportErrors(error.message);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        getApprovedInterviewSupportByExponentId();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const handleExponentApprovedInterviewSupportErrors = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            approvedInterviewSupportDisplayErrMsg(\"Interview Supporter Id is invalid\");\r\n        else if (Constants.ENTITY_NOT_FOUND === errorStatus)\r\n            approvedInterviewSupportDisplayErrMsg(\"You Have No Approved Interview Support\");\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            approvedInterviewSupportDisplayErrMsg(\"Sorry, Our service is down\");\r\n        else\r\n            approvedInterviewSupportDisplayErrMsg(\"Could not process your request\");\r\n    }\r\n\r\n    //Fields for to display err msg div and label\r\n    const [messageColor, setMessageColor] = useState(Constants.MESSAGE_COLOR);\r\n    const [errMsgDiv, setErrMsgDiv] = useState(false);\r\n    const [errMsg, setErrMsg] = useState(\"\");\r\n    //JS for to display err msg\r\n    const approvedInterviewSupportDisplayErrMsg = (errorMessage) => {\r\n        setErrMsg(errorMessage);\r\n        setErrMsgDiv(true);\r\n        // setTimeout(() => {\r\n        //     setErrMsg(\"\");\r\n        //     setErrMsgDiv(false);\r\n        // }, 3000);\r\n    }\r\n\r\n    const [showUpdateApprovedInterviewSupportModal, setShowUpdateApprovedInterviewSupportModal] = useState(false);\r\n    const handleUpdateApprovedInterviewSupportModalClose = () => {\r\n        setShowUpdateApprovedInterviewSupportModal(false);\r\n        setTechnologies([]);\r\n        setTechnologiesList([]);\r\n        setTimeSlotList([]);\r\n        setSelectedSlots([]); \r\n        setDefaultTechnologyList([]);\r\n    }\r\n\r\n    // technology code\r\n    const [technologies, setTechnologies] = useState([]);\r\n    const [technologiesList, setTechnologiesList] = useState([]);\r\n    const [defaultTechnologyList, setDefaultTechnologyList] = useState([]);\r\n    const onSelectTechnology = (selectedList, selectedItem) => {\r\n        setTechnologies([...selectedList]);\r\n        console.log(technologies);\r\n    }\r\n    const onRemoveTechnology = (selectedList, removedItem) => {\r\n        setTechnologies([...selectedList]);\r\n        console.log(technologies);\r\n    }\r\n\r\n    // time slot code\r\n    const [timeSlotList, setTimeSlotList] = useState([]);\r\n    const [selectedSlots, setSelectedSlots] = useState([]);\r\n    const handleTimeSlotClick = (slot) => {\r\n        if (selectedSlots.includes(slot)) {\r\n            setSelectedSlots(selectedSlots.filter(s => s !== slot));\r\n        } else {\r\n            setSelectedSlots([...selectedSlots, slot]);\r\n        }\r\n        console.log(selectedSlots);\r\n    };\r\n    const handleTimeSlotReload = () => {\r\n        setSelectedSlots(timeSlotList.filter(slot => slot.isBooked));\r\n    };\r\n\r\n    const handleUpdateApprovedInterviewSupport = () => {\r\n\r\n        const request = {\r\n            userId: userId,\r\n        }\r\n\r\n        const getTechStackByExponentId = async () => {\r\n            setLoadingBar(true);\r\n            try {\r\n                const responseData = await GlobalService.getTechStackByExponentId(request);\r\n                console.log(responseData);\r\n                const jsonResponseData = responseData.map((item, index) => {\r\n                    return { technologyName: item }\r\n                });\r\n                console.log(jsonResponseData);\r\n                setDefaultTechnologyList(approvedInterviewSupport.technologyList);\r\n                setTechnologies(approvedInterviewSupport.technologyList);\r\n                setTechnologiesList(jsonResponseData);\r\n            } catch (error) {\r\n                console.log(error.message);\r\n            } finally {\r\n                setLoadingBar(false);\r\n            }\r\n        };\r\n        getTechStackByExponentId();\r\n\r\n        const getAllTimeSlot = async () => {\r\n            setLoadingBar(true);\r\n            try {\r\n                const responseData = await GlobalService.getAllTimeSlot();\r\n                console.log(responseData);\r\n                const updatedResponseData = responseData.map(slot => {\r\n                    const isBooked = approvedInterviewSupport.timeSlotList.some(\r\n                        approvedSlot => approvedSlot.timeSlotId === slot.timeSlotId\r\n                    );\r\n                    return { ...slot, isBooked: isBooked ? true : slot.isBooked };\r\n                });\r\n                console.log(updatedResponseData);\r\n                setSelectedSlots(updatedResponseData.filter(slot => slot.isBooked));\r\n                setTimeSlotList(updatedResponseData);\r\n            } catch (error) {\r\n                console.log(error.message);\r\n            } finally {\r\n                setLoadingBar(false);\r\n            }\r\n        };\r\n        getAllTimeSlot();\r\n        setShowUpdateApprovedInterviewSupportModal(true);\r\n    }\r\n\r\n    const handleApprovedUpdateInterviewSupport = async () => {\r\n        console.log(technologies);\r\n        console.log(selectedSlots);\r\n\r\n        if (technologies === null || technologies.length === 0) {\r\n            updateApprovedInterviewSupportDisplayErrMsg('Please select technical stack to give interview support from your technical stack');\r\n        } else if (selectedSlots === null || selectedSlots.length === 0) {\r\n            updateApprovedInterviewSupportDisplayErrMsg('Please select Your Available Time Slots');\r\n        } else {\r\n            setLoadingBar(true);\r\n            const request = {\r\n                interviewSupportId: approvedInterviewSupport.interviewSupportId,\r\n                technologyList: technologies,\r\n                timeSlotList: selectedSlots,\r\n            }\r\n            try {\r\n                const responseData = await InterviewSupporterService.updateApprovedInterviewSupport(request);\r\n                console.log(responseData);\r\n                updateApprovedInterviewSupportDisplaySucMsg('Interview Support Updated Successfully, Our backend team will verify shortly...');\r\n            } catch (error) {\r\n                handleUpdateApprovedInterviewSupportErrors(error.message);\r\n            } finally {\r\n                setLoadingBar(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleUpdateApprovedInterviewSupportErrors = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            updateApprovedInterviewSupportDisplayErrMsg(\"Inputs are invalid\");\r\n        else if (Constants.EXISTING_BOOKINGS === errorStatus)\r\n            updateApprovedInterviewSupportDisplayErrMsg(\"Your Interview Support having bookings, you can't update now\");\r\n        else if (Constants.ENTITY_NOT_FOUND === errorStatus)\r\n            updateApprovedInterviewSupportDisplayErrMsg(\"Your Interview Support is not found\");\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            updateApprovedInterviewSupportDisplayErrMsg(\"Sorry, Our service is down\");\r\n        else\r\n            updateApprovedInterviewSupportDisplayErrMsg(\"Could not process your request\");\r\n    }\r\n\r\n    const [updateApprovedInterviewSupportErrMsgDiv, setUpdateApprovedInterviewSupportErrMsgDiv] = useState(false);\r\n    const [updateApprovedInterviewSupportErrMsg, setUpdateApprovedInterviewSupportErrMsg] = useState(\"\");\r\n    //JS for to display err msg\r\n    const updateApprovedInterviewSupportDisplayErrMsg = (errorMessage) => {\r\n        setUpdateApprovedInterviewSupportErrMsg(errorMessage);\r\n        setUpdateApprovedInterviewSupportErrMsgDiv(true);\r\n        setTimeout(() => {\r\n            setUpdateApprovedInterviewSupportErrMsg(\"\");\r\n            setUpdateApprovedInterviewSupportErrMsgDiv(false);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n    const updateApprovedInterviewSupportDisplaySucMsg = (errorMessage) => {\r\n        setMessageColor('green');\r\n        setUpdateApprovedInterviewSupportErrMsg(errorMessage);\r\n        setUpdateApprovedInterviewSupportErrMsgDiv(true);\r\n        setTimeout(() => {\r\n            setUpdateApprovedInterviewSupportErrMsg(\"\");\r\n            setUpdateApprovedInterviewSupportErrMsgDiv(false);\r\n            setMessageColor(Constants.MESSAGE_COLOR);\r\n            handleUpdateApprovedInterviewSupportModalClose();\r\n            window.location.reload();\r\n        }, Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);\r\n    }\r\n\r\n    const childColor = getComputedStyle(document.documentElement).getPropertyValue('--child-color');\r\n\r\n    const customCssForMsg = {\r\n        fontSize: 'medium',\r\n        fontWeight: '700',\r\n        color: messageColor,\r\n    }\r\n\r\n    return (\r\n        <div className='exponent-approved-interview-support'>\r\n            {loadingBar && <LoadingBar />}\r\n            {approvedInterviewSupport && (\r\n                <div className='approved-interview-support'>\r\n                    <Card className='card'>\r\n                        <Card.Body>\r\n                            <Card.Text>\r\n                                <div className='approved-interview-support-data'>\r\n                                    <div>\r\n                                        <label style={{ textDecoration: 'underline', fontSize: '15px' }}>{'Your Interview Support'}</label>\r\n                                        <button\r\n                                            style={{ float: 'right' }}\r\n                                            className='update-button'\r\n                                            onClick={() => handleUpdateApprovedInterviewSupport()}\r\n                                        >\r\n                                            Update\r\n                                        </button>\r\n                                    </div>\r\n                                    <label>Technical-Stack : </label> <span>{approvedInterviewSupport.technologyList.map(tech => tech.technologyName).join(', ')}</span> <br />\r\n                                    <div className='time-slots'>\r\n                                        <label>Available Slots : </label>\r\n                                        <div className='time-slot-container'>\r\n                                            {approvedInterviewSupport.timeSlotList.map((item, index) => (\r\n                                                <button\r\n                                                    key={index}\r\n                                                    type='button'\r\n                                                    className='time-slot-button'\r\n                                                >\r\n                                                    {Constants.formatTime(Constants.convertUserTimezoneTime(item.slotStartTime)) + ' - ' + Constants.formatTime(Constants.convertUserTimezoneTime(item.slotEndTime))}\r\n                                                </button>\r\n                                            ))}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </Card.Text>\r\n                        </Card.Body>\r\n                        { approvedInterviewSupport.updateStatus && (\r\n                            <Card.Footer>\r\n                                <div>\r\n                                    <label>Updated Status : </label> <span>{approvedInterviewSupport.updateStatus}</span><br />\r\n                                    { approvedInterviewSupport.updateStatus === Constants.HOLD && (\r\n                                        <label style={{fontSize:'13px'}}><span style={{color:'red'}}>* </span>Since Your Updated Status is on Hold, Candidates cannot Search Your Interview Support.</label>\r\n                                    )}\r\n                                    { approvedInterviewSupport.updateStatus === Constants.REJECTED && (\r\n                                        <div>\r\n                                            <label>Reason : </label> <span>{approvedInterviewSupport.description}</span><br />\r\n                                            <label style={{fontSize:'13px'}}><span style={{color:'red'}}>* </span>Since Your Updated Status is on Rejected, Candidates can Search Your previous Interview Support Technical Stack and Available Slots.</label>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </Card.Footer>\r\n                        )}\r\n                    </Card>\r\n                </div>\r\n            )}\r\n            <div>\r\n                {errMsgDiv &&\r\n                    <div style={customCssForMsg}>\r\n                        <label>{errMsg}</label>\r\n                    </div>}\r\n            </div>\r\n            {showUpdateApprovedInterviewSupportModal && (\r\n                <Modal className='update-approved-interview-support-modal' size='xl' show={showUpdateApprovedInterviewSupportModal} onHide={handleUpdateApprovedInterviewSupportModalClose} centered backdrop=\"static\">\r\n                    <Container>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title>Update Interview Support</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <div className=\"update-interview-support\" style={{ fontSize: '14px' }}>\r\n                                <div className=\"interview-support-form\">\r\n                                    <form>\r\n                                        <div className='technology-multiselect mt-3'>\r\n                                            <label>Add Technical Stack</label>\r\n                                            <Multiselect\r\n                                                id='technology'\r\n                                                options={technologiesList}\r\n                                                selectedValues={defaultTechnologyList}\r\n                                                disablePreSelectedValues\r\n                                                onSelect={onSelectTechnology}\r\n                                                onRemove={onRemoveTechnology}                                                \r\n                                                displayValue=\"technologyName\" //technologyName\r\n                                                placeholder=\"Your Technical Stack\"\r\n                                                avoidHighlightFirstOption={true}\r\n                                                style={{\r\n                                                    chips: {\r\n                                                        background: childColor,\r\n                                                    },\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='time-slots mt-3'>\r\n                                            <div className=\"label-container\">\r\n                                                <label>Select Your Available Time Slots for a day</label>\r\n                                                <div className=\"reload-container\" onClick={handleTimeSlotReload}>\r\n                                                    <FaRedo className=\"reload-icon\" />\r\n                                                    <span className=\"reload-text\">Uncheck All Slots</span>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"time-slot-container\" >\r\n                                                {timeSlotList.map((item, index) => (\r\n                                                    <button\r\n                                                        key={index}\r\n                                                        type='button'\r\n                                                        className={`time-slot-button ${selectedSlots.includes(item) ? 'selected' : ''}`}\r\n                                                        onClick={() => handleTimeSlotClick(item)}\r\n                                                        disabled={item.isBooked ? true : false}\r\n                                                    >\r\n                                                        {Constants.formatTime(Constants.convertUserTimezoneTime(item.slotStartTime)) + ' - ' + Constants.formatTime(Constants.convertUserTimezoneTime(item.slotEndTime))}\r\n                                                    </button>\r\n                                                ))}\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className='mt-2'>\r\n                                            {updateApprovedInterviewSupportErrMsgDiv &&\r\n                                                <div style={customCssForMsg}>\r\n                                                    <label>{updateApprovedInterviewSupportErrMsg}</label>\r\n                                                </div>}\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            <div className='update-interview-support-button'>\r\n                                <Button\r\n                                    className='dashboard-button'\r\n                                    onClick={handleApprovedUpdateInterviewSupport}\r\n                                >\r\n                                    Update\r\n                                </Button>\r\n                            </div>\r\n                        </Modal.Footer>\r\n                    </Container>\r\n                </Modal>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ExponentApprovedInterviewSupport;\r\n\r\n\r\n/**======================================================================== */\r\n\r\n/**\r\n * import { useEffect, useState } from 'react';\r\nimport LoadingBar from '../../../../../loading_bar_component/LoadingBar';\r\nimport './ExponentApprovedInterviewSupport.css';\r\nimport Constants from '../../../../../Constants';\r\nimport InterviewSupporterService from '../../../../../../Services/exponent_service/InterviewSupporterService';\r\nimport { Button, Card, Container, Modal } from 'react-bootstrap';\r\nimport GlobalService from '../../../../../../Services/global_service/GlobalService';\r\nimport Multiselect from 'multiselect-react-dropdown';\r\nimport { FaRedo } from 'react-icons/fa';\r\n\r\nfunction ExponentApprovedInterviewSupport() {\r\n\r\n    const [loadingBar, setLoadingBar] = useState(false);\r\n\r\n    const [approvedInterviewSupport, setApprovedInterviewSupport] = useState(null);\r\n    const userId = localStorage.getItem(\"breezeUserId\");\r\n    const getApprovedInterviewSupportByExponentId = async () => {\r\n        setLoadingBar(true);\r\n        const request = {\r\n            exponentId: userId,\r\n        }\r\n        try {\r\n            const responseData = await InterviewSupporterService.exponentApprovedInterviewSupport(request);\r\n            console.log(responseData);\r\n            setApprovedInterviewSupport(responseData);\r\n        } catch (error) {\r\n            console.log(error.message);\r\n            handleExponentApprovedInterviewSupportErrors(error.message);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        getApprovedInterviewSupportByExponentId();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const handleExponentApprovedInterviewSupportErrors = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            approvedInterviewSupportDisplayErrMsg(\"Interview Supporter Id is invalid\");\r\n        else if (Constants.ENTITY_NOT_FOUND === errorStatus)\r\n            approvedInterviewSupportDisplayErrMsg(\"You Have No Approved Interview Support\");\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            approvedInterviewSupportDisplayErrMsg(\"Sorry, Our service is down\");\r\n        else\r\n            approvedInterviewSupportDisplayErrMsg(\"Could not process your request\");\r\n    }\r\n\r\n    //Fields for to display err msg div and label\r\n    const [messageColor, setMessageColor] = useState(Constants.MESSAGE_COLOR);\r\n    const [errMsgDiv, setErrMsgDiv] = useState(false);\r\n    const [errMsg, setErrMsg] = useState(\"\");\r\n    //JS for to display err msg\r\n    const approvedInterviewSupportDisplayErrMsg = (errorMessage) => {\r\n        setErrMsg(errorMessage);\r\n        setErrMsgDiv(true);\r\n        // setTimeout(() => {\r\n        //     setErrMsg(\"\");\r\n        //     setErrMsgDiv(false);\r\n        // }, 3000);\r\n    }\r\n\r\n    const [showUpdateApprovedInterviewSupportModal, setShowUpdateApprovedInterviewSupportModal] = useState(false);\r\n    const handleUpdateApprovedInterviewSupportModalClose = () => {\r\n        setShowUpdateApprovedInterviewSupportModal(false);\r\n        setTechnologies([]);\r\n        setTechnologiesList([]);\r\n        setTimeSlotList([]);\r\n        setSelectedSlots([]); \r\n    }\r\n\r\n    // technology code\r\n    const [technologies, setTechnologies] = useState([]);\r\n    const [technologiesList, setTechnologiesList] = useState([]);\r\n    const onSelectTechnology = (selectedList, selectedItem) => {\r\n        setTechnologies([...selectedList]);\r\n        console.log(technologies);\r\n    }\r\n    const onRemoveTechnology = (selectedList, removedItem) => {\r\n        setTechnologies([...selectedList]);\r\n        console.log(technologies);\r\n    }\r\n\r\n    // time slot code\r\n    const [timeSlotList, setTimeSlotList] = useState([]);\r\n    const [selectedSlots, setSelectedSlots] = useState([]);\r\n    const handleTimeSlotClick = (slot) => {\r\n        if (selectedSlots.includes(slot)) {\r\n            setSelectedSlots(selectedSlots.filter(s => s !== slot));\r\n        } else {\r\n            setSelectedSlots([...selectedSlots, slot]);\r\n        }\r\n        console.log(selectedSlots);\r\n    };\r\n    const handleTimeSlotReload = () => {\r\n        setSelectedSlots([]);\r\n    };\r\n\r\n    const handleUpdateApprovedInterviewSupport = () => {\r\n\r\n        const request = {\r\n            userId: userId,\r\n        }\r\n\r\n        const getTechStackByExponentId = async () => {\r\n            setLoadingBar(true);\r\n            try {\r\n                const responseData = await GlobalService.getTechStackByExponentId(request);\r\n                console.log(responseData);\r\n                const jsonResponseData = responseData.map((item, index) => {\r\n                    return { technologyName: item }\r\n                });\r\n                console.log(jsonResponseData);\r\n                setTechnologiesList(jsonResponseData);\r\n            } catch (error) {\r\n                console.log(error.message);\r\n            } finally {\r\n                setLoadingBar(false);\r\n            }\r\n        };\r\n        getTechStackByExponentId();\r\n\r\n        const getAllTimeSlot = async () => {\r\n            setLoadingBar(true);\r\n            try {\r\n                const responseData = await GlobalService.getAllTimeSlot();\r\n                console.log(responseData);\r\n                setTimeSlotList(responseData);\r\n            } catch (error) {\r\n                console.log(error.message);\r\n            } finally {\r\n                setLoadingBar(false);\r\n            }\r\n        };\r\n        getAllTimeSlot();\r\n        setShowUpdateApprovedInterviewSupportModal(true);\r\n    }\r\n\r\n    const handleApprovedUpdateInterviewSupport = async () => {\r\n        console.log(technologies);\r\n        console.log(selectedSlots);\r\n\r\n        if (technologies === null || technologies.length === 0) {\r\n            updateApprovedInterviewSupportDisplayErrMsg('Please select technologies to give interview support from your technical stack');\r\n        } else if (selectedSlots === null || selectedSlots.length === 0) {\r\n            updateApprovedInterviewSupportDisplayErrMsg('Please select Your Available Time Slots');\r\n        } else {\r\n            setLoadingBar(true);\r\n            const request = {\r\n                interviewSupportId: approvedInterviewSupport.interviewSupportId,\r\n                technologyList: technologies,\r\n                timeSlotList: selectedSlots,\r\n            }\r\n            try {\r\n                const responseData = await InterviewSupporterService.updateApprovedInterviewSupport(request);\r\n                console.log(responseData);\r\n                updateApprovedInterviewSupportDisplaySucMsg('Interview Support Updated Successfully, Our backend team will verify shortly...');\r\n            } catch (error) {\r\n                handleUpdateApprovedInterviewSupportErrors(error.message);\r\n            } finally {\r\n                setLoadingBar(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleUpdateApprovedInterviewSupportErrors = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            updateApprovedInterviewSupportDisplayErrMsg(\"Inputs are invalid\");\r\n        else if (Constants.EXISTING_BOOKINGS === errorStatus)\r\n            updateApprovedInterviewSupportDisplayErrMsg(\"You Interview Support having bookings, you can't update now\");\r\n        else if (Constants.ENTITY_NOT_FOUND === errorStatus)\r\n            updateApprovedInterviewSupportDisplayErrMsg(\"You Interview Support is not found\");\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            updateApprovedInterviewSupportDisplayErrMsg(\"Sorry, Our service is down\");\r\n        else\r\n            updateApprovedInterviewSupportDisplayErrMsg(\"Could not process your request\");\r\n    }\r\n\r\n    const [updateApprovedInterviewSupportErrMsgDiv, setUpdateApprovedInterviewSupportErrMsgDiv] = useState(false);\r\n    const [updateApprovedInterviewSupportErrMsg, setUpdateApprovedInterviewSupportErrMsg] = useState(\"\");\r\n    //JS for to display err msg\r\n    const updateApprovedInterviewSupportDisplayErrMsg = (errorMessage) => {\r\n        setUpdateApprovedInterviewSupportErrMsg(errorMessage);\r\n        setUpdateApprovedInterviewSupportErrMsgDiv(true);\r\n        setTimeout(() => {\r\n            setUpdateApprovedInterviewSupportErrMsg(\"\");\r\n            setUpdateApprovedInterviewSupportErrMsgDiv(false);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n    const updateApprovedInterviewSupportDisplaySucMsg = (errorMessage) => {\r\n        setMessageColor('green');\r\n        setUpdateApprovedInterviewSupportErrMsg(errorMessage);\r\n        setUpdateApprovedInterviewSupportErrMsgDiv(true);\r\n        setTimeout(() => {\r\n            setUpdateApprovedInterviewSupportErrMsg(\"\");\r\n            setUpdateApprovedInterviewSupportErrMsgDiv(false);\r\n            setMessageColor(Constants.MESSAGE_COLOR);\r\n            handleUpdateApprovedInterviewSupportModalClose();\r\n            window.location.reload();\r\n        }, Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);\r\n    }\r\n\r\n    const childColor = getComputedStyle(document.documentElement).getPropertyValue('--child-color');\r\n\r\n    const customCssForMsg = {\r\n        fontSize: 'medium',\r\n        fontWeight: '700',\r\n        color: messageColor,\r\n    }\r\n\r\n    return (\r\n        <div className='exponent-approved-interview-support'>\r\n            {loadingBar && <LoadingBar />}\r\n            {approvedInterviewSupport && (\r\n                <div className='approved-interview-support'>\r\n                    <Card className='card'>\r\n                        <Card.Body>\r\n                            <Card.Text>\r\n                                <div className='approved-interview-support-data'>\r\n                                    <div>\r\n                                        <label style={{ textDecoration: 'underline', fontSize: '15px' }}>{'Your Interview Support'}</label>\r\n                                        <button\r\n                                            style={{ float: 'right' }}\r\n                                            className='update-button'\r\n                                            onClick={() => handleUpdateApprovedInterviewSupport()}\r\n                                        >\r\n                                            Update\r\n                                        </button>\r\n                                    </div>\r\n                                    <label>Technical-Stack : </label> <span>{approvedInterviewSupport.technologyList.map(tech => tech.technologyName).join(', ')}</span> <br />\r\n                                    <div className='time-slots'>\r\n                                        <label>Available Slots : </label>\r\n                                        <div className='time-slot-container'>\r\n                                            {approvedInterviewSupport.timeSlotList.map((item, index) => (\r\n                                                <button\r\n                                                    key={index}\r\n                                                    type='button'\r\n                                                    className='time-slot-button'\r\n                                                >\r\n                                                    {Constants.formatTime(Constants.convertUserTimezoneTime(item.slotStartTime)) + ' - ' + Constants.formatTime(Constants.convertUserTimezoneTime(item.slotEndTime))}\r\n                                                </button>\r\n                                            ))}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </Card.Text>\r\n                        </Card.Body>\r\n                        { approvedInterviewSupport.updateStatus && (\r\n                            <Card.Footer>\r\n                                <div>\r\n                                    <label>Updated Status : </label> <span>{approvedInterviewSupport.updateStatus}</span><br />\r\n                                    { approvedInterviewSupport.updateStatus === Constants.HOLD && (\r\n                                        <label style={{fontSize:'13px'}}><span style={{color:'red'}}>* </span>Since Your Updated Status is on Hold, Candidates cannot Search Your Interview Support.</label>\r\n                                    )}\r\n                                    { approvedInterviewSupport.updateStatus === Constants.REJECTED && (\r\n                                        <div>\r\n                                            <label>Reason : </label> <span>{approvedInterviewSupport.description}</span><br />\r\n                                            <label style={{fontSize:'13px'}}><span style={{color:'red'}}>* </span>Since Your Updated Status is on Rejected, Candidates can Search Your previous Interview Support Technical Stack and Available Slots.</label>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </Card.Footer>\r\n                        )}\r\n                    </Card>\r\n                </div>\r\n            )}\r\n            <div>\r\n                {errMsgDiv &&\r\n                    <div style={customCssForMsg}>\r\n                        <label>{errMsg}</label>\r\n                    </div>}\r\n            </div>\r\n            {showUpdateApprovedInterviewSupportModal && (\r\n                <Modal className='update-approved-interview-support-modal' size='xl' show={showUpdateApprovedInterviewSupportModal} onHide={handleUpdateApprovedInterviewSupportModalClose} centered backdrop=\"static\">\r\n                    <Container>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title>Update Interview Support</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <div className=\"update-interview-support\" style={{ fontSize: '14px' }}>\r\n                                <div className=\"interview-support-form\">\r\n                                    <form>\r\n                                        <div className='technology-multiselect mt-3'>\r\n                                            <label>Add Technical Stack</label>\r\n                                            <Multiselect\r\n                                                id='technology'\r\n                                                options={technologiesList}\r\n                                                onSelect={onSelectTechnology}\r\n                                                onRemove={onRemoveTechnology}\r\n                                                displayValue=\"technologyName\" //technologyName\r\n                                                placeholder=\"Your Technical Stack\"\r\n                                                avoidHighlightFirstOption={true}\r\n                                                style={{\r\n                                                    chips: {\r\n                                                        background: childColor,\r\n                                                    },\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='time-slots mt-3'>\r\n                                            <div className=\"label-container\">\r\n                                                <label>Select Your Available Time Slots for a day</label>\r\n                                                <div className=\"reload-container\" onClick={handleTimeSlotReload}>\r\n                                                    <FaRedo className=\"reload-icon\" />\r\n                                                    <span className=\"reload-text\">Uncheck All Slots</span>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"time-slot-container\" >\r\n                                                {timeSlotList.map((item, index) => (\r\n                                                    <button\r\n                                                        key={index}\r\n                                                        type='button'\r\n                                                        className={`time-slot-button ${selectedSlots.includes(item) ? 'selected' : ''}`}\r\n                                                        onClick={() => handleTimeSlotClick(item)}\r\n                                                    >\r\n                                                        {Constants.formatTime(Constants.convertUserTimezoneTime(item.slotStartTime)) + ' - ' + Constants.formatTime(Constants.convertUserTimezoneTime(item.slotEndTime))}\r\n                                                    </button>\r\n                                                ))}\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className='mt-2'>\r\n                                            {updateApprovedInterviewSupportErrMsgDiv &&\r\n                                                <div style={customCssForMsg}>\r\n                                                    <label>{updateApprovedInterviewSupportErrMsg}</label>\r\n                                                </div>}\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            <div className='update-interview-support-button'>\r\n                                <Button\r\n                                    className='dashboard-button'\r\n                                    onClick={handleApprovedUpdateInterviewSupport}\r\n                                >\r\n                                    Update\r\n                                </Button>\r\n                            </div>\r\n                        </Modal.Footer>\r\n                    </Container>\r\n                </Modal>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ExponentApprovedInterviewSupport;\r\n */"],"mappings":"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":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}