{"ast":null,"code":"import'./CandidateSearchTraining.css';import Multiselect from\"multiselect-react-dropdown\";import{useEffect,useState}from\"react\";import{Button,Card,Col,Container,Modal,Row}from'react-bootstrap';import GlobalService from'../../../../../../Services/global_service/GlobalService';import Constants from'../../../../../Constants';import{Rating}from'react-simple-star-rating';import CandidateService from'../../../../../../Services/candidate_service/CandidateService';import LoadingBar from'../../../../../loading_bar_component/LoadingBar';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function CandidateSearchTraining(){const[loadingBar,setLoadingBar]=useState(false);const childColor=getComputedStyle(document.documentElement).getPropertyValue('--child-color');// const whiteColor = getComputedStyle(document.documentElement).getPropertyValue('--white-color');\n// course code\nconst[courses,setCourses]=useState([]);const[coursesList,setCoursesList]=useState([]);const onSelectCourse=(selectedList,selectedItem)=>{setCourses([...selectedList]);console.log(selectedItem);};const onRemoveCourse=(selectedList,removedItem)=>{setCourses([...selectedList]);console.log(courses);console.log(removedItem);};// err msg\nconst[messageColor,setMessageColor]=useState(Constants.MESSAGE_COLOR);const[errMsgDiv,setErrMsgDiv]=useState(false);const[errMsg,setErrMsg]=useState(\"\");//JS for to display err msg\nconst getAllCourseDisplayErrMsg=errorMessage=>{setErrMsg(errorMessage);setErrMsgDiv(true);setTimeout(()=>{setErrMsg(\"\");setErrMsgDiv(false);},Constants.SET_TIME_OUT_FOR_ERROR_MSG);};useEffect(()=>{getAllCourse();// eslint-disable-next-line react-hooks/exhaustive-deps\n},[]);const getAllCourse=async()=>{setLoadingBar(true);try{const responseData=await GlobalService.getAllCourse();console.log(responseData);if(responseData.length===0){getAllCourseDisplayErrMsg('Courses are not found');}else{setCoursesList(responseData);}}catch(error){console.log(error.message);handleGetAllCourseErrors(error.message);}finally{setLoadingBar(false);}};const handleGetAllCourseErrors=errorStatus=>{if(Constants.BREEZE_DATABASE_EXCEPTION===errorStatus)getAllCourseDisplayErrMsg(\"Sorry, Our service is down\");else getAllCourseDisplayErrMsg(\"Could not process your request\");};const[page,setPage]=useState(0);const[isLastPage,setIsLastPage]=useState(false);const size=6;const disablePrevious=page===0;const disableNext=isLastPage;const handlePreviousNext=async event=>{const buttonId=event.target.id;if(buttonId==='prevBtn'){if(page>0){setPage(page-1);}}else{setPage(page+1);}};useEffect(()=>{handleSearchTrainingsByCourses();// eslint-disable-next-line react-hooks/exhaustive-deps\n},[page]);const[approvedTrainings,setApprovedTrainings]=useState([]);const handleSearchTrainingsByCourses=async()=>{console.log(courses);if(!Array.isArray(courses)||courses.length===0){getAllCourseDisplayErrMsg(\"please select atleast one course to search trainings\");setApprovedTrainings([]);}else{setLoadingBar(true);const request={courseList:courses,page:page,size:size};try{const responseData=await GlobalService.searchTrainingsByCourses(request);console.log(responseData);setIsLastPage(responseData.isLastPage);if(responseData.trainingWithTrainerList.length===0){getAllCourseDisplayErrMsg('Trainings are not found');setApprovedTrainings([]);}else{setApprovedTrainings(responseData.trainingWithTrainerList);}}catch(error){console.log(error.message);// handleGetAllCourseErrors(error.message);\n}finally{setLoadingBar(false);}}};const[trainingCard,setTrainingCard]=useState(0);const[trainingCardErr,setTrainingCardErr]=useState('');const handleTrainingCardErrMsg=(errorMessage,trainingId)=>{setTrainingCardErr(errorMessage);setTrainingCard(trainingId);setTimeout(()=>{setTrainingCardErr('');setTrainingCard(0);},Constants.SET_TIME_OUT_FOR_ERROR_MSG);};// open course content code\nconst[courseContentUrl,setCourseContentUrl]=useState('');useEffect(()=>{if(courseContentUrl){window.open(courseContentUrl,'_blank');}},[courseContentUrl]);const handleOpenCourseContent=async(path,trainingId)=>{setLoadingBar(true);console.log(path);try{const courseContentRequest={courseContent:path};const courseContentResponse=await GlobalService.getCourseContentByPath(courseContentRequest);console.log(courseContentResponse);const courseContentFile=new Blob([courseContentResponse.data],{type:courseContentResponse.headers['content-type']});const courseContentFileUrl=URL.createObjectURL(courseContentFile);setCourseContentUrl(courseContentFileUrl);}catch(error){console.error('Error fetching data for path:',path,error);handleCourseContentErrors(error.message,trainingId);}finally{setLoadingBar(false);}};const handleCourseContentErrors=(errorStatus,trainingId)=>{if(Constants.INVALID_REQUEST_FIELD===errorStatus)handleTrainingCardErrMsg(\"Course Content Path is invalid\",trainingId);else if(Constants.FILES_NOT_FOUND===errorStatus)handleTrainingCardErrMsg(\"File Not Found\",trainingId);else handleTrainingCardErrMsg(\"Could not process your request\",trainingId);};// open intro video code\nconst[showIntroVideoModal,setShowIntroVideoModal]=useState(false);const handleIntroVideoModalClose=()=>{setShowIntroVideoModal(false);setIntroVideoUrl('');};const[introVideoUrl,setIntroVideoUrl]=useState('');useEffect(()=>{if(introVideoUrl){setShowIntroVideoModal(true);}},[introVideoUrl]);const handleOpenIntroVideo=async(path,trainingId)=>{setLoadingBar(true);console.log(path);try{const introVideoRequest={introVideo:path};const introVideoResponse=await GlobalService.getIntroVideoByPath(introVideoRequest);console.log(introVideoResponse);const introVideoFileUrl=URL.createObjectURL(introVideoResponse.data);setIntroVideoUrl(introVideoFileUrl);}catch(error){console.error('Error fetching data for path:',path,error);handleIntroVideoErrors(error.message,trainingId);}finally{setLoadingBar(false);}};const handleIntroVideoErrors=(errorStatus,trainingId)=>{if(Constants.INVALID_REQUEST_FIELD===errorStatus)handleTrainingCardErrMsg(\"Intro Video Path is invalid\",trainingId);else if(Constants.FILES_NOT_FOUND===errorStatus)handleTrainingCardErrMsg(\"File Not Found\",trainingId);else handleTrainingCardErrMsg(\"Could not process your request\",trainingId);};const handleEnrollCandidateForTraining=async(trainingId,courseId)=>{setLoadingBar(true);console.log(trainingId+\" \"+courseId);try{const enrollCandidateForTrainingRequest={candidateId:localStorage.getItem('breezeUserId'),trainingId:trainingId,courseId:courseId};console.log(enrollCandidateForTrainingRequest);const enrollCandidateForTrainingResponse=await CandidateService.enrollCandidateForTraining(enrollCandidateForTrainingRequest);console.log(enrollCandidateForTrainingResponse);handleTrainingCardSucMsg('Enrolled, Admin will confirm with you',trainingId);}catch(error){console.log(error);handleEnrollCandidateForTrainingErrors(error.message,trainingId);}finally{setLoadingBar(false);}};const handleEnrollCandidateForTrainingErrors=(errorStatus,trainingId)=>{if(Constants.INVALID_REQUEST_FIELD===errorStatus)handleTrainingCardErrMsg(\"Sorry, inputs are not valid\",trainingId);else if(Constants.ALREADY_ENROLLED_FOR_SELECTED_COURSE===errorStatus)handleTrainingCardErrMsg(\"You have already enrolled for this course\",trainingId);else if(Constants.BREEZE_DATABASE_EXCEPTION===errorStatus)handleTrainingCardErrMsg(\"Sorry, Our service is down\",trainingId);else handleTrainingCardErrMsg(\"Could not process your request\",trainingId);};const handleTrainingCardSucMsg=(errorMessage,trainingId)=>{setMessageColor('green');setTrainingCardErr(errorMessage);setTrainingCard(trainingId);setTimeout(()=>{setTrainingCardErr('');setTrainingCard(0);setMessageColor(Constants.MESSAGE_COLOR);},Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);};const customCssForMsg={fontSize:'medium',fontWeight:'700',color:messageColor};return/*#__PURE__*/_jsxs(\"div\",{className:\"training-list\",children:[loadingBar&&/*#__PURE__*/_jsx(LoadingBar,{}),/*#__PURE__*/_jsxs(\"div\",{className:\"course-multiselect\",style:{fontSize:'13px'},children:[/*#__PURE__*/_jsx(\"label\",{children:\"Select Courses\"}),/*#__PURE__*/_jsxs(Row,{className:\"d-flex justify-content-between flex-wrap\",children:[/*#__PURE__*/_jsx(Col,{xs:12,sm:8,className:\"mb-2\",children:/*#__PURE__*/_jsx(Multiselect,{id:\"course\",options:coursesList,onSelect:onSelectCourse,onRemove:onRemoveCourse,displayValue:\"courseName\",placeholder:\"Select Course\",avoidHighlightFirstOption:true,style:{chips:{background:childColor}}})}),/*#__PURE__*/_jsx(Col,{xs:12,sm:4,className:\"mb-2\",children:/*#__PURE__*/_jsx(Button,{className:\"search-button-horizontal\",onClick:handleSearchTrainingsByCourses,children:\"Search\"})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"\",children:errMsgDiv&&/*#__PURE__*/_jsx(\"div\",{style:customCssForMsg,children:/*#__PURE__*/_jsx(\"label\",{children:errMsg})})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"\",style:{display:'flex',flexWrap:'wrap'},children:approvedTrainings.map((item,index)=>/*#__PURE__*/_jsxs(Card,{style:{width:'22rem',margin:'0.5rem',fontSize:'13px'},className:\"card\",children:[/*#__PURE__*/_jsx(Card.Header,{style:{backgroundColor:childColor},children:/*#__PURE__*/_jsx(Card.Title,{style:{fontSize:'15px'},children:item.training.courseName+\" Course\"})}),/*#__PURE__*/_jsx(Card.Body,{children:/*#__PURE__*/_jsxs(Card.Text,{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Trainer : \"}),\" \",/*#__PURE__*/_jsx(\"span\",{children:item.trainer.userFirstname+\" \"+item.trainer.userLastname}),\" \",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"label\",{children:\"Experience : \"}),\" \",/*#__PURE__*/_jsx(\"span\",{children:item.trainer.userExperience}),\" \",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"label\",{children:\"Course : \"}),\" \",/*#__PURE__*/_jsx(\"span\",{children:item.training.courseName}),\" \",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"label\",{children:\"Technical-Stack : \"}),\" \",/*#__PURE__*/_jsx(\"span\",{children:item.training.technologyList.map(tech=>tech.technologyName).join(', ')}),\" \",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',justifyContent:'space-between'},children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Course Duration : \"}),\" \",/*#__PURE__*/_jsx(\"span\",{children:item.training.courseDuration+\" days\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Start Date : \"}),\" \",/*#__PURE__*/_jsx(\"span\",{children:Constants.convertUserTimezoneDateTime(item.training.courseStartDateAndTime).date})]})]}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',justifyContent:'space-between'},children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Session Duration : \"}),\" \",/*#__PURE__*/_jsx(\"span\",{children:item.training.sessionDuration})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Start Time : \"}),\" \",/*#__PURE__*/_jsx(\"span\",{children:Constants.formatTime(Constants.convertUserTimezoneDateTime(item.training.courseStartDateAndTime).time)})]})]}),/*#__PURE__*/_jsx(\"label\",{style:{verticalAlign:'middle'},children:\"Rating : \\xA0\"}),/*#__PURE__*/_jsx(\"span\",{children:/*#__PURE__*/_jsx(Rating,{size:20,initialValue:item.training.rating,allowFraction:true,fillColor:\"#1b4962\",readonly:true})}),\" \",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',justifyContent:'space-between',alignItems:'center'},children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Card.Link,{style:{cursor:'pointer'},onClick:()=>handleOpenCourseContent(item.training.courseContent,item.training.trainingId),children:\"Course Content\"}),/*#__PURE__*/_jsx(Card.Link,{style:{cursor:'pointer'},onClick:()=>handleOpenIntroVideo(item.training.introVideo,item.training.trainingId),children:\"Intro Video\"})]}),/*#__PURE__*/_jsx(\"button\",{className:\"enroll-button\",onClick:()=>handleEnrollCandidateForTraining(item.training.trainingId,item.training.courseId),children:\"Enroll\"})]}),/*#__PURE__*/_jsx(\"div\",{children:trainingCard===item.training.trainingId&&/*#__PURE__*/_jsx(\"div\",{style:customCssForMsg,children:/*#__PURE__*/_jsx(\"label\",{children:trainingCardErr})})})]})})]},index))}),approvedTrainings.length!==0&&/*#__PURE__*/_jsxs(\"div\",{className:\"prev-next-div\",children:[/*#__PURE__*/_jsxs(\"button\",{className:\"dashboard-button\",id:\"prevBtn\",onClick:handlePreviousNext,disabled:disablePrevious,children:['< ',\"previous\"]}),/*#__PURE__*/_jsxs(\"button\",{className:\"dashboard-button\",id:\"nextBtn\",style:{marginLeft:'20px'},onClick:handlePreviousNext,disabled:disableNext,children:[\"next\",' >']})]}),showIntroVideoModal&&/*#__PURE__*/_jsx(Modal,{className:\"intro-video-modal\",size:\"md\",show:showIntroVideoModal,onHide:handleIntroVideoModalClose,centered:true,backdrop:\"static\",children:/*#__PURE__*/_jsxs(Container,{className:\"px-5\",children:[/*#__PURE__*/_jsx(Modal.Header,{closeButton:true,children:/*#__PURE__*/_jsx(Modal.Title,{style:{fontSize:'18px'},children:\"Intro Video\"})}),/*#__PURE__*/_jsx(Modal.Body,{children:/*#__PURE__*/_jsx(\"div\",{className:\"row\",children:/*#__PURE__*/_jsx(\"div\",{className:\"col\",children:introVideoUrl&&/*#__PURE__*/_jsx(\"div\",{className:\"intro-video-container\",children:/*#__PURE__*/_jsx(\"div\",{style:{maxWidth:'100%',height:'auto',position:'relative',overflow:'hidden',paddingTop:'56.25%'},children:/*#__PURE__*/_jsx(\"video\",{src:introVideoUrl,style:{position:'absolute',top:0,left:0,width:'100%',height:'100%'},controls:true,autoPlay:true,muted:true})})})})})})]})})]});}export default CandidateSearchTraining;/**======================================================================================== */ /**\r\n * import './CandidateSearchTraining.css';\r\nimport Multiselect from \"multiselect-react-dropdown\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Button, Card, Col, Container, Modal, Row } from 'react-bootstrap';\r\nimport GlobalService from '../../../../../../Services/global_service/GlobalService';\r\nimport Constants from '../../../../../Constants';\r\nimport { Rating } from 'react-simple-star-rating';\r\nimport CandidateService from '../../../../../../Services/candidate_service/CandidateService';\r\nimport LoadingBar from '../../../../../loading_bar_component/LoadingBar';\r\n\r\nfunction CandidateSearchTraining() {\r\n\r\n    const [loadingBar, setLoadingBar] = useState(false);\r\n\r\n    const childColor = getComputedStyle(document.documentElement).getPropertyValue('--child-color');\r\n    // const whiteColor = getComputedStyle(document.documentElement).getPropertyValue('--white-color');\r\n\r\n    // technology code\r\n    const [technologies, setTechnologies] = useState([]);\r\n    const [technologiesList, setTechnologiesList] = useState([]);\r\n    const onSelectTechnology = (selectedList, selectedItem) => {\r\n        setTechnologies([...selectedList]);\r\n        console.log(selectedItem);\r\n    }\r\n    const onRemoveTechnology = (selectedList, removedItem) => {\r\n        setTechnologies([...selectedList]);\r\n        console.log(technologies);\r\n        console.log(removedItem);\r\n    }\r\n\r\n    // err msg\r\n    const [messageColor, setMessageColor] = useState(Constants.MESSAGE_COLOR);\r\n    const [errMsgDiv, setErrMsgDiv] = useState(false);\r\n    const [errMsg, setErrMsg] = useState(\"\");\r\n    //JS for to display err msg\r\n    const getAllTechnologyDisplayErrMsg = (errorMessage) => {\r\n        setErrMsg(errorMessage);\r\n        setErrMsgDiv(true);\r\n        setTimeout(() => {\r\n            setErrMsg(\"\");\r\n            setErrMsgDiv(false);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getAllTechnology();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const getAllTechnology = async () => {\r\n        setLoadingBar(true);\r\n        try {\r\n            const responseData = await GlobalService.getAllTechnology();\r\n            console.log(responseData);\r\n            if (responseData.length === 0) {\r\n                getAllTechnologyDisplayErrMsg('Technologies are not found');\r\n            } else {\r\n                setTechnologiesList(responseData);\r\n            }\r\n        } catch (error) {\r\n            console.log(error.message);\r\n            handleGetAllTechnologyErrors(error.message);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    };\r\n\r\n    const handleGetAllTechnologyErrors = (errorStatus) => {\r\n        if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            getAllTechnologyDisplayErrMsg(\"Sorry, Our service is down\");\r\n        else\r\n            getAllTechnologyDisplayErrMsg(\"Could not process your request\");\r\n    }\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [isLastPage, setIsLastPage] = useState(false);\r\n    const size = 6;\r\n    const disablePrevious = page === 0;\r\n    const disableNext = isLastPage;\r\n    const handlePreviousNext = async (event) => {\r\n        const buttonId = event.target.id;\r\n        if (buttonId === 'prevBtn') {\r\n            if (page > 0) {\r\n                setPage(page - 1);\r\n            }\r\n        } else {\r\n            setPage(page + 1);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        handleSearchTrainingsByTechnologies();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [page]);\r\n\r\n    const [approvedTrainings, setApprovedTrainings] = useState([]);\r\n    const handleSearchTrainingsByTechnologies = async () => {\r\n        console.log(technologies);\r\n        if (!Array.isArray(technologies) || technologies.length === 0) {\r\n            getAllTechnologyDisplayErrMsg(\"please select atleast one technology to search trainings\");\r\n            setApprovedTrainings([]); \r\n        } else {\r\n            setLoadingBar(true);\r\n            const request = {\r\n                technologyList: technologies,\r\n                page: page,\r\n                size: size,\r\n            }\r\n            try {\r\n                const responseData = await GlobalService.searchTrainingsByTechnologies(request);\r\n                console.log(responseData);\r\n                setIsLastPage(responseData.isLastPage);\r\n                if (responseData.trainingWithTrainerList.length === 0) {\r\n                    getAllTechnologyDisplayErrMsg('Trainings are not found');\r\n                } else {\r\n                    setApprovedTrainings(responseData.trainingWithTrainerList);\r\n                }\r\n            } catch (error) {\r\n                console.log(error.message); \r\n                // handleGetAllTechnologyErrors(error.message);\r\n            } finally {\r\n                setLoadingBar(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    const [trainingCard, setTrainingCard] = useState(0);\r\n    const [trainingCardErr, setTrainingCardErr] = useState('');\r\n    const handleTrainingCardErrMsg = (errorMessage, trainingId) => {\r\n        setTrainingCardErr(errorMessage);\r\n        setTrainingCard(trainingId);\r\n        setTimeout(() => {\r\n            setTrainingCardErr('');\r\n            setTrainingCard(0);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n\r\n    // open course content code\r\n    const [courseContentUrl, setCourseContentUrl] = useState('');\r\n    useEffect(() => {\r\n        if (courseContentUrl) {\r\n            window.open(courseContentUrl, '_blank');\r\n        }\r\n    }, [courseContentUrl]);\r\n    const handleOpenCourseContent = async (path, trainingId) => {\r\n        setLoadingBar(true);\r\n        console.log(path);\r\n        try {\r\n            const courseContentRequest = {\r\n                courseContent: path,\r\n            }\r\n            const courseContentResponse = await GlobalService.getCourseContentByPath(courseContentRequest);\r\n            console.log(courseContentResponse);\r\n            const courseContentFile = new Blob([courseContentResponse.data], { type: courseContentResponse.headers['content-type'] });\r\n            const courseContentFileUrl = URL.createObjectURL(courseContentFile);\r\n            setCourseContentUrl(courseContentFileUrl);\r\n        } catch (error) {\r\n            console.error('Error fetching data for path:', path, error);\r\n            handleCourseContentErrors(error.message, trainingId);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    }\r\n    const handleCourseContentErrors = (errorStatus, trainingId) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            handleTrainingCardErrMsg(\"Course Content Path is invalid\", trainingId);\r\n        else if (Constants.FILES_NOT_FOUND === errorStatus)\r\n            handleTrainingCardErrMsg(\"File Not Found\", trainingId);\r\n        else\r\n            handleTrainingCardErrMsg(\"Could not process your request\", trainingId);\r\n    }\r\n\r\n    // open intro video code\r\n    const [showIntroVideoModal, setShowIntroVideoModal] = useState(false);\r\n    const handleIntroVideoModalClose = () => {\r\n        setShowIntroVideoModal(false);\r\n        setIntroVideoUrl('');\r\n    };\r\n    const [introVideoUrl, setIntroVideoUrl] = useState('');\r\n    useEffect(() => {\r\n        if (introVideoUrl) {\r\n            setShowIntroVideoModal(true);\r\n        }\r\n    }, [introVideoUrl]);\r\n    const handleOpenIntroVideo = async (path, trainingId) => {\r\n        setLoadingBar(true);\r\n        console.log(path);\r\n        try {\r\n            const introVideoRequest = {\r\n                introVideo: path,\r\n            }\r\n            const introVideoResponse = await GlobalService.getIntroVideoByPath(introVideoRequest);\r\n            console.log(introVideoResponse);\r\n            const introVideoFileUrl = URL.createObjectURL(introVideoResponse.data);\r\n            setIntroVideoUrl(introVideoFileUrl);\r\n        } catch (error) {\r\n            console.error('Error fetching data for path:', path, error);\r\n            handleIntroVideoErrors(error.message, trainingId);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    };\r\n    const handleIntroVideoErrors = (errorStatus, trainingId) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            handleTrainingCardErrMsg(\"Intro Video Path is invalid\", trainingId);\r\n        else if (Constants.FILES_NOT_FOUND === errorStatus)\r\n            handleTrainingCardErrMsg(\"File Not Found\", trainingId);\r\n        else\r\n            handleTrainingCardErrMsg(\"Could not process your request\", trainingId);\r\n    }\r\n\r\n    const handleEnrollCandidateForTraining = async (trainingId, courseId) => {\r\n        setLoadingBar(true);\r\n        console.log(trainingId+\" \"+courseId);\r\n        try {\r\n            const enrollCandidateForTrainingRequest = {\r\n                candidateId: localStorage.getItem('breezeUserId'),\r\n                trainingId: trainingId,\r\n                courseId: courseId,\r\n            } \r\n            console.log(enrollCandidateForTrainingRequest);\r\n            const enrollCandidateForTrainingResponse = await CandidateService.enrollCandidateForTraining(enrollCandidateForTrainingRequest);\r\n            console.log(enrollCandidateForTrainingResponse);\r\n            handleTrainingCardSucMsg('Enrolled, Admin will confirm with you', trainingId);    \r\n        } catch (error) {\r\n            console.log(error);\r\n            handleEnrollCandidateForTrainingErrors(error.message, trainingId);      \r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    }\r\n    const handleEnrollCandidateForTrainingErrors = (errorStatus, trainingId) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            handleTrainingCardErrMsg(\"Sorry, inputs are not valid\", trainingId);\r\n        else if (Constants.ALREADY_ENROLLED_FOR_SELECTED_COURSE === errorStatus)\r\n            handleTrainingCardErrMsg(\"You have already enrolled for this course\", trainingId);\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            handleTrainingCardErrMsg(\"Sorry, Our service is down\", trainingId);\r\n        else\r\n            handleTrainingCardErrMsg(\"Could not process your request\", trainingId); \r\n    }\r\n\r\n    const handleTrainingCardSucMsg = (errorMessage, trainingId) => {\r\n        setMessageColor('green');\r\n        setTrainingCardErr(errorMessage); \r\n        setTrainingCard(trainingId);\r\n        setTimeout(() => {\r\n            setTrainingCardErr(''); \r\n            setTrainingCard(0);\r\n            setMessageColor(Constants.MESSAGE_COLOR);\r\n        }, Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);\r\n    }\r\n\r\n    const customCssForMsg = {\r\n        fontSize: 'medium',\r\n        fontWeight: '700',\r\n        color: messageColor,\r\n    }\r\n\r\n    return (\r\n        <div className=\"training-list\">\r\n            { loadingBar && <LoadingBar /> }\r\n            <div className='technology-multiselect' style={{ fontSize: '13px' }}>\r\n                <label>Select Technologies</label>\r\n                <Row className='d-flex justify-content-between flex-wrap'>\r\n                    <Col xs={12} sm={8} className='mb-2'>\r\n                        <Multiselect\r\n                            id='technology'\r\n                            options={technologiesList}\r\n                            onSelect={onSelectTechnology}\r\n                            onRemove={onRemoveTechnology}\r\n                            displayValue=\"technologyName\"\r\n                            placeholder=\"Technical Stack\"\r\n                            avoidHighlightFirstOption={true}\r\n                            style={{\r\n                                chips: {\r\n                                    background: childColor,\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={4} className='mb-2'>\r\n                        <Button\r\n                            className='search-button-horizontal'\r\n                            onClick={handleSearchTrainingsByTechnologies}\r\n                        >\r\n                            Search\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n                <div className=''>\r\n                    {errMsgDiv &&\r\n                        <div style={customCssForMsg}>\r\n                            <label>{errMsg}</label>\r\n                        </div>}\r\n                </div>\r\n            </div>\r\n            <div className='' style={{ display: 'flex', flexWrap: 'wrap' }}>\r\n                {approvedTrainings.map((item, index) => (\r\n                    <Card key={index} style={{ width: '22rem', margin: '0.5rem', fontSize: '13px' }} className='card'>\r\n                        <Card.Header style={{ backgroundColor: childColor }}>\r\n                            <Card.Title style={{ fontSize: '15px' }}>{item.training.courseName + \" Course\"}</Card.Title>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            <Card.Text>\r\n                                <label>Trainer : </label> <span>{item.trainer.userFirstname + \" \" + item.trainer.userLastname}</span> <br />\r\n                                <label>Experience : </label> <span>{item.trainer.userExperience}</span> <br />\r\n                                <label>Course : </label> <span>{item.training.courseName}</span> <br />\r\n                                <label>Technical-Stack : </label> <span>{item.training.technologyList.map(tech => tech.technologyName).join(', ')}</span> <br />\r\n                                <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                                    <div>\r\n                                        <label>Course Duration : </label> <span>{item.training.courseDuration+\" days\"}</span>\r\n                                    </div>\r\n                                    <div>\r\n                                        <label>Start Date : </label> <span>{(Constants.convertUserTimezoneDateTime(item.training.courseStartDateAndTime)).date}</span>\r\n                                    </div>\r\n                                </div>\r\n                                <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                                    <div>\r\n                                        <label>Session Duration : </label> <span>{item.training.sessionDuration}</span>\r\n                                    </div>\r\n                                    <div>\r\n                                        <label>Start Time : </label> <span>{Constants.formatTime((Constants.convertUserTimezoneDateTime(item.training.courseStartDateAndTime)).time)}</span>\r\n                                    </div>\r\n                                </div>\r\n                                <label style={{ verticalAlign: 'middle' }}>Rating : &nbsp;</label>\r\n                                <span>\r\n                                    <Rating\r\n                                        size={20}\r\n                                        initialValue={item.training.rating}\r\n                                        allowFraction\r\n                                        fillColor='#1b4962'\r\n                                        readonly={true}\r\n                                    />\r\n                                </span> <br />\r\n                                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                                    <div>\r\n                                        <Card.Link\r\n                                            style={{ cursor: 'pointer' }}\r\n                                            onClick={() => handleOpenCourseContent(item.training.courseContent, item.training.trainingId)}\r\n                                        >\r\n                                            Course Content\r\n                                        </Card.Link>\r\n                                        <Card.Link\r\n                                            style={{ cursor: 'pointer' }}\r\n                                            onClick={() => handleOpenIntroVideo(item.training.introVideo, item.training.trainingId)}\r\n                                        >\r\n                                            Intro Video\r\n                                        </Card.Link>\r\n                                    </div>\r\n                                    <button \r\n                                        className='enroll-button'\r\n                                        onClick={() => handleEnrollCandidateForTraining(item.training.trainingId, item.training.courseId)}\r\n                                    >\r\n                                        Enroll\r\n                                    </button>\r\n                                </div>\r\n                                <div>\r\n                                    {trainingCard === item.training.trainingId && ( \r\n                                        <div style={customCssForMsg}>\r\n                                            <label>{trainingCardErr}</label>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </Card.Text>\r\n                        </Card.Body>\r\n                    </Card>\r\n                ))}\r\n            </div>\r\n            {approvedTrainings.length !== 0 && (\r\n                <div className='prev-next-div'>\r\n                    <button className='dashboard-button'\r\n                        id='prevBtn'\r\n                        onClick={handlePreviousNext}\r\n                        disabled={disablePrevious}\r\n                    >\r\n                        {'< '}previous\r\n                    </button>\r\n                    <button className='dashboard-button'\r\n                        id='nextBtn'\r\n                        style={{ marginLeft: '20px' }}\r\n                        onClick={handlePreviousNext}\r\n                        disabled={disableNext}\r\n                    >\r\n                        next{' >'}\r\n                    </button>\r\n                </div>\r\n            )}\r\n            {showIntroVideoModal && (\r\n                <Modal className='intro-video-modal' size='md' show={showIntroVideoModal} onHide={handleIntroVideoModalClose} centered backdrop=\"static\">\r\n                    <Container className='px-5'>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title style={{ fontSize: '18px' }}>\r\n                                Intro Video\r\n                            </Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <div className=\"row\">\r\n                                <div className=\"col\">\r\n                                    {introVideoUrl && (\r\n                                        <div className=\"intro-video-container\">\r\n                                            <div style={{ maxWidth: '100%', height: 'auto', position: 'relative', overflow: 'hidden', paddingTop: '56.25%' }}>\r\n                                                <video src={introVideoUrl} style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }} controls autoPlay muted />\r\n                                            </div>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </Modal.Body>\r\n                    </Container>\r\n                </Modal>\r\n            )}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default CandidateSearchTraining;\r\n */","map":{"version":3,"names":["Multiselect","useEffect","useState","Button","Card","Col","Container","Modal","Row","GlobalService","Constants","Rating","CandidateService","LoadingBar","jsx","_jsx","jsxs","_jsxs","CandidateSearchTraining","loadingBar","setLoadingBar","childColor","getComputedStyle","document","documentElement","getPropertyValue","courses","setCourses","coursesList","setCoursesList","onSelectCourse","selectedList","selectedItem","console","log","onRemoveCourse","removedItem","messageColor","setMessageColor","MESSAGE_COLOR","errMsgDiv","setErrMsgDiv","errMsg","setErrMsg","getAllCourseDisplayErrMsg","errorMessage","setTimeout","SET_TIME_OUT_FOR_ERROR_MSG","getAllCourse","responseData","length","error","message","handleGetAllCourseErrors","errorStatus","BREEZE_DATABASE_EXCEPTION","page","setPage","isLastPage","setIsLastPage","size","disablePrevious","disableNext","handlePreviousNext","event","buttonId","target","id","handleSearchTrainingsByCourses","approvedTrainings","setApprovedTrainings","Array","isArray","request","courseList","searchTrainingsByCourses","trainingWithTrainerList","trainingCard","setTrainingCard","trainingCardErr","setTrainingCardErr","handleTrainingCardErrMsg","trainingId","courseContentUrl","setCourseContentUrl","window","open","handleOpenCourseContent","path","courseContentRequest","courseContent","courseContentResponse","getCourseContentByPath","courseContentFile","Blob","data","type","headers","courseContentFileUrl","URL","createObjectURL","handleCourseContentErrors","INVALID_REQUEST_FIELD","FILES_NOT_FOUND","showIntroVideoModal","setShowIntroVideoModal","handleIntroVideoModalClose","setIntroVideoUrl","introVideoUrl","handleOpenIntroVideo","introVideoRequest","introVideo","introVideoResponse","getIntroVideoByPath","introVideoFileUrl","handleIntroVideoErrors","handleEnrollCandidateForTraining","courseId","enrollCandidateForTrainingRequest","candidateId","localStorage","getItem","enrollCandidateForTrainingResponse","enrollCandidateForTraining","handleTrainingCardSucMsg","handleEnrollCandidateForTrainingErrors","ALREADY_ENROLLED_FOR_SELECTED_COURSE","SET_TIME_OUT_FOR_SUCCESS_MSG","customCssForMsg","fontSize","fontWeight","color","className","children","style","xs","sm","options","onSelect","onRemove","displayValue","placeholder","avoidHighlightFirstOption","chips","background","onClick","display","flexWrap","map","item","index","width","margin","Header","backgroundColor","Title","training","courseName","Body","Text","trainer","userFirstname","userLastname","userExperience","technologyList","tech","technologyName","join","justifyContent","courseDuration","convertUserTimezoneDateTime","courseStartDateAndTime","date","sessionDuration","formatTime","time","verticalAlign","initialValue","rating","allowFraction","fillColor","readonly","alignItems","Link","cursor","disabled","marginLeft","show","onHide","centered","backdrop","closeButton","maxWidth","height","position","overflow","paddingTop","src","top","left","controls","autoPlay","muted"],"sources":["C:/Users/DELL/Documents/prepswisefinalprojects/breeze (15)-frontend/breeze/src/components/dashboard_component/feature_component/candidate_feature_component/training/search_training_component/CandidateSearchTraining.js"],"sourcesContent":["import './CandidateSearchTraining.css';\r\nimport Multiselect from \"multiselect-react-dropdown\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Button, Card, Col, Container, Modal, Row } from 'react-bootstrap';\r\nimport GlobalService from '../../../../../../Services/global_service/GlobalService';\r\nimport Constants from '../../../../../Constants';\r\nimport { Rating } from 'react-simple-star-rating';\r\nimport CandidateService from '../../../../../../Services/candidate_service/CandidateService';\r\nimport LoadingBar from '../../../../../loading_bar_component/LoadingBar';\r\n\r\nfunction CandidateSearchTraining() {\r\n\r\n    const [loadingBar, setLoadingBar] = useState(false);\r\n\r\n    const childColor = getComputedStyle(document.documentElement).getPropertyValue('--child-color');\r\n    // const whiteColor = getComputedStyle(document.documentElement).getPropertyValue('--white-color');\r\n\r\n    // course code\r\n    const [courses, setCourses] = useState([]);\r\n    const [coursesList, setCoursesList] = useState([]);\r\n    const onSelectCourse = (selectedList, selectedItem) => {\r\n        setCourses([...selectedList]);\r\n        console.log(selectedItem);\r\n    }\r\n    const onRemoveCourse = (selectedList, removedItem) => {\r\n        setCourses([...selectedList]);\r\n        console.log(courses);\r\n        console.log(removedItem);\r\n    }\r\n\r\n    // err msg\r\n    const [messageColor, setMessageColor] = useState(Constants.MESSAGE_COLOR);\r\n    const [errMsgDiv, setErrMsgDiv] = useState(false);\r\n    const [errMsg, setErrMsg] = useState(\"\");\r\n    //JS for to display err msg\r\n    const getAllCourseDisplayErrMsg = (errorMessage) => {\r\n        setErrMsg(errorMessage);\r\n        setErrMsgDiv(true);\r\n        setTimeout(() => {\r\n            setErrMsg(\"\");\r\n            setErrMsgDiv(false);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getAllCourse();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const getAllCourse = async () => {\r\n        setLoadingBar(true);\r\n        try {\r\n            const responseData = await GlobalService.getAllCourse();\r\n            console.log(responseData);\r\n            if (responseData.length === 0) {\r\n                getAllCourseDisplayErrMsg('Courses are not found');\r\n            } else {\r\n                setCoursesList(responseData);\r\n            }\r\n        } catch (error) {\r\n            console.log(error.message);\r\n            handleGetAllCourseErrors(error.message);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    };\r\n\r\n    const handleGetAllCourseErrors = (errorStatus) => {\r\n        if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            getAllCourseDisplayErrMsg(\"Sorry, Our service is down\");\r\n        else\r\n            getAllCourseDisplayErrMsg(\"Could not process your request\");\r\n    }\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [isLastPage, setIsLastPage] = useState(false);\r\n    const size = 6;\r\n    const disablePrevious = page === 0;\r\n    const disableNext = isLastPage;\r\n    const handlePreviousNext = async (event) => {\r\n        const buttonId = event.target.id;\r\n        if (buttonId === 'prevBtn') {\r\n            if (page > 0) {\r\n                setPage(page - 1);\r\n            }\r\n        } else {\r\n            setPage(page + 1);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        handleSearchTrainingsByCourses();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [page]);\r\n\r\n    const [approvedTrainings, setApprovedTrainings] = useState([]);\r\n    const handleSearchTrainingsByCourses = async () => {\r\n        console.log(courses);\r\n        if (!Array.isArray(courses) || courses.length === 0) {\r\n            getAllCourseDisplayErrMsg(\"please select atleast one course to search trainings\");\r\n            setApprovedTrainings([]); \r\n        } else {\r\n            setLoadingBar(true);\r\n            const request = {\r\n                courseList: courses,\r\n                page: page,\r\n                size: size,\r\n            }\r\n            try {\r\n                const responseData = await GlobalService.searchTrainingsByCourses(request);\r\n                console.log(responseData);\r\n                setIsLastPage(responseData.isLastPage);\r\n                if (responseData.trainingWithTrainerList.length === 0) {\r\n                    getAllCourseDisplayErrMsg('Trainings are not found');\r\n                    setApprovedTrainings([]);\r\n                } else {\r\n                    setApprovedTrainings(responseData.trainingWithTrainerList);\r\n                }\r\n            } catch (error) {\r\n                console.log(error.message); \r\n                // handleGetAllCourseErrors(error.message);\r\n            } finally {\r\n                setLoadingBar(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    const [trainingCard, setTrainingCard] = useState(0);\r\n    const [trainingCardErr, setTrainingCardErr] = useState('');\r\n    const handleTrainingCardErrMsg = (errorMessage, trainingId) => {\r\n        setTrainingCardErr(errorMessage);\r\n        setTrainingCard(trainingId);\r\n        setTimeout(() => {\r\n            setTrainingCardErr('');\r\n            setTrainingCard(0);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n\r\n    // open course content code\r\n    const [courseContentUrl, setCourseContentUrl] = useState('');\r\n    useEffect(() => {\r\n        if (courseContentUrl) {\r\n            window.open(courseContentUrl, '_blank');\r\n        }\r\n    }, [courseContentUrl]);\r\n    const handleOpenCourseContent = async (path, trainingId) => {\r\n        setLoadingBar(true);\r\n        console.log(path);\r\n        try {\r\n            const courseContentRequest = {\r\n                courseContent: path,\r\n            }\r\n            const courseContentResponse = await GlobalService.getCourseContentByPath(courseContentRequest);\r\n            console.log(courseContentResponse);\r\n            const courseContentFile = new Blob([courseContentResponse.data], { type: courseContentResponse.headers['content-type'] });\r\n            const courseContentFileUrl = URL.createObjectURL(courseContentFile);\r\n            setCourseContentUrl(courseContentFileUrl);\r\n        } catch (error) {\r\n            console.error('Error fetching data for path:', path, error);\r\n            handleCourseContentErrors(error.message, trainingId);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    }\r\n    const handleCourseContentErrors = (errorStatus, trainingId) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            handleTrainingCardErrMsg(\"Course Content Path is invalid\", trainingId);\r\n        else if (Constants.FILES_NOT_FOUND === errorStatus)\r\n            handleTrainingCardErrMsg(\"File Not Found\", trainingId);\r\n        else\r\n            handleTrainingCardErrMsg(\"Could not process your request\", trainingId);\r\n    }\r\n\r\n    // open intro video code\r\n    const [showIntroVideoModal, setShowIntroVideoModal] = useState(false);\r\n    const handleIntroVideoModalClose = () => {\r\n        setShowIntroVideoModal(false);\r\n        setIntroVideoUrl('');\r\n    };\r\n    const [introVideoUrl, setIntroVideoUrl] = useState('');\r\n    useEffect(() => {\r\n        if (introVideoUrl) {\r\n            setShowIntroVideoModal(true);\r\n        }\r\n    }, [introVideoUrl]);\r\n    const handleOpenIntroVideo = async (path, trainingId) => {\r\n        setLoadingBar(true);\r\n        console.log(path);\r\n        try {\r\n            const introVideoRequest = {\r\n                introVideo: path,\r\n            }\r\n            const introVideoResponse = await GlobalService.getIntroVideoByPath(introVideoRequest);\r\n            console.log(introVideoResponse);\r\n            const introVideoFileUrl = URL.createObjectURL(introVideoResponse.data);\r\n            setIntroVideoUrl(introVideoFileUrl);\r\n        } catch (error) {\r\n            console.error('Error fetching data for path:', path, error);\r\n            handleIntroVideoErrors(error.message, trainingId);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    };\r\n    const handleIntroVideoErrors = (errorStatus, trainingId) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            handleTrainingCardErrMsg(\"Intro Video Path is invalid\", trainingId);\r\n        else if (Constants.FILES_NOT_FOUND === errorStatus)\r\n            handleTrainingCardErrMsg(\"File Not Found\", trainingId);\r\n        else\r\n            handleTrainingCardErrMsg(\"Could not process your request\", trainingId);\r\n    }\r\n\r\n    const handleEnrollCandidateForTraining = async (trainingId, courseId) => {\r\n        setLoadingBar(true);\r\n        console.log(trainingId+\" \"+courseId);\r\n        try {\r\n            const enrollCandidateForTrainingRequest = {\r\n                candidateId: localStorage.getItem('breezeUserId'),\r\n                trainingId: trainingId,\r\n                courseId: courseId,\r\n            } \r\n            console.log(enrollCandidateForTrainingRequest);\r\n            const enrollCandidateForTrainingResponse = await CandidateService.enrollCandidateForTraining(enrollCandidateForTrainingRequest);\r\n            console.log(enrollCandidateForTrainingResponse);\r\n            handleTrainingCardSucMsg('Enrolled, Admin will confirm with you', trainingId);    \r\n        } catch (error) {\r\n            console.log(error);\r\n            handleEnrollCandidateForTrainingErrors(error.message, trainingId);      \r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    }\r\n    const handleEnrollCandidateForTrainingErrors = (errorStatus, trainingId) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            handleTrainingCardErrMsg(\"Sorry, inputs are not valid\", trainingId);\r\n        else if (Constants.ALREADY_ENROLLED_FOR_SELECTED_COURSE === errorStatus)\r\n            handleTrainingCardErrMsg(\"You have already enrolled for this course\", trainingId);\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            handleTrainingCardErrMsg(\"Sorry, Our service is down\", trainingId);\r\n        else\r\n            handleTrainingCardErrMsg(\"Could not process your request\", trainingId); \r\n    }\r\n\r\n    const handleTrainingCardSucMsg = (errorMessage, trainingId) => {\r\n        setMessageColor('green');\r\n        setTrainingCardErr(errorMessage); \r\n        setTrainingCard(trainingId);\r\n        setTimeout(() => {\r\n            setTrainingCardErr(''); \r\n            setTrainingCard(0);\r\n            setMessageColor(Constants.MESSAGE_COLOR);\r\n        }, Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);\r\n    }\r\n\r\n    const customCssForMsg = {\r\n        fontSize: 'medium',\r\n        fontWeight: '700',\r\n        color: messageColor,\r\n    }\r\n\r\n    return (\r\n        <div className=\"training-list\">\r\n            { loadingBar && <LoadingBar /> }\r\n            <div className='course-multiselect' style={{ fontSize: '13px' }}>\r\n                <label>Select Courses</label>\r\n                <Row className='d-flex justify-content-between flex-wrap'>\r\n                    <Col xs={12} sm={8} className='mb-2'>\r\n                        <Multiselect\r\n                            id='course'\r\n                            options={coursesList}\r\n                            onSelect={onSelectCourse}\r\n                            onRemove={onRemoveCourse}\r\n                            displayValue=\"courseName\"\r\n                            placeholder=\"Select Course\"\r\n                            avoidHighlightFirstOption={true}\r\n                            style={{\r\n                                chips: {\r\n                                    background: childColor,\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={4} className='mb-2'>\r\n                        <Button\r\n                            className='search-button-horizontal'\r\n                            onClick={handleSearchTrainingsByCourses}\r\n                        >\r\n                            Search\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n                <div className=''>\r\n                    {errMsgDiv &&\r\n                        <div style={customCssForMsg}>\r\n                            <label>{errMsg}</label>\r\n                        </div>}\r\n                </div>\r\n            </div>\r\n            <div className='' style={{ display: 'flex', flexWrap: 'wrap' }}>\r\n                {approvedTrainings.map((item, index) => (\r\n                    <Card key={index} style={{ width: '22rem', margin: '0.5rem', fontSize: '13px' }} className='card'>\r\n                        <Card.Header style={{ backgroundColor: childColor }}>\r\n                            <Card.Title style={{ fontSize: '15px' }}>{item.training.courseName + \" Course\"}</Card.Title>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            <Card.Text>\r\n                                <label>Trainer : </label> <span>{item.trainer.userFirstname + \" \" + item.trainer.userLastname}</span> <br />\r\n                                <label>Experience : </label> <span>{item.trainer.userExperience}</span> <br />\r\n                                <label>Course : </label> <span>{item.training.courseName}</span> <br />\r\n                                <label>Technical-Stack : </label> <span>{item.training.technologyList.map(tech => tech.technologyName).join(', ')}</span> <br />\r\n                                <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                                    <div>\r\n                                        <label>Course Duration : </label> <span>{item.training.courseDuration+\" days\"}</span>\r\n                                    </div>\r\n                                    <div>\r\n                                        <label>Start Date : </label> <span>{(Constants.convertUserTimezoneDateTime(item.training.courseStartDateAndTime)).date}</span>\r\n                                    </div>\r\n                                </div>\r\n                                <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                                    <div>\r\n                                        <label>Session Duration : </label> <span>{item.training.sessionDuration}</span>\r\n                                    </div>\r\n                                    <div>\r\n                                        <label>Start Time : </label> <span>{Constants.formatTime((Constants.convertUserTimezoneDateTime(item.training.courseStartDateAndTime)).time)}</span>\r\n                                    </div>\r\n                                </div>\r\n                                <label style={{ verticalAlign: 'middle' }}>Rating : &nbsp;</label>\r\n                                <span>\r\n                                    <Rating\r\n                                        size={20}\r\n                                        initialValue={item.training.rating}\r\n                                        allowFraction\r\n                                        fillColor='#1b4962'\r\n                                        readonly={true}\r\n                                    />\r\n                                </span> <br />\r\n                                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                                    <div>\r\n                                        <Card.Link\r\n                                            style={{ cursor: 'pointer' }}\r\n                                            onClick={() => handleOpenCourseContent(item.training.courseContent, item.training.trainingId)}\r\n                                        >\r\n                                            Course Content\r\n                                        </Card.Link>\r\n                                        <Card.Link\r\n                                            style={{ cursor: 'pointer' }}\r\n                                            onClick={() => handleOpenIntroVideo(item.training.introVideo, item.training.trainingId)}\r\n                                        >\r\n                                            Intro Video\r\n                                        </Card.Link>\r\n                                    </div>\r\n                                    <button \r\n                                        className='enroll-button'\r\n                                        onClick={() => handleEnrollCandidateForTraining(item.training.trainingId, item.training.courseId)}\r\n                                    >\r\n                                        Enroll\r\n                                    </button>\r\n                                </div>\r\n                                <div>\r\n                                    {trainingCard === item.training.trainingId && ( \r\n                                        <div style={customCssForMsg}>\r\n                                            <label>{trainingCardErr}</label>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </Card.Text>\r\n                        </Card.Body>\r\n                    </Card>\r\n                ))}\r\n            </div>\r\n            {approvedTrainings.length !== 0 && (\r\n                <div className='prev-next-div'>\r\n                    <button className='dashboard-button'\r\n                        id='prevBtn'\r\n                        onClick={handlePreviousNext}\r\n                        disabled={disablePrevious}\r\n                    >\r\n                        {'< '}previous\r\n                    </button>\r\n                    <button className='dashboard-button'\r\n                        id='nextBtn'\r\n                        style={{ marginLeft: '20px' }}\r\n                        onClick={handlePreviousNext}\r\n                        disabled={disableNext}\r\n                    >\r\n                        next{' >'}\r\n                    </button>\r\n                </div>\r\n            )}\r\n            {showIntroVideoModal && (\r\n                <Modal className='intro-video-modal' size='md' show={showIntroVideoModal} onHide={handleIntroVideoModalClose} centered backdrop=\"static\">\r\n                    <Container className='px-5'>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title style={{ fontSize: '18px' }}>\r\n                                Intro Video\r\n                            </Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <div className=\"row\">\r\n                                <div className=\"col\">\r\n                                    {introVideoUrl && (\r\n                                        <div className=\"intro-video-container\">\r\n                                            <div style={{ maxWidth: '100%', height: 'auto', position: 'relative', overflow: 'hidden', paddingTop: '56.25%' }}>\r\n                                                <video src={introVideoUrl} style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }} controls autoPlay muted />\r\n                                            </div>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </Modal.Body>\r\n                    </Container>\r\n                </Modal>\r\n            )}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default CandidateSearchTraining;\r\n\r\n\r\n/**======================================================================================== */\r\n\r\n\r\n/**\r\n * import './CandidateSearchTraining.css';\r\nimport Multiselect from \"multiselect-react-dropdown\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Button, Card, Col, Container, Modal, Row } from 'react-bootstrap';\r\nimport GlobalService from '../../../../../../Services/global_service/GlobalService';\r\nimport Constants from '../../../../../Constants';\r\nimport { Rating } from 'react-simple-star-rating';\r\nimport CandidateService from '../../../../../../Services/candidate_service/CandidateService';\r\nimport LoadingBar from '../../../../../loading_bar_component/LoadingBar';\r\n\r\nfunction CandidateSearchTraining() {\r\n\r\n    const [loadingBar, setLoadingBar] = useState(false);\r\n\r\n    const childColor = getComputedStyle(document.documentElement).getPropertyValue('--child-color');\r\n    // const whiteColor = getComputedStyle(document.documentElement).getPropertyValue('--white-color');\r\n\r\n    // technology code\r\n    const [technologies, setTechnologies] = useState([]);\r\n    const [technologiesList, setTechnologiesList] = useState([]);\r\n    const onSelectTechnology = (selectedList, selectedItem) => {\r\n        setTechnologies([...selectedList]);\r\n        console.log(selectedItem);\r\n    }\r\n    const onRemoveTechnology = (selectedList, removedItem) => {\r\n        setTechnologies([...selectedList]);\r\n        console.log(technologies);\r\n        console.log(removedItem);\r\n    }\r\n\r\n    // err msg\r\n    const [messageColor, setMessageColor] = useState(Constants.MESSAGE_COLOR);\r\n    const [errMsgDiv, setErrMsgDiv] = useState(false);\r\n    const [errMsg, setErrMsg] = useState(\"\");\r\n    //JS for to display err msg\r\n    const getAllTechnologyDisplayErrMsg = (errorMessage) => {\r\n        setErrMsg(errorMessage);\r\n        setErrMsgDiv(true);\r\n        setTimeout(() => {\r\n            setErrMsg(\"\");\r\n            setErrMsgDiv(false);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getAllTechnology();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const getAllTechnology = async () => {\r\n        setLoadingBar(true);\r\n        try {\r\n            const responseData = await GlobalService.getAllTechnology();\r\n            console.log(responseData);\r\n            if (responseData.length === 0) {\r\n                getAllTechnologyDisplayErrMsg('Technologies are not found');\r\n            } else {\r\n                setTechnologiesList(responseData);\r\n            }\r\n        } catch (error) {\r\n            console.log(error.message);\r\n            handleGetAllTechnologyErrors(error.message);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    };\r\n\r\n    const handleGetAllTechnologyErrors = (errorStatus) => {\r\n        if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            getAllTechnologyDisplayErrMsg(\"Sorry, Our service is down\");\r\n        else\r\n            getAllTechnologyDisplayErrMsg(\"Could not process your request\");\r\n    }\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [isLastPage, setIsLastPage] = useState(false);\r\n    const size = 6;\r\n    const disablePrevious = page === 0;\r\n    const disableNext = isLastPage;\r\n    const handlePreviousNext = async (event) => {\r\n        const buttonId = event.target.id;\r\n        if (buttonId === 'prevBtn') {\r\n            if (page > 0) {\r\n                setPage(page - 1);\r\n            }\r\n        } else {\r\n            setPage(page + 1);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        handleSearchTrainingsByTechnologies();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [page]);\r\n\r\n    const [approvedTrainings, setApprovedTrainings] = useState([]);\r\n    const handleSearchTrainingsByTechnologies = async () => {\r\n        console.log(technologies);\r\n        if (!Array.isArray(technologies) || technologies.length === 0) {\r\n            getAllTechnologyDisplayErrMsg(\"please select atleast one technology to search trainings\");\r\n            setApprovedTrainings([]); \r\n        } else {\r\n            setLoadingBar(true);\r\n            const request = {\r\n                technologyList: technologies,\r\n                page: page,\r\n                size: size,\r\n            }\r\n            try {\r\n                const responseData = await GlobalService.searchTrainingsByTechnologies(request);\r\n                console.log(responseData);\r\n                setIsLastPage(responseData.isLastPage);\r\n                if (responseData.trainingWithTrainerList.length === 0) {\r\n                    getAllTechnologyDisplayErrMsg('Trainings are not found');\r\n                } else {\r\n                    setApprovedTrainings(responseData.trainingWithTrainerList);\r\n                }\r\n            } catch (error) {\r\n                console.log(error.message); \r\n                // handleGetAllTechnologyErrors(error.message);\r\n            } finally {\r\n                setLoadingBar(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    const [trainingCard, setTrainingCard] = useState(0);\r\n    const [trainingCardErr, setTrainingCardErr] = useState('');\r\n    const handleTrainingCardErrMsg = (errorMessage, trainingId) => {\r\n        setTrainingCardErr(errorMessage);\r\n        setTrainingCard(trainingId);\r\n        setTimeout(() => {\r\n            setTrainingCardErr('');\r\n            setTrainingCard(0);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n\r\n    // open course content code\r\n    const [courseContentUrl, setCourseContentUrl] = useState('');\r\n    useEffect(() => {\r\n        if (courseContentUrl) {\r\n            window.open(courseContentUrl, '_blank');\r\n        }\r\n    }, [courseContentUrl]);\r\n    const handleOpenCourseContent = async (path, trainingId) => {\r\n        setLoadingBar(true);\r\n        console.log(path);\r\n        try {\r\n            const courseContentRequest = {\r\n                courseContent: path,\r\n            }\r\n            const courseContentResponse = await GlobalService.getCourseContentByPath(courseContentRequest);\r\n            console.log(courseContentResponse);\r\n            const courseContentFile = new Blob([courseContentResponse.data], { type: courseContentResponse.headers['content-type'] });\r\n            const courseContentFileUrl = URL.createObjectURL(courseContentFile);\r\n            setCourseContentUrl(courseContentFileUrl);\r\n        } catch (error) {\r\n            console.error('Error fetching data for path:', path, error);\r\n            handleCourseContentErrors(error.message, trainingId);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    }\r\n    const handleCourseContentErrors = (errorStatus, trainingId) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            handleTrainingCardErrMsg(\"Course Content Path is invalid\", trainingId);\r\n        else if (Constants.FILES_NOT_FOUND === errorStatus)\r\n            handleTrainingCardErrMsg(\"File Not Found\", trainingId);\r\n        else\r\n            handleTrainingCardErrMsg(\"Could not process your request\", trainingId);\r\n    }\r\n\r\n    // open intro video code\r\n    const [showIntroVideoModal, setShowIntroVideoModal] = useState(false);\r\n    const handleIntroVideoModalClose = () => {\r\n        setShowIntroVideoModal(false);\r\n        setIntroVideoUrl('');\r\n    };\r\n    const [introVideoUrl, setIntroVideoUrl] = useState('');\r\n    useEffect(() => {\r\n        if (introVideoUrl) {\r\n            setShowIntroVideoModal(true);\r\n        }\r\n    }, [introVideoUrl]);\r\n    const handleOpenIntroVideo = async (path, trainingId) => {\r\n        setLoadingBar(true);\r\n        console.log(path);\r\n        try {\r\n            const introVideoRequest = {\r\n                introVideo: path,\r\n            }\r\n            const introVideoResponse = await GlobalService.getIntroVideoByPath(introVideoRequest);\r\n            console.log(introVideoResponse);\r\n            const introVideoFileUrl = URL.createObjectURL(introVideoResponse.data);\r\n            setIntroVideoUrl(introVideoFileUrl);\r\n        } catch (error) {\r\n            console.error('Error fetching data for path:', path, error);\r\n            handleIntroVideoErrors(error.message, trainingId);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    };\r\n    const handleIntroVideoErrors = (errorStatus, trainingId) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            handleTrainingCardErrMsg(\"Intro Video Path is invalid\", trainingId);\r\n        else if (Constants.FILES_NOT_FOUND === errorStatus)\r\n            handleTrainingCardErrMsg(\"File Not Found\", trainingId);\r\n        else\r\n            handleTrainingCardErrMsg(\"Could not process your request\", trainingId);\r\n    }\r\n\r\n    const handleEnrollCandidateForTraining = async (trainingId, courseId) => {\r\n        setLoadingBar(true);\r\n        console.log(trainingId+\" \"+courseId);\r\n        try {\r\n            const enrollCandidateForTrainingRequest = {\r\n                candidateId: localStorage.getItem('breezeUserId'),\r\n                trainingId: trainingId,\r\n                courseId: courseId,\r\n            } \r\n            console.log(enrollCandidateForTrainingRequest);\r\n            const enrollCandidateForTrainingResponse = await CandidateService.enrollCandidateForTraining(enrollCandidateForTrainingRequest);\r\n            console.log(enrollCandidateForTrainingResponse);\r\n            handleTrainingCardSucMsg('Enrolled, Admin will confirm with you', trainingId);    \r\n        } catch (error) {\r\n            console.log(error);\r\n            handleEnrollCandidateForTrainingErrors(error.message, trainingId);      \r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    }\r\n    const handleEnrollCandidateForTrainingErrors = (errorStatus, trainingId) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            handleTrainingCardErrMsg(\"Sorry, inputs are not valid\", trainingId);\r\n        else if (Constants.ALREADY_ENROLLED_FOR_SELECTED_COURSE === errorStatus)\r\n            handleTrainingCardErrMsg(\"You have already enrolled for this course\", trainingId);\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            handleTrainingCardErrMsg(\"Sorry, Our service is down\", trainingId);\r\n        else\r\n            handleTrainingCardErrMsg(\"Could not process your request\", trainingId); \r\n    }\r\n\r\n    const handleTrainingCardSucMsg = (errorMessage, trainingId) => {\r\n        setMessageColor('green');\r\n        setTrainingCardErr(errorMessage); \r\n        setTrainingCard(trainingId);\r\n        setTimeout(() => {\r\n            setTrainingCardErr(''); \r\n            setTrainingCard(0);\r\n            setMessageColor(Constants.MESSAGE_COLOR);\r\n        }, Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);\r\n    }\r\n\r\n    const customCssForMsg = {\r\n        fontSize: 'medium',\r\n        fontWeight: '700',\r\n        color: messageColor,\r\n    }\r\n\r\n    return (\r\n        <div className=\"training-list\">\r\n            { loadingBar && <LoadingBar /> }\r\n            <div className='technology-multiselect' style={{ fontSize: '13px' }}>\r\n                <label>Select Technologies</label>\r\n                <Row className='d-flex justify-content-between flex-wrap'>\r\n                    <Col xs={12} sm={8} className='mb-2'>\r\n                        <Multiselect\r\n                            id='technology'\r\n                            options={technologiesList}\r\n                            onSelect={onSelectTechnology}\r\n                            onRemove={onRemoveTechnology}\r\n                            displayValue=\"technologyName\"\r\n                            placeholder=\"Technical Stack\"\r\n                            avoidHighlightFirstOption={true}\r\n                            style={{\r\n                                chips: {\r\n                                    background: childColor,\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={4} className='mb-2'>\r\n                        <Button\r\n                            className='search-button-horizontal'\r\n                            onClick={handleSearchTrainingsByTechnologies}\r\n                        >\r\n                            Search\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n                <div className=''>\r\n                    {errMsgDiv &&\r\n                        <div style={customCssForMsg}>\r\n                            <label>{errMsg}</label>\r\n                        </div>}\r\n                </div>\r\n            </div>\r\n            <div className='' style={{ display: 'flex', flexWrap: 'wrap' }}>\r\n                {approvedTrainings.map((item, index) => (\r\n                    <Card key={index} style={{ width: '22rem', margin: '0.5rem', fontSize: '13px' }} className='card'>\r\n                        <Card.Header style={{ backgroundColor: childColor }}>\r\n                            <Card.Title style={{ fontSize: '15px' }}>{item.training.courseName + \" Course\"}</Card.Title>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            <Card.Text>\r\n                                <label>Trainer : </label> <span>{item.trainer.userFirstname + \" \" + item.trainer.userLastname}</span> <br />\r\n                                <label>Experience : </label> <span>{item.trainer.userExperience}</span> <br />\r\n                                <label>Course : </label> <span>{item.training.courseName}</span> <br />\r\n                                <label>Technical-Stack : </label> <span>{item.training.technologyList.map(tech => tech.technologyName).join(', ')}</span> <br />\r\n                                <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                                    <div>\r\n                                        <label>Course Duration : </label> <span>{item.training.courseDuration+\" days\"}</span>\r\n                                    </div>\r\n                                    <div>\r\n                                        <label>Start Date : </label> <span>{(Constants.convertUserTimezoneDateTime(item.training.courseStartDateAndTime)).date}</span>\r\n                                    </div>\r\n                                </div>\r\n                                <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                                    <div>\r\n                                        <label>Session Duration : </label> <span>{item.training.sessionDuration}</span>\r\n                                    </div>\r\n                                    <div>\r\n                                        <label>Start Time : </label> <span>{Constants.formatTime((Constants.convertUserTimezoneDateTime(item.training.courseStartDateAndTime)).time)}</span>\r\n                                    </div>\r\n                                </div>\r\n                                <label style={{ verticalAlign: 'middle' }}>Rating : &nbsp;</label>\r\n                                <span>\r\n                                    <Rating\r\n                                        size={20}\r\n                                        initialValue={item.training.rating}\r\n                                        allowFraction\r\n                                        fillColor='#1b4962'\r\n                                        readonly={true}\r\n                                    />\r\n                                </span> <br />\r\n                                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                                    <div>\r\n                                        <Card.Link\r\n                                            style={{ cursor: 'pointer' }}\r\n                                            onClick={() => handleOpenCourseContent(item.training.courseContent, item.training.trainingId)}\r\n                                        >\r\n                                            Course Content\r\n                                        </Card.Link>\r\n                                        <Card.Link\r\n                                            style={{ cursor: 'pointer' }}\r\n                                            onClick={() => handleOpenIntroVideo(item.training.introVideo, item.training.trainingId)}\r\n                                        >\r\n                                            Intro Video\r\n                                        </Card.Link>\r\n                                    </div>\r\n                                    <button \r\n                                        className='enroll-button'\r\n                                        onClick={() => handleEnrollCandidateForTraining(item.training.trainingId, item.training.courseId)}\r\n                                    >\r\n                                        Enroll\r\n                                    </button>\r\n                                </div>\r\n                                <div>\r\n                                    {trainingCard === item.training.trainingId && ( \r\n                                        <div style={customCssForMsg}>\r\n                                            <label>{trainingCardErr}</label>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </Card.Text>\r\n                        </Card.Body>\r\n                    </Card>\r\n                ))}\r\n            </div>\r\n            {approvedTrainings.length !== 0 && (\r\n                <div className='prev-next-div'>\r\n                    <button className='dashboard-button'\r\n                        id='prevBtn'\r\n                        onClick={handlePreviousNext}\r\n                        disabled={disablePrevious}\r\n                    >\r\n                        {'< '}previous\r\n                    </button>\r\n                    <button className='dashboard-button'\r\n                        id='nextBtn'\r\n                        style={{ marginLeft: '20px' }}\r\n                        onClick={handlePreviousNext}\r\n                        disabled={disableNext}\r\n                    >\r\n                        next{' >'}\r\n                    </button>\r\n                </div>\r\n            )}\r\n            {showIntroVideoModal && (\r\n                <Modal className='intro-video-modal' size='md' show={showIntroVideoModal} onHide={handleIntroVideoModalClose} centered backdrop=\"static\">\r\n                    <Container className='px-5'>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title style={{ fontSize: '18px' }}>\r\n                                Intro Video\r\n                            </Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <div className=\"row\">\r\n                                <div className=\"col\">\r\n                                    {introVideoUrl && (\r\n                                        <div className=\"intro-video-container\">\r\n                                            <div style={{ maxWidth: '100%', height: 'auto', position: 'relative', overflow: 'hidden', paddingTop: '56.25%' }}>\r\n                                                <video src={introVideoUrl} style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }} controls autoPlay muted />\r\n                                            </div>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </Modal.Body>\r\n                    </Container>\r\n                </Modal>\r\n            )}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default CandidateSearchTraining;\r\n */"],"mappings":"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":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}