{"ast":null,"code":"// import moment from 'moment-timezone';\n\nconst Constants = {\n  // base url\n  // BASE_URL: 'https://prepswise.com:8443/breeze',\n  BASE_URL: 'http://localhost:8080',\n  MESSAGE_COLOR: '#be3144',\n  SET_TIME_OUT_FOR_ERROR_MSG: 30000,\n  SET_TIME_OUT_FOR_SUCCESS_MSG: 3000,\n  // user types\n  ADMIN: \"ADMIN\",\n  EXPONENT: \"EXPONENT\",\n  CANDIDATE: \"CANDIDATE\",\n  // exponent types\n  TRAINER: \"TRAINER\",\n  INTERVIEW_SUPPORTER: \"INTERVIEW SUPPORTER\",\n  JOB_SUPPORTER: \"JOB SUPPORTER\",\n  // err status\n  INVALID_REQUEST_FIELD: \"INVALID_REQUEST_FIELD\",\n  EXISTING_USERNAME: \"EXISTING_USERNAME\",\n  BREEZE_DATABASE_EXCEPTION: \"BREEZE_DATABASE_EXCEPTION\",\n  ADDRESS_EXCEPTION: \"ADDRESS_EXCEPTION\",\n  MESSAGING_EXCEPTION: \"MESSAGING_EXCEPTION\",\n  ENTITY_NOT_FOUND: \"ENTITY_NOT_FOUND\",\n  OTP_NOT_MATCHED: \"OTP_NOT_MATCHED\",\n  OTP_NOT_MATCHED_FOR_MAIL: \"OTP_NOT_MATCHED_FOR_MAIL\",\n  OTP_NOT_MATCHED_FOR_CONTACT: \"OTP_NOT_MATCHED_FOR_CONTACT\",\n  PASSWORD_NOT_MATCHED: \"PASSWORD_NOT_MATCHED\",\n  EXISTING_TECHNOLOGY: \"EXISTING_TECHNOLOGY\",\n  EXISTING_COURSE: \"EXISTING_COURSE\",\n  INACTIVE: \"INACTIVE\",\n  FILES_NOT_UPLOADED: \"FILES_NOT_UPLOADED\",\n  FILES_NOT_FOUND: \"FILES_NOT_FOUND\",\n  EXISTING_MEETING_LINK: \"EXISTING_MEETING_LINK\",\n  VERIFIED: \"VERIFIED\",\n  EXISTING_INTERVIEW_SUPPORT: \"EXISTING_INTERVIEW_SUPPORT\",\n  EXISTING_BOOKINGS: \"EXISTING_BOOKINGS\",\n  EXISTING_JOB_SUPPORT: \"EXISTING_JOB_SUPPORT\",\n  SLOTS_BLOCKED: \"SLOTS_BLOCKED\",\n  SLOTS_BLOCKED_FOR_CANDIDATE: \"SLOTS_BLOCKED_FOR_CANDIDATE\",\n  INVALID_PHONE_NUMBER: \"INVALID_PHONE_NUMBER\",\n  OTP_NOT_SENT: \"OTP_NOT_SENT\",\n  // admin status\n  HOLD: \"HOLD\",\n  APPROVED: \"APPROVED\",\n  REJECTED: \"REJECTED\",\n  // training candidates status\n  ALREADY_ENROLLED_FOR_SELECTED_COURSE: \"ALREADY_ENROLLED_FOR_SELECTED_COURSE\",\n  PENDING: \"PENDING\",\n  CONFIRMED: \"CONFIRMED\",\n  WITHDRAW: \"WITHDRAW\",\n  // session duration\n  SESSION_DURATION: \"90 minutes\",\n  // format time\n  formatTime: timeString => {\n    const date = new Date();\n    const [hours, minutes, seconds] = timeString.split(':');\n    date.setHours(parseInt(hours, 10));\n    date.setMinutes(parseInt(minutes, 10));\n    date.setSeconds(parseInt(seconds, 10));\n\n    // Format the time in 12-hour format with AM/PM\n    const formattedTime = date.toLocaleString('en-US', {\n      hour: 'numeric',\n      minute: 'numeric',\n      // second: 'numeric',\n      hour12: true\n    });\n    return formattedTime;\n  },\n  // convert date and time based on user timezone\n  convertUserTimezoneDateTime: dateTime => {\n    const moment = require('moment-timezone');\n    const istDateTimeString = dateTime; // Assuming this is in IST\n    // Parse the datetime string in IST timezone\n    const istDateTime = moment.tz(istDateTimeString, 'Asia/Kolkata');\n    // Get the user's timezone using browser API\n    const userTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    // Convert the datetime to the user's timezone\n    const userDateTime = istDateTime.clone().tz(userTimezone);\n    // Format the datetime for display\n    const formattedDate = userDateTime.format('YYYY-MM-DD');\n    const formattedTime = userDateTime.format('HH:mm:ss');\n    return {\n      date: formattedDate,\n      time: formattedTime\n    };\n\n    // const moment = require('moment-timezone');\n    // const utcDateTimeString  = dateTime; // Assuming this is in UTC\n    // // Parse the datetime string in UTC timezone\n    // const utcDateTime = moment.utc(utcDateTimeString);\n    // // Get the user's timezone using browser API\n    // const userTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    // // Convert the datetime to the user's timezone\n    // const userDateTime = utcDateTime.clone().tz(userTimezone);\n    // // Format the datetime for display\n    // const formattedDate = userDateTime.format('YYYY-MM-DD');\n    // const formattedTime = userDateTime.format('HH:mm:ss');\n    // return {\n    //     date: formattedDate,\n    //     time: formattedTime\n    // };\n  },\n  convertUserTimezoneTime: time => {\n    const moment = require('moment-timezone');\n    // Assuming time is in IST, use a default date\n    const defaultDate = '1970-01-01';\n    const istDateTimeString = `${defaultDate}T${time}`;\n\n    // Parse the datetime string in IST timezone\n    const istDateTime = moment.tz(istDateTimeString, 'Asia/Kolkata');\n\n    // Get the user's timezone using browser API\n    const userTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n    // Convert the datetime to the user's timezone\n    const userDateTime = istDateTime.clone().tz(userTimezone);\n\n    // Format the time for display\n    const formattedTime = userDateTime.format('HH:mm:ss');\n    return formattedTime;\n  }\n};\nexport default Constants;","map":{"version":3,"names":["Constants","BASE_URL","MESSAGE_COLOR","SET_TIME_OUT_FOR_ERROR_MSG","SET_TIME_OUT_FOR_SUCCESS_MSG","ADMIN","EXPONENT","CANDIDATE","TRAINER","INTERVIEW_SUPPORTER","JOB_SUPPORTER","INVALID_REQUEST_FIELD","EXISTING_USERNAME","BREEZE_DATABASE_EXCEPTION","ADDRESS_EXCEPTION","MESSAGING_EXCEPTION","ENTITY_NOT_FOUND","OTP_NOT_MATCHED","OTP_NOT_MATCHED_FOR_MAIL","OTP_NOT_MATCHED_FOR_CONTACT","PASSWORD_NOT_MATCHED","EXISTING_TECHNOLOGY","EXISTING_COURSE","INACTIVE","FILES_NOT_UPLOADED","FILES_NOT_FOUND","EXISTING_MEETING_LINK","VERIFIED","EXISTING_INTERVIEW_SUPPORT","EXISTING_BOOKINGS","EXISTING_JOB_SUPPORT","SLOTS_BLOCKED","SLOTS_BLOCKED_FOR_CANDIDATE","INVALID_PHONE_NUMBER","OTP_NOT_SENT","HOLD","APPROVED","REJECTED","ALREADY_ENROLLED_FOR_SELECTED_COURSE","PENDING","CONFIRMED","WITHDRAW","SESSION_DURATION","formatTime","timeString","date","Date","hours","minutes","seconds","split","setHours","parseInt","setMinutes","setSeconds","formattedTime","toLocaleString","hour","minute","hour12","convertUserTimezoneDateTime","dateTime","moment","require","istDateTimeString","istDateTime","tz","userTimezone","Intl","DateTimeFormat","resolvedOptions","timeZone","userDateTime","clone","formattedDate","format","time","convertUserTimezoneTime","defaultDate"],"sources":["C:/Users/DELL/Documents/prepswisefinalprojects/breeze (15)-frontend/breeze/src/components/Constants.js"],"sourcesContent":["// import moment from 'moment-timezone';\r\n\r\nconst Constants = {\r\n\r\n    // base url\r\n    // BASE_URL: 'https://prepswise.com:8443/breeze',\r\n    BASE_URL: 'http://localhost:8080',\r\n\r\n    MESSAGE_COLOR: '#be3144',\r\n    SET_TIME_OUT_FOR_ERROR_MSG: 30000,\r\n    SET_TIME_OUT_FOR_SUCCESS_MSG: 3000,\r\n\r\n    // user types\r\n    ADMIN: \"ADMIN\",\r\n    EXPONENT: \"EXPONENT\",\r\n    CANDIDATE: \"CANDIDATE\",\r\n\r\n    // exponent types\r\n    TRAINER: \"TRAINER\",\r\n    INTERVIEW_SUPPORTER: \"INTERVIEW SUPPORTER\",\r\n    JOB_SUPPORTER: \"JOB SUPPORTER\",\r\n\r\n    // err status\r\n    INVALID_REQUEST_FIELD: \"INVALID_REQUEST_FIELD\",\r\n    EXISTING_USERNAME: \"EXISTING_USERNAME\",\r\n    BREEZE_DATABASE_EXCEPTION: \"BREEZE_DATABASE_EXCEPTION\",\r\n    ADDRESS_EXCEPTION: \"ADDRESS_EXCEPTION\",\r\n    MESSAGING_EXCEPTION: \"MESSAGING_EXCEPTION\",\r\n    ENTITY_NOT_FOUND: \"ENTITY_NOT_FOUND\",\r\n    OTP_NOT_MATCHED: \"OTP_NOT_MATCHED\",\r\n    OTP_NOT_MATCHED_FOR_MAIL: \"OTP_NOT_MATCHED_FOR_MAIL\",\r\n    OTP_NOT_MATCHED_FOR_CONTACT: \"OTP_NOT_MATCHED_FOR_CONTACT\",\r\n    PASSWORD_NOT_MATCHED: \"PASSWORD_NOT_MATCHED\",\r\n    EXISTING_TECHNOLOGY: \"EXISTING_TECHNOLOGY\",\r\n    EXISTING_COURSE: \"EXISTING_COURSE\",\r\n    INACTIVE: \"INACTIVE\",\r\n    FILES_NOT_UPLOADED: \"FILES_NOT_UPLOADED\",\r\n    FILES_NOT_FOUND: \"FILES_NOT_FOUND\",\r\n    EXISTING_MEETING_LINK: \"EXISTING_MEETING_LINK\",\r\n    VERIFIED: \"VERIFIED\",\r\n    EXISTING_INTERVIEW_SUPPORT: \"EXISTING_INTERVIEW_SUPPORT\",\r\n    EXISTING_BOOKINGS: \"EXISTING_BOOKINGS\",\r\n    EXISTING_JOB_SUPPORT: \"EXISTING_JOB_SUPPORT\",\r\n    SLOTS_BLOCKED: \"SLOTS_BLOCKED\",\r\n    SLOTS_BLOCKED_FOR_CANDIDATE: \"SLOTS_BLOCKED_FOR_CANDIDATE\",\r\n    INVALID_PHONE_NUMBER: \"INVALID_PHONE_NUMBER\",\r\n    OTP_NOT_SENT: \"OTP_NOT_SENT\",\r\n\r\n    // admin status\r\n    HOLD: \"HOLD\",\r\n    APPROVED: \"APPROVED\",\r\n    REJECTED: \"REJECTED\",\r\n\r\n    // training candidates status\r\n    ALREADY_ENROLLED_FOR_SELECTED_COURSE: \"ALREADY_ENROLLED_FOR_SELECTED_COURSE\",\r\n    PENDING: \"PENDING\",\r\n    CONFIRMED: \"CONFIRMED\",\r\n    WITHDRAW: \"WITHDRAW\",\r\n\r\n    // session duration\r\n    SESSION_DURATION: \"90 minutes\",\r\n\r\n    // format time\r\n    formatTime: (timeString) => {\r\n        const date = new Date();\r\n        const [hours, minutes, seconds] = timeString.split(':');\r\n        date.setHours(parseInt(hours, 10));\r\n        date.setMinutes(parseInt(minutes, 10));\r\n        date.setSeconds(parseInt(seconds, 10));\r\n\r\n        // Format the time in 12-hour format with AM/PM\r\n        const formattedTime = date.toLocaleString('en-US', {\r\n            hour: 'numeric',\r\n            minute: 'numeric',\r\n            // second: 'numeric',\r\n            hour12: true\r\n        });\r\n\r\n        return formattedTime;\r\n    },\r\n\r\n    // convert date and time based on user timezone\r\n    convertUserTimezoneDateTime: (dateTime) => {\r\n        const moment = require('moment-timezone');\r\n        const istDateTimeString = dateTime; // Assuming this is in IST\r\n        // Parse the datetime string in IST timezone\r\n        const istDateTime = moment.tz(istDateTimeString, 'Asia/Kolkata');\r\n        // Get the user's timezone using browser API\r\n        const userTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n        // Convert the datetime to the user's timezone\r\n        const userDateTime = istDateTime.clone().tz(userTimezone);\r\n        // Format the datetime for display\r\n        const formattedDate = userDateTime.format('YYYY-MM-DD');\r\n        const formattedTime = userDateTime.format('HH:mm:ss');\r\n        return {\r\n            date: formattedDate,\r\n            time: formattedTime\r\n        };\r\n\r\n        // const moment = require('moment-timezone');\r\n        // const utcDateTimeString  = dateTime; // Assuming this is in UTC\r\n        // // Parse the datetime string in UTC timezone\r\n        // const utcDateTime = moment.utc(utcDateTimeString);\r\n        // // Get the user's timezone using browser API\r\n        // const userTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n        // // Convert the datetime to the user's timezone\r\n        // const userDateTime = utcDateTime.clone().tz(userTimezone);\r\n        // // Format the datetime for display\r\n        // const formattedDate = userDateTime.format('YYYY-MM-DD');\r\n        // const formattedTime = userDateTime.format('HH:mm:ss');\r\n        // return {\r\n        //     date: formattedDate,\r\n        //     time: formattedTime\r\n        // };\r\n    },\r\n\r\n    convertUserTimezoneTime: (time) => {\r\n        const moment = require('moment-timezone');\r\n        // Assuming time is in IST, use a default date\r\n        const defaultDate = '1970-01-01';\r\n        const istDateTimeString = `${defaultDate}T${time}`;\r\n\r\n        // Parse the datetime string in IST timezone\r\n        const istDateTime = moment.tz(istDateTimeString, 'Asia/Kolkata');\r\n\r\n        // Get the user's timezone using browser API\r\n        const userTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n\r\n        // Convert the datetime to the user's timezone\r\n        const userDateTime = istDateTime.clone().tz(userTimezone);\r\n\r\n        // Format the time for display\r\n        const formattedTime = userDateTime.format('HH:mm:ss');\r\n\r\n        return formattedTime;\r\n    },\r\n\r\n}\r\n\r\nexport default Constants;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}