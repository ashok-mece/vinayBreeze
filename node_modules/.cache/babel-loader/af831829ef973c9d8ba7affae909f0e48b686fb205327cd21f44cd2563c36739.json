{"ast":null,"code":"import{useEffect,useState}from'react';import'./CandidateInterviewSupportBookings.css';import CandidateService from'../../../../../../Services/candidate_service/CandidateService';import Constants from'../../../../../Constants';import LoadingBar from'../../../../../loading_bar_component/LoadingBar';import{Card,Container,Modal}from'react-bootstrap';import{Rating}from'react-simple-star-rating';import GlobalService from'../../../../../../Services/global_service/GlobalService';import Datetime from'react-datetime';import\"react-datetime/css/react-datetime.css\";import{FaRedo}from'react-icons/fa';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function CandidateInterviewSupportBookings(){const[loadingBar,setLoadingBar]=useState(false);const childColor=getComputedStyle(document.documentElement).getPropertyValue('--child-color');// err msg\nconst[messageColor,setMessageColor]=useState(Constants.MESSAGE_COLOR);const[errMsgDiv,setErrMsgDiv]=useState(false);const[errMsg,setErrMsg]=useState(\"\");//JS for to display err msg\nconst getCandidateInterviewSupportBookingsDisplayErrMsg=errorMessage=>{setErrMsg(errorMessage);setErrMsgDiv(true);// setTimeout(() => {\n//     setErrMsg(\"\");\n//     setErrMsgDiv(false);\n// }, 3000);\n};useEffect(()=>{getCandidateInterviewSupportBookings();// eslint-disable-next-line react-hooks/exhaustive-deps\n},[]);const[candidateInterviewSupportBookings,setCandidateInterviewSupportBookings]=useState([]);const getCandidateInterviewSupportBookings=async()=>{setLoadingBar(true);const candidateInterviewSupportBookingsRequest={candidateId:localStorage.getItem('breezeUserId')};try{const candidateInterviewSupportBookingsResponse=await CandidateService.getCandidateInterviewSupportBookingByCandidateId(candidateInterviewSupportBookingsRequest);console.log(candidateInterviewSupportBookingsResponse);if(candidateInterviewSupportBookingsResponse.length===0){getCandidateInterviewSupportBookingsDisplayErrMsg('Interview Support Bookings are not found');}else{setCandidateInterviewSupportBookings(candidateInterviewSupportBookingsResponse);}}catch(error){console.log(error.message);handleCandidateInterviewSupportBookingsErrors(error.message);}finally{setLoadingBar(false);}};const handleCandidateInterviewSupportBookingsErrors=errorStatus=>{if(Constants.INVALID_REQUEST_FIELD===errorStatus)getCandidateInterviewSupportBookingsDisplayErrMsg('Your Id is invalid');else if(Constants.BREEZE_DATABASE_EXCEPTION===errorStatus)getCandidateInterviewSupportBookingsDisplayErrMsg('Sorry, Our service is down');else getCandidateInterviewSupportBookingsDisplayErrMsg(\"Could not process your request\");};// open Resume code\nconst[resumeUrl,setResumeUrl]=useState('');useEffect(()=>{if(resumeUrl){window.open(resumeUrl,'_blank');}},[resumeUrl]);const handleOpenResume=async(path,interviewSupportBookingId)=>{setLoadingBar(true);console.log(path);try{const resumeRequest={courseContent:path};const resumeResponse=await GlobalService.getCourseContentByPath(resumeRequest);console.log(resumeResponse);const resumeFile=new Blob([resumeResponse.data],{type:resumeResponse.headers['content-type']});const resumeFileUrl=URL.createObjectURL(resumeFile);setResumeUrl(resumeFileUrl);}catch(error){console.error('Error fetching data for path:',path,error);handleResumeErrors(error.message,interviewSupportBookingId);}finally{setLoadingBar(false);}};const handleResumeErrors=(errorStatus,interviewSupportBookingId)=>{if(Constants.INVALID_REQUEST_FIELD===errorStatus)handleInterviewSupportCardErrMsg(\"Resume Path is invalid\",interviewSupportBookingId);else if(Constants.FILES_NOT_FOUND===errorStatus)handleInterviewSupportCardErrMsg(\"File Not Found\",interviewSupportBookingId);else handleInterviewSupportCardErrMsg(\"Could not process your request\",interviewSupportBookingId);};const handleCancelBookingButton=async interviewSupportBookingId=>{setLoadingBar(true);const cancelBookingRequest={interviewSupportBookingId:interviewSupportBookingId};try{const cancelBookingResponse=await CandidateService.cancelInterviewSupportBooking(cancelBookingRequest);console.log(cancelBookingResponse);handleInterviewSupportCardSucMsg('Successfully Cancelled Booking',interviewSupportBookingId);}catch(error){console.log(error.message);handleCancelBookingErrors(error.message,interviewSupportBookingId);}finally{setLoadingBar(false);}};const handleCancelBookingErrors=(errorStatus,interviewSupportBookingId)=>{if(Constants.INVALID_REQUEST_FIELD===errorStatus)handleInterviewSupportCardErrMsg(\"Request is invalid\",interviewSupportBookingId);else if(Constants.ENTITY_NOT_FOUND===errorStatus)handleInterviewSupportCardErrMsg(\"Booking is Not Found\",interviewSupportBookingId);else handleInterviewSupportCardErrMsg(\"Could not process your request\",interviewSupportBookingId);};const[interviewSupportCard,setInterviewSupportCard]=useState(0);const[interviewSupportCardErr,setInterviewSupportCardErr]=useState('');const handleInterviewSupportCardErrMsg=(errorMessage,interviewSupportBookingId)=>{setInterviewSupportCardErr(errorMessage);setInterviewSupportCard(interviewSupportBookingId);setTimeout(()=>{setInterviewSupportCardErr('');setInterviewSupportCard(0);},Constants.SET_TIME_OUT_FOR_ERROR_MSG);};const handleInterviewSupportCardSucMsg=(errorMessage,interviewSupportBookingId)=>{setMessageColor('green');setInterviewSupportCardErr(errorMessage);setInterviewSupportCard(interviewSupportBookingId);setTimeout(()=>{setInterviewSupportCardErr('');setInterviewSupportCard(0);setMessageColor(Constants.MESSAGE_COLOR);window.location.reload();},Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);};// reschedule modal code\nconst[selectedInterviewSupport,setSelectedInterviewSupport]=useState(null);const handleRescheduleInterviewSupportClick=data=>{setSelectedInterviewSupport(data);setShowModal(true);};const[showModal,setShowModal]=useState(false);const handleModalClose=()=>{setShowModal(false);setSelectedInterviewSupport(null);setSelectedInterviewSupportDate(null);setTimeSlotList([]);setSelectedSlots([]);};// date\nconst[selectedInterviewSupportDate,setSelectedInterviewSupportDate]=useState(null);const minDate=new Date();minDate.setDate(minDate.getDate()-1);const maxDate=new Date();maxDate.setDate(maxDate.getDate()+7);const isValidDate=current=>{return current.isAfter(minDate)&&current.isBefore(maxDate);};const handleSelectedInterviewSupportDate=date=>{setSelectedInterviewSupportDate(date);};useEffect(()=>{if(selectedInterviewSupportDate){loadAvailableSlotsOnSelectedDate();}// eslint-disable-next-line react-hooks/exhaustive-deps\n},[selectedInterviewSupportDate]);// time slot code\nconst[timeSlotList,setTimeSlotList]=useState([]);const[selectedSlots,setSelectedSlots]=useState([]);const handleTimeSlotClick=slot=>{if(selectedSlots.includes(slot)){setSelectedSlots(selectedSlots.filter(s=>s!==slot));}else{setSelectedSlots([...selectedSlots,slot]);}console.log(selectedSlots);};const handleTimeSlotReload=()=>{setSelectedSlots([]);};const loadAvailableSlotsOnSelectedDate=async()=>{if(selectedInterviewSupportDate===null){selectedInterviewSupportModalDisplayErrMsg('Please Select a date');}else{setLoadingBar(true);const formData=new FormData();formData.append('interviewSupportId',selectedInterviewSupport.interviewSupportDto.interviewSupportId);formData.append('bookedDateString',selectedInterviewSupportDate);console.log(formData);try{const responseData=await CandidateService.loadAvailableSlotsOnSelectedDate(formData);console.log(responseData);setTimeSlotList(responseData);}catch(error){console.log(error.message);loadAvailableSlotsOnSelectedDateErrors(error.message);}finally{setLoadingBar(false);}}};const loadAvailableSlotsOnSelectedDateErrors=errorStatus=>{if(Constants.INVALID_REQUEST_FIELD===errorStatus)selectedInterviewSupportModalDisplayErrMsg(\"Inputs are invalid\");else if(Constants.ENTITY_NOT_FOUND===errorStatus)selectedInterviewSupportModalDisplayErrMsg(\"Selected Entity is Not Found\");else if(Constants.BREEZE_DATABASE_EXCEPTION===errorStatus)selectedInterviewSupportModalDisplayErrMsg(\"Sorry, Our service is down\");else selectedInterviewSupportModalDisplayErrMsg(\"Could not process your request\");};const handleRescheduleBooking=async()=>{console.log(selectedInterviewSupport);if(selectedSlots===null||selectedSlots.length===0){selectedInterviewSupportModalDisplayErrMsg('select slots to book interview support');}else{setLoadingBar(true);const formData=new FormData();formData.append('interviewSupportBookingId',selectedInterviewSupport.interviewSupportBookingDto.interviewSupportBookingId);formData.append('interviewSupportId',selectedInterviewSupport.interviewSupportDto.interviewSupportId);formData.append('candidateId',localStorage.getItem('breezeUserId'));formData.append('bookedDateString',selectedInterviewSupportDate);formData.append('timeSlotList',selectedSlots.map(slot=>slot.timeSlotId));console.log(formData);try{const responseData=await CandidateService.rescheduleInterviewSupportBooking(formData);console.log(responseData);selectedInterviewSupportModalDisplaySucMsg('Your Booking has Rescheduled, Our Backend Team will Verify Shortly...');}catch(error){console.log(error.message);handleRescheduleBookingErrors(error.message);}finally{setLoadingBar(false);}}};const handleRescheduleBookingErrors=errorStatus=>{if(Constants.INVALID_REQUEST_FIELD===errorStatus)selectedInterviewSupportModalDisplayErrMsg(\"Please enter valid inputs fields\");else if(Constants.ENTITY_NOT_FOUND===errorStatus)selectedInterviewSupportModalDisplayErrMsg(\"Your Booking is not found\");else if(Constants.BREEZE_DATABASE_EXCEPTION===errorStatus)selectedInterviewSupportModalDisplayErrMsg(\"Sorry, Our service is down\");else selectedInterviewSupportModalDisplayErrMsg(\"Could not process your request\");};const[selectedInterviewSupportModalErrMsgDiv,setSelectedInterviewSupportModalErrMsgDiv]=useState(false);const[selectedInterviewSupportModalErrMsg,setSelectedInterviewSupportModalErrMsg]=useState(\"\");//JS for to display err msg\nconst selectedInterviewSupportModalDisplayErrMsg=errorMessage=>{setSelectedInterviewSupportModalErrMsg(errorMessage);setSelectedInterviewSupportModalErrMsgDiv(true);setTimeout(()=>{setSelectedInterviewSupportModalErrMsg(\"\");setSelectedInterviewSupportModalErrMsgDiv(false);},Constants.SET_TIME_OUT_FOR_ERROR_MSG);};const selectedInterviewSupportModalDisplaySucMsg=errorMessage=>{setMessageColor('green');setSelectedInterviewSupportModalErrMsg(errorMessage);setSelectedInterviewSupportModalErrMsgDiv(true);setTimeout(()=>{setSelectedInterviewSupportModalErrMsg(\"\");setSelectedInterviewSupportModalErrMsgDiv(false);setMessageColor(Constants.MESSAGE_COLOR);handleModalClose();window.location.reload();},Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);};const customCssForMsg={fontSize:'medium',fontWeight:'700',color:messageColor};return/*#__PURE__*/_jsxs(\"div\",{className:\"candidate-interview-support-bookings\",children:[loadingBar&&/*#__PURE__*/_jsx(LoadingBar,{}),/*#__PURE__*/_jsx(\"div\",{className:\"\",style:{display:'flex',flexWrap:'wrap'},children:candidateInterviewSupportBookings.map((item,index)=>/*#__PURE__*/_jsxs(Card,{style:{width:'100%',margin:'0.5rem',fontSize:'13px'},className:\"card\",children:[/*#__PURE__*/_jsxs(Card.Header,{style:{backgroundColor:childColor,display:'flex',justifyContent:'space-between',alignItems:'center'},children:[/*#__PURE__*/_jsx(Card.Title,{style:{fontSize:'15px'},children:\"Interview Support Booking\"}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex'},children:[/*#__PURE__*/_jsx(\"button\",{className:\"cancel-booking-button\",onClick:()=>handleCancelBookingButton(item.interviewSupportBookingDto.interviewSupportBookingId),children:\"Cancel Booking\"}),item.interviewSupportBookingDto.adminStatus===Constants.CONFIRMED&&/*#__PURE__*/_jsx(\"button\",{className:\"reschedule-booking-button\",onClick:()=>handleRescheduleInterviewSupportClick(item),children:\"Reschedule\"})]})]}),/*#__PURE__*/_jsx(Card.Body,{children:/*#__PURE__*/_jsxs(Card.Text,{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Interview Supporter-Name : \"}),\" \",/*#__PURE__*/_jsx(\"span\",{children:item.interviewer.userFirstname+\" \"+item.interviewer.userLastname}),\" \",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"label\",{children:\"Interview Supporter-Experience : \"}),\" \",/*#__PURE__*/_jsx(\"span\",{children:item.interviewer.userExperience}),\" \",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{style:{verticalAlign:'middle'},children:\"Rating : \\xA0\"}),/*#__PURE__*/_jsx(\"span\",{children:/*#__PURE__*/_jsx(Rating,{size:20,initialValue:item.interviewSupportDto.rating,allowFraction:true,fillColor:\"#1b4962\",readonly:true})}),\" \",/*#__PURE__*/_jsx(\"br\",{})]}),/*#__PURE__*/_jsx(\"label\",{children:\"Technical-Stack : \"}),\" \",/*#__PURE__*/_jsx(\"span\",{children:item.interviewSupportDto.technologyList.map(tech=>tech.technologyName).join(', ')}),\" \",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"label\",{children:\"Booked Date : \"}),\" \",/*#__PURE__*/_jsx(\"span\",{children:Constants.convertUserTimezoneDateTime(item.interviewSupportBookingDto.bookedDate).date}),\" \",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"div\",{className:\"time-slots\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Booked Slots : \"}),/*#__PURE__*/_jsx(\"div\",{className:\"time-slot-container\",children:item.interviewSupportBookingDto.timeSlotList.map((item,index)=>/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"time-slot-button\",children:Constants.formatTime(Constants.convertUserTimezoneTime(item.slotStartTime))+' - '+Constants.formatTime(Constants.convertUserTimezoneTime(item.slotEndTime))},index))})]}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',justifyContent:'space-between',alignItems:'center'},children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Job Description(JD) : \"}),\" \",/*#__PURE__*/_jsx(\"span\",{className:\"job-description\",children:item.interviewSupportBookingDto.jobDescription?item.interviewSupportBookingDto.jobDescription:'Not Provided'})]}),item.interviewSupportBookingDto.adminStatus===Constants.HOLD&&/*#__PURE__*/_jsxs(\"button\",{className:\"booking-status-pending-button\",children:[/*#__PURE__*/_jsx(\"i\",{class:\"fas fa-hourglass-half\"}),\"Pending\"]}),item.interviewSupportBookingDto.adminStatus===Constants.CONFIRMED&&/*#__PURE__*/_jsxs(\"button\",{className:\"booking-status-confirmed-button\",children:[/*#__PURE__*/_jsx(\"i\",{class:\"fas fa-check-circle\"}),\"Confirmed\"]})]}),/*#__PURE__*/_jsx(\"div\",{children:interviewSupportCard===item.interviewSupportBookingDto.interviewSupportBookingId&&/*#__PURE__*/_jsx(\"div\",{style:customCssForMsg,children:/*#__PURE__*/_jsx(\"label\",{children:interviewSupportCardErr})})})]})}),item.interviewSupportBookingDto.rescheduledStatus!==''&&/*#__PURE__*/_jsxs(Card.Footer,{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Rescheduled Status : \"}),/*#__PURE__*/_jsx(\"span\",{children:item.interviewSupportBookingDto.rescheduledStatus==='HOLD'?'PENDING':item.interviewSupportBookingDto.rescheduledStatus})]})]},index))}),/*#__PURE__*/_jsx(\"div\",{className:\"\",children:errMsgDiv&&/*#__PURE__*/_jsx(\"div\",{style:customCssForMsg,children:/*#__PURE__*/_jsx(\"label\",{children:errMsg})})}),showModal&&/*#__PURE__*/_jsx(Modal,{className:\"view-selected-reschedule-interview-support-modal\",size:\"lg\",show:showModal,onHide:handleModalClose,centered:true,backdrop:\"static\",children:/*#__PURE__*/_jsxs(Container,{className:\"px-5\",children:[/*#__PURE__*/_jsx(Modal.Header,{closeButton:true,children:/*#__PURE__*/_jsx(Modal.Title,{style:{fontSize:'18px'},children:\"Reschedule Booking\"})}),/*#__PURE__*/_jsx(Modal.Body,{style:{fontSize:'13px'},children:/*#__PURE__*/_jsxs(\"div\",{className:\"interview-support-and-interview-supporter-data\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"interview-supporter-data\",children:[/*#__PURE__*/_jsx(\"label\",{style:{textDecoration:'underline',fontSize:'16px'},children:\"Interview Supporter Data\"}),\" \",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"label\",{children:\"Interview Supporter-Name : \"}),\" \",/*#__PURE__*/_jsx(\"span\",{children:selectedInterviewSupport.interviewer.userFirstname+\" \"+selectedInterviewSupport.interviewer.userLastname}),\" \",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"label\",{children:\"Interview Supporter-Experience : \"}),\" \",/*#__PURE__*/_jsx(\"span\",{children:selectedInterviewSupport.interviewer.userExperience}),\" \",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"label\",{children:\"Technical-Stack : \"}),\" \",/*#__PURE__*/_jsx(\"span\",{children:selectedInterviewSupport.interviewSupportDto.technologyList.map(tech=>tech.technologyName).join(', ')}),\" \",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{style:{verticalAlign:'middle'},children:\"Rating : \\xA0\"}),/*#__PURE__*/_jsx(\"span\",{children:/*#__PURE__*/_jsx(Rating,{size:20,initialValue:selectedInterviewSupport.interviewSupportDto.rating,allowFraction:true,fillColor:\"#1b4962\",readonly:true})})]})]}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"div\",{className:\"select-date mt-3\",children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"Select Date to Book Available slots for Interview Support \",/*#__PURE__*/_jsx(\"strong\",{children:\"(You can select from current date to next 7 days)\"})]}),/*#__PURE__*/_jsx(Datetime,{value:selectedInterviewSupportDate,onChange:handleSelectedInterviewSupportDate,isValidDate:isValidDate,inputProps:{placeholder:'Select Date',readOnly:true},timeFormat:false})]})}),timeSlotList.length!==0&&/*#__PURE__*/_jsxs(\"div\",{className:\"time-slots mt-3\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"label-container\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Select Available Time Slots\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"reload-container\",onClick:handleTimeSlotReload,children:[/*#__PURE__*/_jsx(FaRedo,{className:\"reload-icon\"}),/*#__PURE__*/_jsx(\"span\",{className:\"reload-text\",children:\"Uncheck All Slots\"})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"time-slot-container\",children:timeSlotList.map((item,index)=>/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"time-slot-button \".concat(selectedSlots.includes(item)?'selected':''),onClick:()=>handleTimeSlotClick(item),disabled:item.isBooked,title:item.isBooked?'Slot is Booked':'',children:Constants.formatTime(Constants.convertUserTimezoneTime(item.slotStartTime))+' - '+Constants.formatTime(Constants.convertUserTimezoneTime(item.slotEndTime))},index)}))})]}),/*#__PURE__*/_jsx(\"div\",{className:\"mt-2\",children:selectedInterviewSupportModalErrMsgDiv&&/*#__PURE__*/_jsx(\"div\",{style:customCssForMsg,children:/*#__PURE__*/_jsx(\"label\",{children:selectedInterviewSupportModalErrMsg})})})]})}),timeSlotList.length!==0&&/*#__PURE__*/_jsx(Modal.Footer,{children:/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',gap:'15px'},children:/*#__PURE__*/_jsx(\"button\",{className:\"modal-button\",onClick:handleRescheduleBooking,children:\"Reschedule Booking\"})})})]})})]});}export default CandidateInterviewSupportBookings;","map":{"version":3,"names":["useEffect","useState","CandidateService","Constants","LoadingBar","Card","Container","Modal","Rating","GlobalService","Datetime","FaRedo","jsx","_jsx","jsxs","_jsxs","CandidateInterviewSupportBookings","loadingBar","setLoadingBar","childColor","getComputedStyle","document","documentElement","getPropertyValue","messageColor","setMessageColor","MESSAGE_COLOR","errMsgDiv","setErrMsgDiv","errMsg","setErrMsg","getCandidateInterviewSupportBookingsDisplayErrMsg","errorMessage","getCandidateInterviewSupportBookings","candidateInterviewSupportBookings","setCandidateInterviewSupportBookings","candidateInterviewSupportBookingsRequest","candidateId","localStorage","getItem","candidateInterviewSupportBookingsResponse","getCandidateInterviewSupportBookingByCandidateId","console","log","length","error","message","handleCandidateInterviewSupportBookingsErrors","errorStatus","INVALID_REQUEST_FIELD","BREEZE_DATABASE_EXCEPTION","resumeUrl","setResumeUrl","window","open","handleOpenResume","path","interviewSupportBookingId","resumeRequest","courseContent","resumeResponse","getCourseContentByPath","resumeFile","Blob","data","type","headers","resumeFileUrl","URL","createObjectURL","handleResumeErrors","handleInterviewSupportCardErrMsg","FILES_NOT_FOUND","handleCancelBookingButton","cancelBookingRequest","cancelBookingResponse","cancelInterviewSupportBooking","handleInterviewSupportCardSucMsg","handleCancelBookingErrors","ENTITY_NOT_FOUND","interviewSupportCard","setInterviewSupportCard","interviewSupportCardErr","setInterviewSupportCardErr","setTimeout","SET_TIME_OUT_FOR_ERROR_MSG","location","reload","SET_TIME_OUT_FOR_SUCCESS_MSG","selectedInterviewSupport","setSelectedInterviewSupport","handleRescheduleInterviewSupportClick","setShowModal","showModal","handleModalClose","setSelectedInterviewSupportDate","setTimeSlotList","setSelectedSlots","selectedInterviewSupportDate","minDate","Date","setDate","getDate","maxDate","isValidDate","current","isAfter","isBefore","handleSelectedInterviewSupportDate","date","loadAvailableSlotsOnSelectedDate","timeSlotList","selectedSlots","handleTimeSlotClick","slot","includes","filter","s","handleTimeSlotReload","selectedInterviewSupportModalDisplayErrMsg","formData","FormData","append","interviewSupportDto","interviewSupportId","responseData","loadAvailableSlotsOnSelectedDateErrors","handleRescheduleBooking","interviewSupportBookingDto","map","timeSlotId","rescheduleInterviewSupportBooking","selectedInterviewSupportModalDisplaySucMsg","handleRescheduleBookingErrors","selectedInterviewSupportModalErrMsgDiv","setSelectedInterviewSupportModalErrMsgDiv","selectedInterviewSupportModalErrMsg","setSelectedInterviewSupportModalErrMsg","customCssForMsg","fontSize","fontWeight","color","className","children","style","display","flexWrap","item","index","width","margin","Header","backgroundColor","justifyContent","alignItems","Title","onClick","adminStatus","CONFIRMED","Body","Text","interviewer","userFirstname","userLastname","userExperience","verticalAlign","size","initialValue","rating","allowFraction","fillColor","readonly","technologyList","tech","technologyName","join","convertUserTimezoneDateTime","bookedDate","formatTime","convertUserTimezoneTime","slotStartTime","slotEndTime","jobDescription","HOLD","class","rescheduledStatus","Footer","show","onHide","centered","backdrop","closeButton","textDecoration","value","onChange","inputProps","placeholder","readOnly","timeFormat","concat","disabled","isBooked","title","gap"],"sources":["C:/Users/DELL/Documents/prepswisefinalprojects/breeze (15)-frontend/breeze/src/components/dashboard_component/feature_component/candidate_feature_component/interview_support/candidate_interview_support_bookings_component/CandidateInterviewSupportBookings.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport './CandidateInterviewSupportBookings.css';\r\nimport CandidateService from '../../../../../../Services/candidate_service/CandidateService';\r\nimport Constants from '../../../../../Constants';\r\nimport LoadingBar from '../../../../../loading_bar_component/LoadingBar';\r\nimport { Card, Container, Modal } from 'react-bootstrap';\r\nimport { Rating } from 'react-simple-star-rating';\r\nimport GlobalService from '../../../../../../Services/global_service/GlobalService';\r\nimport Datetime from 'react-datetime';\r\nimport \"react-datetime/css/react-datetime.css\";\r\nimport { FaRedo } from 'react-icons/fa';\r\n\r\nfunction CandidateInterviewSupportBookings() {\r\n\r\n    const [loadingBar, setLoadingBar] = useState(false);\r\n\r\n    const childColor = getComputedStyle(document.documentElement).getPropertyValue('--child-color');\r\n\r\n    // err msg\r\n    const [messageColor, setMessageColor] = useState(Constants.MESSAGE_COLOR);\r\n    const [errMsgDiv, setErrMsgDiv] = useState(false);\r\n    const [errMsg, setErrMsg] = useState(\"\");\r\n    //JS for to display err msg\r\n    const getCandidateInterviewSupportBookingsDisplayErrMsg = (errorMessage) => {\r\n        setErrMsg(errorMessage);\r\n        setErrMsgDiv(true);\r\n        // setTimeout(() => {\r\n        //     setErrMsg(\"\");\r\n        //     setErrMsgDiv(false);\r\n        // }, 3000);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getCandidateInterviewSupportBookings();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const [candidateInterviewSupportBookings, setCandidateInterviewSupportBookings] = useState([]);\r\n    const getCandidateInterviewSupportBookings = async () => {\r\n        setLoadingBar(true);\r\n        const candidateInterviewSupportBookingsRequest = {\r\n            candidateId: localStorage.getItem('breezeUserId'),\r\n        }\r\n\r\n        try {\r\n            const candidateInterviewSupportBookingsResponse = await CandidateService.getCandidateInterviewSupportBookingByCandidateId(candidateInterviewSupportBookingsRequest);\r\n            console.log(candidateInterviewSupportBookingsResponse);\r\n            if (candidateInterviewSupportBookingsResponse.length === 0) {\r\n                getCandidateInterviewSupportBookingsDisplayErrMsg('Interview Support Bookings are not found');\r\n            } else {\r\n                setCandidateInterviewSupportBookings(candidateInterviewSupportBookingsResponse);\r\n            }\r\n        } catch (error) {\r\n            console.log(error.message);\r\n            handleCandidateInterviewSupportBookingsErrors(error.message);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    }\r\n    const handleCandidateInterviewSupportBookingsErrors = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            getCandidateInterviewSupportBookingsDisplayErrMsg('Your Id is invalid');\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            getCandidateInterviewSupportBookingsDisplayErrMsg('Sorry, Our service is down');\r\n        else\r\n            getCandidateInterviewSupportBookingsDisplayErrMsg(\"Could not process your request\");\r\n    }\r\n\r\n    // open Resume code\r\n    const [resumeUrl, setResumeUrl] = useState('');\r\n    useEffect(() => {\r\n        if (resumeUrl) {\r\n            window.open(resumeUrl, '_blank');\r\n        }\r\n    }, [resumeUrl]);\r\n    const handleOpenResume = async (path, interviewSupportBookingId) => {\r\n        setLoadingBar(true);\r\n        console.log(path);\r\n        try {\r\n            const resumeRequest = {\r\n                courseContent: path,\r\n            }\r\n            const resumeResponse = await GlobalService.getCourseContentByPath(resumeRequest);\r\n            console.log(resumeResponse);\r\n            const resumeFile = new Blob([resumeResponse.data], { type: resumeResponse.headers['content-type'] });\r\n            const resumeFileUrl = URL.createObjectURL(resumeFile);\r\n            setResumeUrl(resumeFileUrl);\r\n        } catch (error) {\r\n            console.error('Error fetching data for path:', path, error);\r\n            handleResumeErrors(error.message, interviewSupportBookingId);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    }\r\n    const handleResumeErrors = (errorStatus, interviewSupportBookingId) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            handleInterviewSupportCardErrMsg(\"Resume Path is invalid\", interviewSupportBookingId);\r\n        else if (Constants.FILES_NOT_FOUND === errorStatus)\r\n            handleInterviewSupportCardErrMsg(\"File Not Found\", interviewSupportBookingId);\r\n        else\r\n            handleInterviewSupportCardErrMsg(\"Could not process your request\", interviewSupportBookingId);\r\n    }\r\n\r\n    const handleCancelBookingButton = async (interviewSupportBookingId) => {\r\n        setLoadingBar(true);\r\n        const cancelBookingRequest = {\r\n            interviewSupportBookingId: interviewSupportBookingId,\r\n        }\r\n\r\n        try {\r\n            const cancelBookingResponse = await CandidateService.cancelInterviewSupportBooking(cancelBookingRequest);\r\n            console.log(cancelBookingResponse);\r\n            handleInterviewSupportCardSucMsg('Successfully Cancelled Booking', interviewSupportBookingId);\r\n        } catch (error) {\r\n            console.log(error.message);\r\n            handleCancelBookingErrors(error.message, interviewSupportBookingId);\r\n        } finally {\r\n            setLoadingBar(false);\r\n        }\r\n    }\r\n\r\n    const handleCancelBookingErrors = (errorStatus, interviewSupportBookingId) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            handleInterviewSupportCardErrMsg(\"Request is invalid\", interviewSupportBookingId);\r\n        else if (Constants.ENTITY_NOT_FOUND === errorStatus)\r\n            handleInterviewSupportCardErrMsg(\"Booking is Not Found\", interviewSupportBookingId);\r\n        else\r\n            handleInterviewSupportCardErrMsg(\"Could not process your request\", interviewSupportBookingId);\r\n    }\r\n\r\n    const [interviewSupportCard, setInterviewSupportCard] = useState(0);\r\n    const [interviewSupportCardErr, setInterviewSupportCardErr] = useState('');\r\n    const handleInterviewSupportCardErrMsg = (errorMessage, interviewSupportBookingId) => {\r\n        setInterviewSupportCardErr(errorMessage);\r\n        setInterviewSupportCard(interviewSupportBookingId);\r\n        setTimeout(() => {\r\n            setInterviewSupportCardErr('');\r\n            setInterviewSupportCard(0);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n    const handleInterviewSupportCardSucMsg = (errorMessage, interviewSupportBookingId) => {\r\n        setMessageColor('green');\r\n        setInterviewSupportCardErr(errorMessage);\r\n        setInterviewSupportCard(interviewSupportBookingId);\r\n        setTimeout(() => {\r\n            setInterviewSupportCardErr('');\r\n            setInterviewSupportCard(0);\r\n            setMessageColor(Constants.MESSAGE_COLOR);\r\n            window.location.reload();\r\n        }, Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);\r\n    }\r\n\r\n    // reschedule modal code\r\n    const [selectedInterviewSupport, setSelectedInterviewSupport] = useState(null);\r\n    const handleRescheduleInterviewSupportClick = (data) => {\r\n        setSelectedInterviewSupport(data);\r\n        setShowModal(true);\r\n    }\r\n\r\n    const [showModal, setShowModal] = useState(false);\r\n    const handleModalClose = () => {\r\n        setShowModal(false);\r\n        setSelectedInterviewSupport(null);\r\n        setSelectedInterviewSupportDate(null);\r\n        setTimeSlotList([]);\r\n        setSelectedSlots([]);\r\n    };\r\n\r\n    // date\r\n    const [selectedInterviewSupportDate, setSelectedInterviewSupportDate] = useState(null);\r\n    const minDate = new Date();\r\n    minDate.setDate(minDate.getDate() - 1);\r\n    const maxDate = new Date();\r\n    maxDate.setDate(maxDate.getDate() + 7);\r\n    const isValidDate = (current) => {\r\n        return current.isAfter(minDate) && current.isBefore(maxDate);\r\n    };\r\n    const handleSelectedInterviewSupportDate = (date) => {\r\n        setSelectedInterviewSupportDate(date);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (selectedInterviewSupportDate) {\r\n            loadAvailableSlotsOnSelectedDate();\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [selectedInterviewSupportDate]);\r\n\r\n    // time slot code\r\n    const [timeSlotList, setTimeSlotList] = useState([]);\r\n    const [selectedSlots, setSelectedSlots] = useState([]);\r\n    const handleTimeSlotClick = (slot) => {\r\n        if (selectedSlots.includes(slot)) {\r\n            setSelectedSlots(selectedSlots.filter(s => s !== slot));\r\n        } else {\r\n            setSelectedSlots([...selectedSlots, slot]);\r\n        }\r\n        console.log(selectedSlots);\r\n    };\r\n    const handleTimeSlotReload = () => {\r\n        setSelectedSlots([]);\r\n    };\r\n\r\n    const loadAvailableSlotsOnSelectedDate = async () => {\r\n        if (selectedInterviewSupportDate === null) {\r\n            selectedInterviewSupportModalDisplayErrMsg('Please Select a date');\r\n        } else {\r\n            setLoadingBar(true);\r\n            const formData = new FormData();\r\n            formData.append('interviewSupportId', selectedInterviewSupport.interviewSupportDto.interviewSupportId);\r\n            formData.append('bookedDateString', selectedInterviewSupportDate);\r\n            console.log(formData);\r\n            try {\r\n                const responseData = await CandidateService.loadAvailableSlotsOnSelectedDate(formData);\r\n                console.log(responseData);\r\n                setTimeSlotList(responseData);\r\n            } catch (error) {\r\n                console.log(error.message);\r\n                loadAvailableSlotsOnSelectedDateErrors(error.message);\r\n            } finally {\r\n                setLoadingBar(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    const loadAvailableSlotsOnSelectedDateErrors = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            selectedInterviewSupportModalDisplayErrMsg(\"Inputs are invalid\");\r\n        else if (Constants.ENTITY_NOT_FOUND === errorStatus)\r\n            selectedInterviewSupportModalDisplayErrMsg(\"Selected Entity is Not Found\");\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            selectedInterviewSupportModalDisplayErrMsg(\"Sorry, Our service is down\");\r\n        else\r\n            selectedInterviewSupportModalDisplayErrMsg(\"Could not process your request\");\r\n    }\r\n\r\n    const handleRescheduleBooking = async () => {\r\n        console.log(selectedInterviewSupport);\r\n        if (selectedSlots === null || selectedSlots.length === 0) {\r\n            selectedInterviewSupportModalDisplayErrMsg('select slots to book interview support');\r\n        } else {\r\n            setLoadingBar(true);\r\n            const formData = new FormData();\r\n            formData.append('interviewSupportBookingId', selectedInterviewSupport.interviewSupportBookingDto.interviewSupportBookingId);\r\n            formData.append('interviewSupportId', selectedInterviewSupport.interviewSupportDto.interviewSupportId);\r\n            formData.append('candidateId', localStorage.getItem('breezeUserId'));\r\n            formData.append('bookedDateString', selectedInterviewSupportDate);\r\n            formData.append('timeSlotList', (selectedSlots.map(slot => slot.timeSlotId)));\r\n            console.log(formData);\r\n            try {\r\n                const responseData = await CandidateService.rescheduleInterviewSupportBooking(formData);\r\n                console.log(responseData);\r\n                selectedInterviewSupportModalDisplaySucMsg('Your Booking has Rescheduled, Our Backend Team will Verify Shortly...');\r\n            } catch (error) {\r\n                console.log(error.message);\r\n                handleRescheduleBookingErrors(error.message);\r\n            } finally {\r\n                setLoadingBar(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleRescheduleBookingErrors = (errorStatus) => {\r\n        if (Constants.INVALID_REQUEST_FIELD === errorStatus)\r\n            selectedInterviewSupportModalDisplayErrMsg(\"Please enter valid inputs fields\");\r\n        else if (Constants.ENTITY_NOT_FOUND === errorStatus)\r\n            selectedInterviewSupportModalDisplayErrMsg(\"Your Booking is not found\");\r\n        else if (Constants.BREEZE_DATABASE_EXCEPTION === errorStatus)\r\n            selectedInterviewSupportModalDisplayErrMsg(\"Sorry, Our service is down\");\r\n        else\r\n            selectedInterviewSupportModalDisplayErrMsg(\"Could not process your request\");\r\n    }\r\n\r\n    const [selectedInterviewSupportModalErrMsgDiv, setSelectedInterviewSupportModalErrMsgDiv] = useState(false);\r\n    const [selectedInterviewSupportModalErrMsg, setSelectedInterviewSupportModalErrMsg] = useState(\"\");\r\n    //JS for to display err msg\r\n    const selectedInterviewSupportModalDisplayErrMsg = (errorMessage) => {\r\n        setSelectedInterviewSupportModalErrMsg(errorMessage);\r\n        setSelectedInterviewSupportModalErrMsgDiv(true);\r\n        setTimeout(() => {\r\n            setSelectedInterviewSupportModalErrMsg(\"\");\r\n            setSelectedInterviewSupportModalErrMsgDiv(false);\r\n        }, Constants.SET_TIME_OUT_FOR_ERROR_MSG);\r\n    }\r\n    const selectedInterviewSupportModalDisplaySucMsg = (errorMessage) => {\r\n        setMessageColor('green');\r\n        setSelectedInterviewSupportModalErrMsg(errorMessage);\r\n        setSelectedInterviewSupportModalErrMsgDiv(true);\r\n        setTimeout(() => {\r\n            setSelectedInterviewSupportModalErrMsg(\"\");\r\n            setSelectedInterviewSupportModalErrMsgDiv(false);\r\n            setMessageColor(Constants.MESSAGE_COLOR);\r\n            handleModalClose();\r\n            window.location.reload();\r\n        }, Constants.SET_TIME_OUT_FOR_SUCCESS_MSG);\r\n    }\r\n\r\n    const customCssForMsg = {\r\n        fontSize: 'medium',\r\n        fontWeight: '700',\r\n        color: messageColor,\r\n    }\r\n\r\n    return (\r\n        <div className='candidate-interview-support-bookings'>\r\n            {loadingBar && <LoadingBar />}\r\n            <div className='' style={{ display: 'flex', flexWrap: 'wrap' }}>\r\n                {candidateInterviewSupportBookings.map((item, index) => (\r\n                    <Card key={index} style={{ width: '100%', margin: '0.5rem', fontSize: '13px' }} className='card'>\r\n                        <Card.Header style={{ backgroundColor: childColor, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                            <Card.Title style={{ fontSize: '15px' }}>{\"Interview Support Booking\"}</Card.Title>\r\n                            <div style={{ display: 'flex' }}>\r\n                                <button\r\n                                    className='cancel-booking-button'\r\n                                    onClick={() => handleCancelBookingButton(item.interviewSupportBookingDto.interviewSupportBookingId)}\r\n                                >\r\n                                    Cancel Booking\r\n                                </button>\r\n                                {item.interviewSupportBookingDto.adminStatus === Constants.CONFIRMED && (\r\n                                    <button\r\n                                        className='reschedule-booking-button'\r\n                                        onClick={() => handleRescheduleInterviewSupportClick(item)}\r\n                                    >\r\n                                        Reschedule\r\n                                    </button>\r\n                                )}\r\n                            </div>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            <Card.Text>\r\n                                <label>Interview Supporter-Name : </label> <span>{item.interviewer.userFirstname + \" \" + item.interviewer.userLastname}</span> <br />\r\n                                <label>Interview Supporter-Experience : </label> <span>{item.interviewer.userExperience}</span> <br />\r\n                                <div>\r\n                                    <label style={{ verticalAlign: 'middle' }}>Rating : &nbsp;</label>\r\n                                    <span>\r\n                                        <Rating\r\n                                            size={20}\r\n                                            initialValue={item.interviewSupportDto.rating}\r\n                                            allowFraction\r\n                                            fillColor='#1b4962'\r\n                                            readonly={true}\r\n                                        />\r\n                                    </span> <br />\r\n                                </div>\r\n                                <label>Technical-Stack : </label> <span>{item.interviewSupportDto.technologyList.map(tech => tech.technologyName).join(', ')}</span> <br />\r\n                                <label>Booked Date : </label> <span>{(Constants.convertUserTimezoneDateTime(item.interviewSupportBookingDto.bookedDate)).date}</span> <br />\r\n                                <div className='time-slots'>\r\n                                    <label>Booked Slots : </label>\r\n                                    <div className='time-slot-container'>\r\n                                        {item.interviewSupportBookingDto.timeSlotList.map((item, index) => (\r\n                                            <button\r\n                                                key={index}\r\n                                                type='button'\r\n                                                className='time-slot-button'\r\n                                            >\r\n                                                {Constants.formatTime(Constants.convertUserTimezoneTime(item.slotStartTime)) + ' - ' + Constants.formatTime(Constants.convertUserTimezoneTime(item.slotEndTime))}\r\n                                            </button>\r\n                                        ))}\r\n                                    </div>\r\n                                </div> \r\n                                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                                    <div>\r\n                                        <label>Job Description(JD) : </label> <span className='job-description'>{item.interviewSupportBookingDto.jobDescription ? item.interviewSupportBookingDto.jobDescription : ('Not Provided')}</span>\r\n                                    </div>\r\n                                    {/* <div>\r\n                                        <label>Resume Link : </label>\r\n                                        <span>\r\n                                            {item.interviewSupportBookingDto.resume ? (\r\n                                                <button\r\n                                                    onClick={() => handleOpenResume(item.interviewSupportBookingDto.resume, item.interviewSupportBookingDto.interviewSupportBookingId)}\r\n                                                    style={{\r\n                                                        border: 'none',\r\n                                                        background: 'none',\r\n                                                        padding: '0',\r\n                                                        color: '#1b4962',\r\n                                                        textDecoration: 'underline',\r\n                                                        cursor: 'pointer',\r\n                                                    }}\r\n                                                >\r\n                                                    Open Resume\r\n                                                </button>\r\n                                            ) : (' Not Provided')}\r\n                                        </span>\r\n                                    </div> */}\r\n                                    {item.interviewSupportBookingDto.adminStatus === Constants.HOLD && (\r\n                                        <button\r\n                                            className='booking-status-pending-button'\r\n                                        >\r\n                                            <i class=\"fas fa-hourglass-half\"></i>\r\n                                            Pending\r\n                                        </button>\r\n                                    )}\r\n                                    {item.interviewSupportBookingDto.adminStatus === Constants.CONFIRMED && (\r\n                                        <button\r\n                                            className='booking-status-confirmed-button'\r\n                                        >\r\n                                            <i class=\"fas fa-check-circle\"></i>\r\n                                            Confirmed\r\n                                        </button>\r\n                                    )}\r\n                                </div>\r\n                                <div>\r\n                                    {interviewSupportCard === item.interviewSupportBookingDto.interviewSupportBookingId && (\r\n                                        <div style={customCssForMsg}>\r\n                                            <label>{interviewSupportCardErr}</label>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </Card.Text>\r\n                        </Card.Body>\r\n                        {item.interviewSupportBookingDto.rescheduledStatus !== '' && (\r\n                            <Card.Footer>\r\n                                <label>Rescheduled Status : </label><span>{item.interviewSupportBookingDto.rescheduledStatus === 'HOLD' ? ('PENDING') : item.interviewSupportBookingDto.rescheduledStatus}</span>\r\n                            </Card.Footer>\r\n                        )}\r\n                    </Card>\r\n                ))}\r\n            </div>\r\n            <div className=''>\r\n                {errMsgDiv &&\r\n                    <div style={customCssForMsg}>\r\n                        <label>{errMsg}</label>\r\n                    </div>}\r\n            </div>\r\n            {showModal && (\r\n                <Modal className='view-selected-reschedule-interview-support-modal' size='lg' show={showModal} onHide={handleModalClose} centered backdrop=\"static\">\r\n                    <Container className='px-5'>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title style={{ fontSize: '18px' }}>\r\n                                Reschedule Booking\r\n                            </Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body style={{ fontSize: '13px' }}>\r\n                            <div className='interview-support-and-interview-supporter-data'>\r\n                                <div className='interview-supporter-data'>\r\n                                    <label style={{ textDecoration: 'underline', fontSize: '16px' }}>Interview Supporter Data</label> <br />\r\n                                    <label>Interview Supporter-Name : </label> <span>{selectedInterviewSupport.interviewer.userFirstname + \" \" + selectedInterviewSupport.interviewer.userLastname}</span> <br />\r\n                                    <label>Interview Supporter-Experience : </label> <span>{selectedInterviewSupport.interviewer.userExperience}</span> <br />\r\n                                    <label>Technical-Stack : </label> <span>{selectedInterviewSupport.interviewSupportDto.technologyList.map(tech => tech.technologyName).join(', ')}</span> <br />\r\n                                    <div>\r\n                                        <label style={{ verticalAlign: 'middle' }}>Rating : &nbsp;</label>\r\n                                        <span>\r\n                                            <Rating\r\n                                                size={20}\r\n                                                initialValue={selectedInterviewSupport.interviewSupportDto.rating}\r\n                                                allowFraction\r\n                                                fillColor='#1b4962'\r\n                                                readonly={true}\r\n                                            />\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n                                <div>\r\n                                    <div className='select-date mt-3'>\r\n                                        <label>Select Date to Book Available slots for Interview Support <strong>(You can select from current date to next 7 days)</strong></label>\r\n                                        <Datetime\r\n                                            value={selectedInterviewSupportDate}\r\n                                            onChange={handleSelectedInterviewSupportDate}\r\n                                            isValidDate={isValidDate}\r\n                                            inputProps={{\r\n                                                placeholder: 'Select Date',\r\n                                                readOnly: true,\r\n                                            }}\r\n                                            timeFormat={false}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                {timeSlotList.length !== 0 && (\r\n                                    <div className='time-slots mt-3'>\r\n                                        <div className=\"label-container\">\r\n                                            <label>Select Available Time Slots</label>\r\n                                            <div className=\"reload-container\" onClick={handleTimeSlotReload}>\r\n                                                <FaRedo className=\"reload-icon\" />\r\n                                                <span className=\"reload-text\">Uncheck All Slots</span>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"time-slot-container\" >\r\n                                            {timeSlotList.map((item, index) => (\r\n                                                <div>\r\n                                                    <button\r\n                                                        key={index}\r\n                                                        type='button'\r\n                                                        className={`time-slot-button ${selectedSlots.includes(item) ? 'selected' : ''}`}\r\n                                                        onClick={() => handleTimeSlotClick(item)}\r\n                                                        disabled={item.isBooked}\r\n                                                        title={item.isBooked ? 'Slot is Booked' : ''}\r\n                                                    >\r\n                                                        {Constants.formatTime(Constants.convertUserTimezoneTime(item.slotStartTime)) + ' - ' + Constants.formatTime(Constants.convertUserTimezoneTime(item.slotEndTime))}\r\n                                                    </button>\r\n                                                </div>\r\n                                            ))}\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                                <div className='mt-2'>\r\n                                    {selectedInterviewSupportModalErrMsgDiv &&\r\n                                        <div style={customCssForMsg}>\r\n                                            <label>{selectedInterviewSupportModalErrMsg}</label>\r\n                                        </div>}\r\n                                </div>\r\n                            </div>\r\n                        </Modal.Body>\r\n                        {timeSlotList.length !== 0 && (\r\n                            <Modal.Footer>\r\n                                <div style={{ display: 'flex', gap: '15px' }}>\r\n                                    <button\r\n                                        className='modal-button'\r\n                                        onClick={handleRescheduleBooking}\r\n                                    >\r\n                                        Reschedule Booking\r\n                                    </button>\r\n                                </div>\r\n                            </Modal.Footer>\r\n                        )}\r\n                    </Container>\r\n                </Modal>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CandidateInterviewSupportBookings; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}