{"ast":null,"code":"// import moment from 'moment-timezone';\nconst Constants={// base url\nBASE_URL:'https://prepswise.com:8443/breeze',// BASE_URL: 'http://localhost:8080',\nMESSAGE_COLOR:'#be3144',SET_TIME_OUT_FOR_ERROR_MSG:30000,SET_TIME_OUT_FOR_SUCCESS_MSG:3000,// user types\nADMIN:\"ADMIN\",EXPONENT:\"EXPONENT\",CANDIDATE:\"CANDIDATE\",// exponent types\nTRAINER:\"TRAINER\",INTERVIEW_SUPPORTER:\"INTERVIEW SUPPORTER\",JOB_SUPPORTER:\"JOB SUPPORTER\",// err status\nINVALID_REQUEST_FIELD:\"INVALID_REQUEST_FIELD\",EXISTING_USERNAME:\"EXISTING_USERNAME\",BREEZE_DATABASE_EXCEPTION:\"BREEZE_DATABASE_EXCEPTION\",ADDRESS_EXCEPTION:\"ADDRESS_EXCEPTION\",MESSAGING_EXCEPTION:\"MESSAGING_EXCEPTION\",ENTITY_NOT_FOUND:\"ENTITY_NOT_FOUND\",OTP_NOT_MATCHED:\"OTP_NOT_MATCHED\",OTP_NOT_MATCHED_FOR_MAIL:\"OTP_NOT_MATCHED_FOR_MAIL\",OTP_NOT_MATCHED_FOR_CONTACT:\"OTP_NOT_MATCHED_FOR_CONTACT\",PASSWORD_NOT_MATCHED:\"PASSWORD_NOT_MATCHED\",EXISTING_TECHNOLOGY:\"EXISTING_TECHNOLOGY\",EXISTING_COURSE:\"EXISTING_COURSE\",INACTIVE:\"INACTIVE\",FILES_NOT_UPLOADED:\"FILES_NOT_UPLOADED\",FILES_NOT_FOUND:\"FILES_NOT_FOUND\",EXISTING_MEETING_LINK:\"EXISTING_MEETING_LINK\",VERIFIED:\"VERIFIED\",EXISTING_INTERVIEW_SUPPORT:\"EXISTING_INTERVIEW_SUPPORT\",EXISTING_BOOKINGS:\"EXISTING_BOOKINGS\",EXISTING_JOB_SUPPORT:\"EXISTING_JOB_SUPPORT\",SLOTS_BLOCKED:\"SLOTS_BLOCKED\",SLOTS_BLOCKED_FOR_CANDIDATE:\"SLOTS_BLOCKED_FOR_CANDIDATE\",INVALID_PHONE_NUMBER:\"INVALID_PHONE_NUMBER\",OTP_NOT_SENT:\"OTP_NOT_SENT\",// admin status\nHOLD:\"HOLD\",APPROVED:\"APPROVED\",REJECTED:\"REJECTED\",// training candidates status\nALREADY_ENROLLED_FOR_SELECTED_COURSE:\"ALREADY_ENROLLED_FOR_SELECTED_COURSE\",PENDING:\"PENDING\",CONFIRMED:\"CONFIRMED\",WITHDRAW:\"WITHDRAW\",// session duration\nSESSION_DURATION:\"90 minutes\",// format time\nformatTime:timeString=>{const date=new Date();const[hours,minutes,seconds]=timeString.split(':');date.setHours(parseInt(hours,10));date.setMinutes(parseInt(minutes,10));date.setSeconds(parseInt(seconds,10));// Format the time in 12-hour format with AM/PM\nconst formattedTime=date.toLocaleString('en-US',{hour:'numeric',minute:'numeric',// second: 'numeric',\nhour12:true});return formattedTime;},// convert date and time based on user timezone\nconvertUserTimezoneDateTime:dateTime=>{const moment=require('moment-timezone');const istDateTimeString=dateTime;// Assuming this is in IST\n// Parse the datetime string in IST timezone\nconst istDateTime=moment.tz(istDateTimeString,'Asia/Kolkata');// Get the user's timezone using browser API\nconst userTimezone=Intl.DateTimeFormat().resolvedOptions().timeZone;// Convert the datetime to the user's timezone\nconst userDateTime=istDateTime.clone().tz(userTimezone);// Format the datetime for display\nconst formattedDate=userDateTime.format('YYYY-MM-DD');const formattedTime=userDateTime.format('HH:mm:ss');return{date:formattedDate,time:formattedTime};// const moment = require('moment-timezone');\n// const utcDateTimeString  = dateTime; // Assuming this is in UTC\n// // Parse the datetime string in UTC timezone\n// const utcDateTime = moment.utc(utcDateTimeString);\n// // Get the user's timezone using browser API\n// const userTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n// // Convert the datetime to the user's timezone\n// const userDateTime = utcDateTime.clone().tz(userTimezone);\n// // Format the datetime for display\n// const formattedDate = userDateTime.format('YYYY-MM-DD');\n// const formattedTime = userDateTime.format('HH:mm:ss');\n// return {\n//     date: formattedDate,\n//     time: formattedTime\n// };\n},convertUserTimezoneTime:time=>{const moment=require('moment-timezone');// Assuming time is in IST, use a default date\nconst defaultDate='1970-01-01';const istDateTimeString=\"\".concat(defaultDate,\"T\").concat(time);// Parse the datetime string in IST timezone\nconst istDateTime=moment.tz(istDateTimeString,'Asia/Kolkata');// Get the user's timezone using browser API\nconst userTimezone=Intl.DateTimeFormat().resolvedOptions().timeZone;// Convert the datetime to the user's timezone\nconst userDateTime=istDateTime.clone().tz(userTimezone);// Format the time for display\nconst formattedTime=userDateTime.format('HH:mm:ss');return formattedTime;}};export default Constants;","map":{"version":3,"names":["Constants","BASE_URL","MESSAGE_COLOR","SET_TIME_OUT_FOR_ERROR_MSG","SET_TIME_OUT_FOR_SUCCESS_MSG","ADMIN","EXPONENT","CANDIDATE","TRAINER","INTERVIEW_SUPPORTER","JOB_SUPPORTER","INVALID_REQUEST_FIELD","EXISTING_USERNAME","BREEZE_DATABASE_EXCEPTION","ADDRESS_EXCEPTION","MESSAGING_EXCEPTION","ENTITY_NOT_FOUND","OTP_NOT_MATCHED","OTP_NOT_MATCHED_FOR_MAIL","OTP_NOT_MATCHED_FOR_CONTACT","PASSWORD_NOT_MATCHED","EXISTING_TECHNOLOGY","EXISTING_COURSE","INACTIVE","FILES_NOT_UPLOADED","FILES_NOT_FOUND","EXISTING_MEETING_LINK","VERIFIED","EXISTING_INTERVIEW_SUPPORT","EXISTING_BOOKINGS","EXISTING_JOB_SUPPORT","SLOTS_BLOCKED","SLOTS_BLOCKED_FOR_CANDIDATE","INVALID_PHONE_NUMBER","OTP_NOT_SENT","HOLD","APPROVED","REJECTED","ALREADY_ENROLLED_FOR_SELECTED_COURSE","PENDING","CONFIRMED","WITHDRAW","SESSION_DURATION","formatTime","timeString","date","Date","hours","minutes","seconds","split","setHours","parseInt","setMinutes","setSeconds","formattedTime","toLocaleString","hour","minute","hour12","convertUserTimezoneDateTime","dateTime","moment","require","istDateTimeString","istDateTime","tz","userTimezone","Intl","DateTimeFormat","resolvedOptions","timeZone","userDateTime","clone","formattedDate","format","time","convertUserTimezoneTime","defaultDate","concat"],"sources":["C:/Users/DELL/Documents/prepswisefinalprojects/breeze(15)-frontend/breeze/src/components/Constants.js"],"sourcesContent":["// import moment from 'moment-timezone';\r\n\r\nconst Constants = {\r\n\r\n    // base url\r\n    BASE_URL: 'https://prepswise.com:8443/breeze',\r\n    // BASE_URL: 'http://localhost:8080',\r\n\r\n    MESSAGE_COLOR: '#be3144',\r\n    SET_TIME_OUT_FOR_ERROR_MSG: 30000,\r\n    SET_TIME_OUT_FOR_SUCCESS_MSG: 3000,\r\n\r\n    // user types\r\n    ADMIN: \"ADMIN\",\r\n    EXPONENT: \"EXPONENT\",\r\n    CANDIDATE: \"CANDIDATE\",\r\n\r\n    // exponent types\r\n    TRAINER: \"TRAINER\",\r\n    INTERVIEW_SUPPORTER: \"INTERVIEW SUPPORTER\",\r\n    JOB_SUPPORTER: \"JOB SUPPORTER\",\r\n\r\n    // err status\r\n    INVALID_REQUEST_FIELD: \"INVALID_REQUEST_FIELD\",\r\n    EXISTING_USERNAME: \"EXISTING_USERNAME\",\r\n    BREEZE_DATABASE_EXCEPTION: \"BREEZE_DATABASE_EXCEPTION\",\r\n    ADDRESS_EXCEPTION: \"ADDRESS_EXCEPTION\",\r\n    MESSAGING_EXCEPTION: \"MESSAGING_EXCEPTION\",\r\n    ENTITY_NOT_FOUND: \"ENTITY_NOT_FOUND\",\r\n    OTP_NOT_MATCHED: \"OTP_NOT_MATCHED\",\r\n    OTP_NOT_MATCHED_FOR_MAIL: \"OTP_NOT_MATCHED_FOR_MAIL\",\r\n    OTP_NOT_MATCHED_FOR_CONTACT: \"OTP_NOT_MATCHED_FOR_CONTACT\",\r\n    PASSWORD_NOT_MATCHED: \"PASSWORD_NOT_MATCHED\",\r\n    EXISTING_TECHNOLOGY: \"EXISTING_TECHNOLOGY\",\r\n    EXISTING_COURSE: \"EXISTING_COURSE\",\r\n    INACTIVE: \"INACTIVE\",\r\n    FILES_NOT_UPLOADED: \"FILES_NOT_UPLOADED\",\r\n    FILES_NOT_FOUND: \"FILES_NOT_FOUND\",\r\n    EXISTING_MEETING_LINK: \"EXISTING_MEETING_LINK\",\r\n    VERIFIED: \"VERIFIED\",\r\n    EXISTING_INTERVIEW_SUPPORT: \"EXISTING_INTERVIEW_SUPPORT\",\r\n    EXISTING_BOOKINGS: \"EXISTING_BOOKINGS\",\r\n    EXISTING_JOB_SUPPORT: \"EXISTING_JOB_SUPPORT\",\r\n    SLOTS_BLOCKED: \"SLOTS_BLOCKED\",\r\n    SLOTS_BLOCKED_FOR_CANDIDATE: \"SLOTS_BLOCKED_FOR_CANDIDATE\",\r\n    INVALID_PHONE_NUMBER: \"INVALID_PHONE_NUMBER\",\r\n    OTP_NOT_SENT: \"OTP_NOT_SENT\",\r\n\r\n    // admin status\r\n    HOLD: \"HOLD\",\r\n    APPROVED: \"APPROVED\",\r\n    REJECTED: \"REJECTED\",\r\n\r\n    // training candidates status\r\n    ALREADY_ENROLLED_FOR_SELECTED_COURSE: \"ALREADY_ENROLLED_FOR_SELECTED_COURSE\",\r\n    PENDING: \"PENDING\",\r\n    CONFIRMED: \"CONFIRMED\",\r\n    WITHDRAW: \"WITHDRAW\",\r\n\r\n    // session duration\r\n    SESSION_DURATION: \"90 minutes\",\r\n\r\n    // format time\r\n    formatTime: (timeString) => {\r\n        const date = new Date();\r\n        const [hours, minutes, seconds] = timeString.split(':');\r\n        date.setHours(parseInt(hours, 10));\r\n        date.setMinutes(parseInt(minutes, 10));\r\n        date.setSeconds(parseInt(seconds, 10));\r\n\r\n        // Format the time in 12-hour format with AM/PM\r\n        const formattedTime = date.toLocaleString('en-US', {\r\n            hour: 'numeric',\r\n            minute: 'numeric',\r\n            // second: 'numeric',\r\n            hour12: true\r\n        });\r\n\r\n        return formattedTime;\r\n    },\r\n\r\n    // convert date and time based on user timezone\r\n    convertUserTimezoneDateTime: (dateTime) => {\r\n        const moment = require('moment-timezone');\r\n        const istDateTimeString = dateTime; // Assuming this is in IST\r\n        // Parse the datetime string in IST timezone\r\n        const istDateTime = moment.tz(istDateTimeString, 'Asia/Kolkata');\r\n        // Get the user's timezone using browser API\r\n        const userTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n        // Convert the datetime to the user's timezone\r\n        const userDateTime = istDateTime.clone().tz(userTimezone);\r\n        // Format the datetime for display\r\n        const formattedDate = userDateTime.format('YYYY-MM-DD');\r\n        const formattedTime = userDateTime.format('HH:mm:ss');\r\n        return {\r\n            date: formattedDate,\r\n            time: formattedTime\r\n        };\r\n\r\n        // const moment = require('moment-timezone');\r\n        // const utcDateTimeString  = dateTime; // Assuming this is in UTC\r\n        // // Parse the datetime string in UTC timezone\r\n        // const utcDateTime = moment.utc(utcDateTimeString);\r\n        // // Get the user's timezone using browser API\r\n        // const userTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n        // // Convert the datetime to the user's timezone\r\n        // const userDateTime = utcDateTime.clone().tz(userTimezone);\r\n        // // Format the datetime for display\r\n        // const formattedDate = userDateTime.format('YYYY-MM-DD');\r\n        // const formattedTime = userDateTime.format('HH:mm:ss');\r\n        // return {\r\n        //     date: formattedDate,\r\n        //     time: formattedTime\r\n        // };\r\n    },\r\n\r\n    convertUserTimezoneTime: (time) => {\r\n        const moment = require('moment-timezone');\r\n        // Assuming time is in IST, use a default date\r\n        const defaultDate = '1970-01-01';\r\n        const istDateTimeString = `${defaultDate}T${time}`;\r\n\r\n        // Parse the datetime string in IST timezone\r\n        const istDateTime = moment.tz(istDateTimeString, 'Asia/Kolkata');\r\n\r\n        // Get the user's timezone using browser API\r\n        const userTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n\r\n        // Convert the datetime to the user's timezone\r\n        const userDateTime = istDateTime.clone().tz(userTimezone);\r\n\r\n        // Format the time for display\r\n        const formattedTime = userDateTime.format('HH:mm:ss');\r\n\r\n        return formattedTime;\r\n    },\r\n\r\n}\r\n\r\nexport default Constants;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}